

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Sun Aug 01 18:38:38 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK3,global,class=CODE,delta=1,noexec
     8                           	psect	idataBANK4,global,class=CODE,delta=1,noexec
     9                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    58                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    59                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    60                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    61  0000                     
    62                           ; Version 2.32
    63                           ; Generated 02/02/2021 GMT
    64                           ; 
    65                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    66                           ; All rights reserved.
    67                           ; 
    68                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    69                           ; 
    70                           ; Redistribution and use in source and binary forms, with or without modification, are
    71                           ; permitted provided that the following conditions are met:
    72                           ; 
    73                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    74                           ;        conditions and the following disclaimer.
    75                           ; 
    76                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    77                           ;        of conditions and the following disclaimer in the documentation and/or other
    78                           ;        materials provided with the distribution. Publication is not required when
    79                           ;        this file is used in an embedded application.
    80                           ; 
    81                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    82                           ;        software without specific prior written permission.
    83                           ; 
    84                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    85                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    86                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    87                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    88                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    89                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    90                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    91                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    92                           ; 
    93                           ; 
    94                           ; Code-generator required, PIC18F4520 Definitions
    95                           ; 
    96                           ; SFR Addresses
    97  0000                     
    98                           	psect	idataBANK1
    99  003A8A                     __pidataBANK1:
   100                           	callstack 0
   101                           
   102                           ;initializer for _msg2
   103  003A8A  4C                 	db	76
   104  003A8B  61                 	db	97
   105  003A8C  76                 	db	118
   106  003A8D  61                 	db	97
   107  003A8E  6E                 	db	110
   108  003A8F  64                 	db	100
   109  003A90  6F                 	db	111
   110  003A91  2E                 	db	46
   111  003A92  2E                 	db	46
   112  003A93  2E                 	db	46
   113  003A94  00                 	db	0
   114  003A95  00                 	db	0
   115  003A96  00                 	db	0
   116  003A97  00                 	db	0
   117  003A98  00                 	db	0
   118  003A99  00                 	db	0
   119  003A9A  00                 	db	0
   120  003A9B  00                 	db	0
   121  003A9C  00                 	db	0
   122  003A9D  00                 	db	0
   123  003A9E  00                 	db	0
   124  003A9F  00                 	db	0
   125  003AA0  00                 	db	0
   126  003AA1  00                 	db	0
   127  003AA2  00                 	db	0
   128  003AA3  00                 	db	0
   129  003AA4  00                 	db	0
   130  003AA5  00                 	db	0
   131  003AA6  00                 	db	0
   132  003AA7  00                 	db	0
   133  003AA8  00                 	db	0
   134  003AA9  00                 	db	0
   135                           
   136                           ;initializer for _msg1
   137  003AAA  45                 	db	69
   138  003AAB  6E                 	db	110
   139  003AAC  63                 	db	99
   140  003AAD  68                 	db	104
   141  003AAE  65                 	db	101
   142  003AAF  6E                 	db	110
   143  003AB0  64                 	db	100
   144  003AB1  6F                 	db	111
   145  003AB2  20                 	db	32
   146  003AB3  64                 	db	100
   147  003AB4  65                 	db	101
   148  003AB5  20                 	db	32
   149  003AB6  61                 	db	97
   150  003AB7  67                 	db	103
   151  003AB8  75                 	db	117
   152  003AB9  61                 	db	97
   153  003ABA  00                 	db	0
   154  003ABB  00                 	db	0
   155  003ABC  00                 	db	0
   156  003ABD  00                 	db	0
   157  003ABE  00                 	db	0
   158  003ABF  00                 	db	0
   159  003AC0  00                 	db	0
   160  003AC1  00                 	db	0
   161  003AC2  00                 	db	0
   162  003AC3  00                 	db	0
   163  003AC4  00                 	db	0
   164  003AC5  00                 	db	0
   165  003AC6  00                 	db	0
   166  003AC7  00                 	db	0
   167  003AC8  00                 	db	0
   168  003AC9  00                 	db	0
   169                           
   170                           	psect	idataBANK2
   171  0030A2                     __pidataBANK2:
   172                           	callstack 0
   173                           
   174                           ;initializer for washTwo@F2418
   175  0030A2  49                 	db	73
   176  0030A3  6E                 	db	110
   177  0030A4  69                 	db	105
   178  0030A5  63                 	db	99
   179  0030A6  69                 	db	105
   180  0030A7  61                 	db	97
   181  0030A8  6E                 	db	110
   182  0030A9  64                 	db	100
   183  0030AA  6F                 	db	111
   184  0030AB  20                 	db	32
   185  0030AC  20                 	db	32
   186  0030AD  20                 	db	32
   187  0030AE  20                 	db	32
   188  0030AF  20                 	db	32
   189  0030B0  20                 	db	32
   190  0030B1  20                 	db	32
   191  0030B2  4C                 	db	76
   192  0030B3  61                 	db	97
   193  0030B4  76                 	db	118
   194  0030B5  61                 	db	97
   195  0030B6  67                 	db	103
   196  0030B7  65                 	db	101
   197  0030B8  6D                 	db	109
   198  0030B9  20                 	db	32
   199  0030BA  64                 	db	100
   200  0030BB  69                 	db	105
   201  0030BC  61                 	db	97
   202  0030BD  41                 	db	65
   203  0030BE  64                 	db	100
   204  0030BF  69                 	db	105
   205  0030C0  61                 	db	97
   206  0030C1  00                 	db	0
   207                           
   208                           ;initializer for washOne@F2411
   209  0030C2  49                 	db	73
   210  0030C3  6E                 	db	110
   211  0030C4  69                 	db	105
   212  0030C5  63                 	db	99
   213  0030C6  69                 	db	105
   214  0030C7  61                 	db	97
   215  0030C8  6E                 	db	110
   216  0030C9  64                 	db	100
   217  0030CA  6F                 	db	111
   218  0030CB  20                 	db	32
   219  0030CC  20                 	db	32
   220  0030CD  20                 	db	32
   221  0030CE  20                 	db	32
   222  0030CF  20                 	db	32
   223  0030D0  20                 	db	32
   224  0030D1  20                 	db	32
   225  0030D2  4C                 	db	76
   226  0030D3  61                 	db	97
   227  0030D4  76                 	db	118
   228  0030D5  61                 	db	97
   229  0030D6  67                 	db	103
   230  0030D7  65                 	db	101
   231  0030D8  6D                 	db	109
   232  0030D9  20                 	db	32
   233  0030DA  70                 	db	112
   234  0030DB  65                 	db	101
   235  0030DC  73                 	db	115
   236  0030DD  61                 	db	97
   237  0030DE  64                 	db	100
   238  0030DF  61                 	db	97
   239  0030E0  00                 	db	0
   240  0030E1  00                 	db	0
   241                           
   242                           ;initializer for preWash@F2404
   243  0030E2  46                 	db	70
   244  0030E3  69                 	db	105
   245  0030E4  6E                 	db	110
   246  0030E5  61                 	db	97
   247  0030E6  6C                 	db	108
   248  0030E7  69                 	db	105
   249  0030E8  7A                 	db	122
   250  0030E9  61                 	db	97
   251  0030EA  6E                 	db	110
   252  0030EB  64                 	db	100
   253  0030EC  6F                 	db	111
   254  0030ED  00                 	db	0
   255  0030EE  00                 	db	0
   256  0030EF  00                 	db	0
   257  0030F0  00                 	db	0
   258  0030F1  00                 	db	0
   259  0030F2  00                 	db	0
   260  0030F3  00                 	db	0
   261  0030F4  00                 	db	0
   262  0030F5  00                 	db	0
   263  0030F6  00                 	db	0
   264  0030F7  00                 	db	0
   265  0030F8  00                 	db	0
   266  0030F9  00                 	db	0
   267  0030FA  00                 	db	0
   268  0030FB  00                 	db	0
   269  0030FC  00                 	db	0
   270  0030FD  00                 	db	0
   271  0030FE  00                 	db	0
   272  0030FF  00                 	db	0
   273  003100  00                 	db	0
   274  003101  00                 	db	0
   275                           
   276                           ;initializer for preWash@F2402
   277  003102  52                 	db	82
   278  003103  65                 	db	101
   279  003104  61                 	db	97
   280  003105  6C                 	db	108
   281  003106  69                 	db	105
   282  003107  7A                 	db	122
   283  003108  61                 	db	97
   284  003109  6E                 	db	110
   285  00310A  64                 	db	100
   286  00310B  6F                 	db	111
   287  00310C  20                 	db	32
   288  00310D  41                 	db	65
   289  00310E  71                 	db	113
   290  00310F  63                 	db	99
   291  003110  75                 	db	117
   292  003111  61                 	db	97
   293  003112  2D                 	db	45
   294  003113  53                 	db	83
   295  003114  70                 	db	112
   296  003115  72                 	db	114
   297  003116  61                 	db	97
   298  003117  79                 	db	121
   299  003118  2E                 	db	46
   300  003119  2E                 	db	46
   301  00311A  2E                 	db	46
   302  00311B  00                 	db	0
   303  00311C  00                 	db	0
   304  00311D  00                 	db	0
   305  00311E  00                 	db	0
   306  00311F  00                 	db	0
   307  003120  00                 	db	0
   308  003121  00                 	db	0
   309                           
   310                           ;initializer for preWash@F2400
   311  003122  49                 	db	73
   312  003123  6E                 	db	110
   313  003124  69                 	db	105
   314  003125  63                 	db	99
   315  003126  69                 	db	105
   316  003127  61                 	db	97
   317  003128  6E                 	db	110
   318  003129  64                 	db	100
   319  00312A  6F                 	db	111
   320  00312B  20                 	db	32
   321  00312C  20                 	db	32
   322  00312D  20                 	db	32
   323  00312E  20                 	db	32
   324  00312F  20                 	db	32
   325  003130  20                 	db	32
   326  003131  20                 	db	32
   327  003132  50                 	db	80
   328  003133  72                 	db	114
   329  003134  65                 	db	101
   330  003135  2D                 	db	45
   331  003136  4C                 	db	76
   332  003137  61                 	db	97
   333  003138  76                 	db	118
   334  003139  61                 	db	97
   335  00313A  67                 	db	103
   336  00313B  65                 	db	101
   337  00313C  6D                 	db	109
   338  00313D  00                 	db	0
   339  00313E  00                 	db	0
   340  00313F  00                 	db	0
   341  003140  00                 	db	0
   342  003141  00                 	db	0
   343                           
   344                           ;initializer for kpOptions2@F2450
   345  003142  45                 	db	69
   346  003143  73                 	db	115
   347  003144  63                 	db	99
   348  003145  6F                 	db	111
   349  003146  6C                 	db	108
   350  003147  68                 	db	104
   351  003148  61                 	db	97
   352  003149  20                 	db	32
   353  00314A  75                 	db	117
   354  00314B  6D                 	db	109
   355  00314C  61                 	db	97
   356  00314D  20                 	db	32
   357  00314E  20                 	db	32
   358  00314F  20                 	db	32
   359  003150  20                 	db	32
   360  003151  20                 	db	32
   361  003152  6F                 	db	111
   362  003153  70                 	db	112
   363  003154  63                 	db	99
   364  003155  61                 	db	97
   365  003156  6F                 	db	111
   366  003157  20                 	db	32
   367  003158  64                 	db	100
   368  003159  65                 	db	101
   369  00315A  20                 	db	32
   370  00315B  6C                 	db	108
   371  00315C  61                 	db	97
   372  00315D  76                 	db	118
   373  00315E  61                 	db	97
   374  00315F  67                 	db	103
   375  003160  65                 	db	101
   376  003161  6D                 	db	109
   377                           
   378                           ;initializer for _msg4
   379  003162  53                 	db	83
   380  003163  65                 	db	101
   381  003164  63                 	db	99
   382  003165  61                 	db	97
   383  003166  6E                 	db	110
   384  003167  64                 	db	100
   385  003168  6F                 	db	111
   386  003169  2E                 	db	46
   387  00316A  2E                 	db	46
   388  00316B  2E                 	db	46
   389  00316C  00                 	db	0
   390  00316D  00                 	db	0
   391  00316E  00                 	db	0
   392  00316F  00                 	db	0
   393  003170  00                 	db	0
   394  003171  00                 	db	0
   395  003172  00                 	db	0
   396  003173  00                 	db	0
   397  003174  00                 	db	0
   398  003175  00                 	db	0
   399  003176  00                 	db	0
   400  003177  00                 	db	0
   401  003178  00                 	db	0
   402  003179  00                 	db	0
   403  00317A  00                 	db	0
   404  00317B  00                 	db	0
   405  00317C  00                 	db	0
   406  00317D  00                 	db	0
   407  00317E  00                 	db	0
   408  00317F  00                 	db	0
   409  003180  00                 	db	0
   410  003181  00                 	db	0
   411                           
   412                           ;initializer for _msg3
   413  003182  45                 	db	69
   414  003183  6E                 	db	110
   415  003184  78                 	db	120
   416  003185  61                 	db	97
   417  003186  67                 	db	103
   418  003187  75                 	db	117
   419  003188  61                 	db	97
   420  003189  6E                 	db	110
   421  00318A  64                 	db	100
   422  00318B  6F                 	db	111
   423  00318C  2E                 	db	46
   424  00318D  2E                 	db	46
   425  00318E  2E                 	db	46
   426  00318F  00                 	db	0
   427  003190  00                 	db	0
   428  003191  00                 	db	0
   429  003192  00                 	db	0
   430  003193  00                 	db	0
   431  003194  00                 	db	0
   432  003195  00                 	db	0
   433  003196  00                 	db	0
   434  003197  00                 	db	0
   435  003198  00                 	db	0
   436  003199  00                 	db	0
   437  00319A  00                 	db	0
   438  00319B  00                 	db	0
   439  00319C  00                 	db	0
   440  00319D  00                 	db	0
   441  00319E  00                 	db	0
   442  00319F  00                 	db	0
   443  0031A0  00                 	db	0
   444  0031A1  00                 	db	0
   445                           
   446                           	psect	idataBANK3
   447  0031A2                     __pidataBANK3:
   448                           	callstack 0
   449                           
   450                           ;initializer for kpOptions2@F2452
   451  0031A2  31                 	db	49
   452  0031A3  2D                 	db	45
   453  0031A4  50                 	db	80
   454  0031A5  65                 	db	101
   455  0031A6  73                 	db	115
   456  0031A7  61                 	db	97
   457  0031A8  64                 	db	100
   458  0031A9  61                 	db	97
   459  0031AA  20                 	db	32
   460  0031AB  20                 	db	32
   461  0031AC  20                 	db	32
   462  0031AD  20                 	db	32
   463  0031AE  20                 	db	32
   464  0031AF  20                 	db	32
   465  0031B0  20                 	db	32
   466  0031B1  20                 	db	32
   467  0031B2  32                 	db	50
   468  0031B3  2D                 	db	45
   469  0031B4  44                 	db	68
   470  0031B5  69                 	db	105
   471  0031B6  61                 	db	97
   472  0031B7  20                 	db	32
   473  0031B8  61                 	db	97
   474  0031B9  20                 	db	32
   475  0031BA  64                 	db	100
   476  0031BB  69                 	db	105
   477  0031BC  61                 	db	97
   478  0031BD  20                 	db	32
   479  0031BE  20                 	db	32
   480  0031BF  20                 	db	32
   481  0031C0  20                 	db	32
   482  0031C1  20                 	db	32
   483  0031C2  33                 	db	51
   484  0031C3  2D                 	db	45
   485  0031C4  52                 	db	82
   486  0031C5  61                 	db	97
   487  0031C6  70                 	db	112
   488  0031C7  69                 	db	105
   489  0031C8  64                 	db	100
   490  0031C9  61                 	db	97
   491  0031CA  20                 	db	32
   492  0031CB  20                 	db	32
   493  0031CC  20                 	db	32
   494  0031CD  20                 	db	32
   495  0031CE  20                 	db	32
   496  0031CF  20                 	db	32
   497  0031D0  20                 	db	32
   498  0031D1  20                 	db	32
   499  0031D2  34                 	db	52
   500  0031D3  2D                 	db	45
   501  0031D4  45                 	db	69
   502  0031D5  63                 	db	99
   503  0031D6  6F                 	db	111
   504  0031D7  6E                 	db	110
   505  0031D8  6F                 	db	111
   506  0031D9  6D                 	db	109
   507  0031DA  69                 	db	105
   508  0031DB  63                 	db	99
   509  0031DC  61                 	db	97
   510  0031DD  00                 	db	0
   511  0031DE  00                 	db	0
   512  0031DF  00                 	db	0
   513  0031E0  00                 	db	0
   514  0031E1  00                 	db	0
   515                           
   516                           ;initializer for washFour@F2432
   517  0031E2  49                 	db	73
   518  0031E3  6E                 	db	110
   519  0031E4  69                 	db	105
   520  0031E5  63                 	db	99
   521  0031E6  69                 	db	105
   522  0031E7  61                 	db	97
   523  0031E8  6E                 	db	110
   524  0031E9  64                 	db	100
   525  0031EA  6F                 	db	111
   526  0031EB  20                 	db	32
   527  0031EC  20                 	db	32
   528  0031ED  20                 	db	32
   529  0031EE  20                 	db	32
   530  0031EF  20                 	db	32
   531  0031F0  20                 	db	32
   532  0031F1  20                 	db	32
   533  0031F2  4C                 	db	76
   534  0031F3  61                 	db	97
   535  0031F4  76                 	db	118
   536  0031F5  61                 	db	97
   537  0031F6  67                 	db	103
   538  0031F7  65                 	db	101
   539  0031F8  6D                 	db	109
   540  0031F9  20                 	db	32
   541  0031FA  65                 	db	101
   542  0031FB  63                 	db	99
   543  0031FC  6F                 	db	111
   544  0031FD  6E                 	db	110
   545  0031FE  6F                 	db	111
   546  0031FF  6D                 	db	109
   547  003200  69                 	db	105
   548  003201  63                 	db	99
   549  003202  61                 	db	97
   550  003203  00                 	db	0
   551  003204  00                 	db	0
   552  003205  00                 	db	0
   553  003206  00                 	db	0
   554  003207  00                 	db	0
   555  003208  00                 	db	0
   556  003209  00                 	db	0
   557  00320A  00                 	db	0
   558  00320B  00                 	db	0
   559  00320C  00                 	db	0
   560  00320D  00                 	db	0
   561  00320E  00                 	db	0
   562  00320F  00                 	db	0
   563  003210  00                 	db	0
   564  003211  00                 	db	0
   565                           
   566                           ;initializer for main@F2391
   567  003212  49                 	db	73
   568  003213  6E                 	db	110
   569  003214  69                 	db	105
   570  003215  63                 	db	99
   571  003216  69                 	db	105
   572  003217  61                 	db	97
   573  003218  6C                 	db	108
   574  003219  69                 	db	105
   575  00321A  7A                 	db	122
   576  00321B  61                 	db	97
   577  00321C  6E                 	db	110
   578  00321D  64                 	db	100
   579  00321E  6F                 	db	111
   580  00321F  2E                 	db	46
   581  003220  2E                 	db	46
   582  003221  2E                 	db	46
   583  003222  4C                 	db	76
   584  003223  61                 	db	97
   585  003224  76                 	db	118
   586  003225  61                 	db	97
   587  003226  2D                 	db	45
   588  003227  6C                 	db	108
   589  003228  6F                 	db	111
   590  003229  75                 	db	117
   591  00322A  63                 	db	99
   592  00322B  61                 	db	97
   593  00322C  73                 	db	115
   594  00322D  00                 	db	0
   595  00322E  00                 	db	0
   596  00322F  00                 	db	0
   597  003230  00                 	db	0
   598  003231  00                 	db	0
   599                           
   600                           ;initializer for washThree@F2425
   601  003232  49                 	db	73
   602  003233  6E                 	db	110
   603  003234  69                 	db	105
   604  003235  63                 	db	99
   605  003236  69                 	db	105
   606  003237  61                 	db	97
   607  003238  6E                 	db	110
   608  003239  64                 	db	100
   609  00323A  6F                 	db	111
   610  00323B  20                 	db	32
   611  00323C  20                 	db	32
   612  00323D  20                 	db	32
   613  00323E  20                 	db	32
   614  00323F  20                 	db	32
   615  003240  20                 	db	32
   616  003241  20                 	db	32
   617  003242  4C                 	db	76
   618  003243  61                 	db	97
   619  003244  76                 	db	118
   620  003245  61                 	db	97
   621  003246  67                 	db	103
   622  003247  65                 	db	101
   623  003248  6D                 	db	109
   624  003249  20                 	db	32
   625  00324A  72                 	db	114
   626  00324B  61                 	db	97
   627  00324C  70                 	db	112
   628  00324D  69                 	db	105
   629  00324E  64                 	db	100
   630  00324F  61                 	db	97
   631  003250  00                 	db	0
   632  003251  00                 	db	0
   633                           
   634                           ;initializer for _msg5
   635  003252  50                 	db	80
   636  003253  61                 	db	97
   637  003254  72                 	db	114
   638  003255  61                 	db	97
   639  003256  20                 	db	32
   640  003257  6F                 	db	111
   641  003258  75                 	db	117
   642  003259  74                 	db	116
   643  00325A  72                 	db	114
   644  00325B  61                 	db	97
   645  00325C  20                 	db	32
   646  00325D  20                 	db	32
   647  00325E  20                 	db	32
   648  00325F  20                 	db	32
   649  003260  20                 	db	32
   650  003261  20                 	db	32
   651  003262  6C                 	db	108
   652  003263  61                 	db	97
   653  003264  76                 	db	118
   654  003265  61                 	db	97
   655  003266  67                 	db	103
   656  003267  65                 	db	101
   657  003268  6D                 	db	109
   658  003269  20                 	db	32
   659  00326A  20                 	db	32
   660  00326B  20                 	db	32
   661  00326C  20                 	db	32
   662  00326D  20                 	db	32
   663  00326E  20                 	db	32
   664  00326F  20                 	db	32
   665  003270  20                 	db	32
   666  003271  20                 	db	32
   667  003272  70                 	db	112
   668  003273  72                 	db	114
   669  003274  65                 	db	101
   670  003275  73                 	db	115
   671  003276  73                 	db	115
   672  003277  69                 	db	105
   673  003278  6F                 	db	111
   674  003279  6E                 	db	110
   675  00327A  65                 	db	101
   676  00327B  20                 	db	32
   677  00327C  52                 	db	82
   678  00327D  45                 	db	69
   679  00327E  53                 	db	83
   680  00327F  45                 	db	69
   681  003280  54                 	db	84
   682  003281  00                 	db	0
   683  003282  00                 	db	0
   684  003283  00                 	db	0
   685  003284  00                 	db	0
   686  003285  00                 	db	0
   687  003286  00                 	db	0
   688  003287  00                 	db	0
   689  003288  00                 	db	0
   690  003289  00                 	db	0
   691  00328A  00                 	db	0
   692  00328B  00                 	db	0
   693  00328C  00                 	db	0
   694  00328D  00                 	db	0
   695  00328E  00                 	db	0
   696  00328F  00                 	db	0
   697  003290  00                 	db	0
   698  003291  00                 	db	0
   699                           
   700                           	psect	idataBANK4
   701  003ACA                     __pidataBANK4:
   702                           	callstack 0
   703                           
   704                           ;initializer for main@F2393
   705  003ACA  50                 	db	80
   706  003ACB  72                 	db	114
   707  003ACC  65                 	db	101
   708  003ACD  20                 	db	32
   709  003ACE  6C                 	db	108
   710  003ACF  61                 	db	97
   711  003AD0  76                 	db	118
   712  003AD1  61                 	db	97
   713  003AD2  67                 	db	103
   714  003AD3  65                 	db	101
   715  003AD4  6D                 	db	109
   716  003AD5  3F                 	db	63
   717  003AD6  20                 	db	32
   718  003AD7  20                 	db	32
   719  003AD8  20                 	db	32
   720  003AD9  20                 	db	32
   721  003ADA  28                 	db	40
   722  003ADB  2A                 	db	42
   723  003ADC  29                 	db	41
   724  003ADD  41                 	db	65
   725  003ADE  71                 	db	113
   726  003ADF  63                 	db	99
   727  003AE0  75                 	db	117
   728  003AE1  61                 	db	97
   729  003AE2  2D                 	db	45
   730  003AE3  53                 	db	83
   731  003AE4  70                 	db	112
   732  003AE5  72                 	db	114
   733  003AE6  61                 	db	97
   734  003AE7  79                 	db	121
   735  003AE8  20                 	db	32
   736  003AE9  20                 	db	32
   737  003AEA  28                 	db	40
   738  003AEB  23                 	db	35
   739  003AEC  29                 	db	41
   740  003AED  50                 	db	80
   741  003AEE  75                 	db	117
   742  003AEF  6C                 	db	108
   743  003AF0  61                 	db	97
   744  003AF1  72                 	db	114
   745  003AF2  20                 	db	32
   746  003AF3  65                 	db	101
   747  003AF4  74                 	db	116
   748  003AF5  61                 	db	97
   749  003AF6  70                 	db	112
   750  003AF7  61                 	db	97
   751  003AF8  00                 	db	0
   752  003AF9  00                 	db	0
   753  003AFA  00                 	db	0
   754  003AFB  00                 	db	0
   755  003AFC  00                 	db	0
   756  003AFD  00                 	db	0
   757  003AFE  00                 	db	0
   758  003AFF  00                 	db	0
   759  003B00  00                 	db	0
   760  003B01  00                 	db	0
   761  003B02  00                 	db	0
   762  003B03  00                 	db	0
   763  003B04  00                 	db	0
   764  003B05  00                 	db	0
   765  003B06  00                 	db	0
   766  003B07  00                 	db	0
   767  003B08  00                 	db	0
   768  003B09  00                 	db	0
   769                           
   770                           	psect	smallconst
   771  000600                     __psmallconst:
   772                           	callstack 0
   773  000600  00                 	db	0
   774  000601                     _valor@ssd$F340:
   775                           	callstack 0
   776  000601  3F                 	db	63
   777  000602  06                 	db	6
   778  000603  5B                 	db	91
   779  000604  4F                 	db	79
   780  000605  66                 	db	102
   781  000606  6D                 	db	109
   782  000607  7D                 	db	125
   783  000608  07                 	db	7
   784  000609  7F                 	db	127
   785  00060A  6F                 	db	111
   786  00060B  77                 	db	119
   787  00060C  7C                 	db	124
   788  00060D  39                 	db	57
   789  00060E  5E                 	db	94
   790  00060F  79                 	db	121
   791  000610  71                 	db	113
   792  000611  00                 	db	0
   793  000612                     __end_of_valor@ssd$F340:
   794                           	callstack 0
   795  0000                     _T2CON	set	4042
   796  0000                     _CCP2CON	set	4026
   797  0000                     _CCPR2L	set	4027
   798  0000                     _CCP1CON	set	4029
   799  0000                     _CCPR1L	set	4030
   800  0000                     _PR2	set	4043
   801  0000                     _TRISE	set	3990
   802  0000                     _TRISC	set	3988
   803  0000                     _TRISA	set	3986
   804  0000                     _PORTE	set	3972
   805  0000                     _PORTC	set	3970
   806  0000                     _PORTA	set	3968
   807  0000                     _PORTB	set	3969
   808  0000                     _TRISB	set	3987
   809  0000                     _TRISD	set	3989
   810  0000                     _PORTD	set	3971
   811  000612                     STR_1:
   812  000612  46                 	db	70	;'F'
   813  000613  69                 	db	105	;'i'
   814  000614  6E                 	db	110	;'n'
   815  000615  61                 	db	97	;'a'
   816  000616  6C                 	db	108	;'l'
   817  000617  69                 	db	105	;'i'
   818  000618  7A                 	db	122	;'z'
   819  000619  61                 	db	97	;'a'
   820  00061A  64                 	db	100	;'d'
   821  00061B  61                 	db	97	;'a'
   822  00061C  21                 	db	33
   823  00061D  00                 	db	0
   824  00061E  00                 	db	0	; dummy byte at the end
   825  0000                     
   826                           ; #config settings
   827                           
   828                           	psect	cinit
   829  003440                     __pcinit:
   830                           	callstack 0
   831  003440                     start_initialization:
   832                           	callstack 0
   833  003440                     __initialization:
   834                           	callstack 0
   835                           
   836                           ; Initialize objects allocated to BANK4 (64 bytes)
   837                           ; load TBLPTR registers with __pidataBANK4
   838  003440  0ECA               	movlw	low __pidataBANK4
   839  003442  6EF6               	movwf	tblptrl,c
   840  003444  0E3A               	movlw	high __pidataBANK4
   841  003446  6EF7               	movwf	tblptrh,c
   842  003448  0E00               	movlw	low (__pidataBANK4 shr (0+16))
   843  00344A  6EF8               	movwf	tblptru,c
   844  00344C  EE04  F000         	lfsr	0,__pdataBANK4
   845  003450  EE10 F040          	lfsr	1,64
   846  003454                     copy_data0:
   847  003454  0009               	tblrd		*+
   848  003456  CFF5 FFEE          	movff	tablat,postinc0
   849  00345A  50E5               	movf	postdec1,w,c
   850  00345C  50E1               	movf	fsr1l,w,c
   851  00345E  E1FA               	bnz	copy_data0
   852                           
   853                           ; Initialize objects allocated to BANK3 (240 bytes)
   854                           ; load TBLPTR registers with __pidataBANK3
   855  003460  0EA2               	movlw	low __pidataBANK3
   856  003462  6EF6               	movwf	tblptrl,c
   857  003464  0E31               	movlw	high __pidataBANK3
   858  003466  6EF7               	movwf	tblptrh,c
   859  003468  0E00               	movlw	low (__pidataBANK3 shr (0+16))
   860  00346A  6EF8               	movwf	tblptru,c
   861  00346C  EE03  F000         	lfsr	0,__pdataBANK3
   862  003470  EE10 F0F0          	lfsr	1,240
   863  003474                     copy_data1:
   864  003474  0009               	tblrd		*+
   865  003476  CFF5 FFEE          	movff	tablat,postinc0
   866  00347A  50E5               	movf	postdec1,w,c
   867  00347C  50E1               	movf	fsr1l,w,c
   868  00347E  E1FA               	bnz	copy_data1
   869                           
   870                           ; Initialize objects allocated to BANK2 (256 bytes)
   871                           ; load TBLPTR registers with __pidataBANK2
   872  003480  0EA2               	movlw	low __pidataBANK2
   873  003482  6EF6               	movwf	tblptrl,c
   874  003484  0E30               	movlw	high __pidataBANK2
   875  003486  6EF7               	movwf	tblptrh,c
   876  003488  0E00               	movlw	low (__pidataBANK2 shr (0+16))
   877  00348A  6EF8               	movwf	tblptru,c
   878  00348C  EE02  F000         	lfsr	0,__pdataBANK2
   879  003490  EE11 F000          	lfsr	1,256
   880  003494                     copy_data2:
   881  003494  0009               	tblrd		*+
   882  003496  CFF5 FFEE          	movff	tablat,postinc0
   883  00349A  50E5               	movf	postdec1,w,c
   884  00349C  50E1               	movf	fsr1l,w,c
   885  00349E  E1FA               	bnz	copy_data2
   886  0034A0  50E2               	movf	fsr1h,w,c
   887  0034A2  E1F8               	bnz	copy_data2
   888                           
   889                           ; Initialize objects allocated to BANK1 (64 bytes)
   890                           ; load TBLPTR registers with __pidataBANK1
   891  0034A4  0E8A               	movlw	low __pidataBANK1
   892  0034A6  6EF6               	movwf	tblptrl,c
   893  0034A8  0E3A               	movlw	high __pidataBANK1
   894  0034AA  6EF7               	movwf	tblptrh,c
   895  0034AC  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   896  0034AE  6EF8               	movwf	tblptru,c
   897  0034B0  EE01  F0C0         	lfsr	0,__pdataBANK1
   898  0034B4  EE10 F040          	lfsr	1,64
   899  0034B8                     copy_data3:
   900  0034B8  0009               	tblrd		*+
   901  0034BA  CFF5 FFEE          	movff	tablat,postinc0
   902  0034BE  50E5               	movf	postdec1,w,c
   903  0034C0  50E1               	movf	fsr1l,w,c
   904  0034C2  E1FA               	bnz	copy_data3
   905                           
   906                           ; Clear objects allocated to COMRAM (12 bytes)
   907  0034C4  EE00  F059         	lfsr	0,__pbssCOMRAM
   908  0034C8  0E0C               	movlw	12
   909  0034CA                     clear_0:
   910  0034CA  6AEE               	clrf	postinc0,c
   911  0034CC  06E8               	decf	wreg,f,c
   912  0034CE  E1FD               	bnz	clear_0
   913  0034D0                     end_of_initialization:
   914                           	callstack 0
   915  0034D0                     __end_of__initialization:
   916                           	callstack 0
   917  0034D0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   918  0034D2  6EF8               	movwf	tblptru,c
   919  0034D4  0100               	movlb	0
   920  0034D6  EFB6  F01A         	goto	_main	;jump to C main() function
   921                           
   922                           	psect	bssCOMRAM
   923  000059                     __pbssCOMRAM:
   924                           	callstack 0
   925  000059                     kpDebounce@valorAntigo:
   926                           	callstack 0
   927  000059                     	ds	2
   928  00005B                     kpDebounce@valorNovo:
   929                           	callstack 0
   930  00005B                     	ds	2
   931  00005D                     _valor:
   932                           	callstack 0
   933  00005D                     	ds	2
   934  00005F                     _v3:
   935                           	callstack 0
   936  00005F                     	ds	1
   937  000060                     _v2:
   938                           	callstack 0
   939  000060                     	ds	1
   940  000061                     _v1:
   941                           	callstack 0
   942  000061                     	ds	1
   943  000062                     _v0:
   944                           	callstack 0
   945  000062                     	ds	1
   946  000063                     _display:
   947                           	callstack 0
   948  000063                     	ds	1
   949  000064                     kpDebounce@tempo:
   950                           	callstack 0
   951  000064                     	ds	1
   952                           
   953                           	psect	dataBANK1
   954  0001C0                     __pdataBANK1:
   955                           	callstack 0
   956  0001C0                     _msg2:
   957                           	callstack 0
   958  0001C0                     	ds	32
   959  0001E0                     _msg1:
   960                           	callstack 0
   961  0001E0                     	ds	32
   962                           
   963                           	psect	dataBANK2
   964  000200                     __pdataBANK2:
   965                           	callstack 0
   966  000200                     washTwo@F2418:
   967                           	callstack 0
   968  000200                     	ds	32
   969  000220                     washOne@F2411:
   970                           	callstack 0
   971  000220                     	ds	32
   972  000240                     preWash@F2404:
   973                           	callstack 0
   974  000240                     	ds	32
   975  000260                     preWash@F2402:
   976                           	callstack 0
   977  000260                     	ds	32
   978  000280                     preWash@F2400:
   979                           	callstack 0
   980  000280                     	ds	32
   981  0002A0                     kpOptions2@F2450:
   982                           	callstack 0
   983  0002A0                     	ds	32
   984  0002C0                     _msg4:
   985                           	callstack 0
   986  0002C0                     	ds	32
   987  0002E0                     _msg3:
   988                           	callstack 0
   989  0002E0                     	ds	32
   990                           
   991                           	psect	dataBANK3
   992  000300                     __pdataBANK3:
   993                           	callstack 0
   994  000300                     kpOptions2@F2452:
   995                           	callstack 0
   996  000300                     	ds	64
   997  000340                     washFour@F2432:
   998                           	callstack 0
   999  000340                     	ds	48
  1000  000370                     main@F2391:
  1001                           	callstack 0
  1002  000370                     	ds	32
  1003  000390                     washThree@F2425:
  1004                           	callstack 0
  1005  000390                     	ds	32
  1006  0003B0                     _msg5:
  1007                           	callstack 0
  1008  0003B0                     	ds	64
  1009                           
  1010                           	psect	dataBANK4
  1011  000400                     __pdataBANK4:
  1012                           	callstack 0
  1013  000400                     main@F2393:
  1014                           	callstack 0
  1015  000400                     	ds	64
  1016                           
  1017                           	psect	cstackBANK1
  1018  000100                     __pcstackBANK1:
  1019                           	callstack 0
  1020  000100                     preWash@msgem:
  1021                           	callstack 0
  1022                           
  1023                           ; 32 bytes @ 0x0
  1024  000100                     	ds	32
  1025  000120                     preWash@msgem1:
  1026                           	callstack 0
  1027                           
  1028                           ; 32 bytes @ 0x20
  1029  000120                     	ds	32
  1030  000140                     preWash@msgem2:
  1031                           	callstack 0
  1032                           
  1033                           ; 32 bytes @ 0x40
  1034  000140                     	ds	32
  1035  000160                     main@msg1:
  1036                           	callstack 0
  1037                           
  1038                           ; 64 bytes @ 0x60
  1039  000160                     	ds	64
  1040  0001A0                     main@msg:
  1041                           	callstack 0
  1042                           
  1043                           ; 32 bytes @ 0xA0
  1044  0001A0                     	ds	32
  1045                           
  1046                           	psect	cstackBANK0
  1047  000080                     __pcstackBANK0:
  1048                           	callstack 0
  1049  000080                     kpOptions2@msg3:
  1050                           	callstack 0
  1051                           
  1052                           ; 64 bytes @ 0x0
  1053  000080                     	ds	64
  1054  0000C0                     kpOptions2@msg2:
  1055                           	callstack 0
  1056                           
  1057                           ; 32 bytes @ 0x40
  1058  0000C0                     	ds	32
  1059  0000E0                     kpOptions2@tecla1:
  1060                           	callstack 0
  1061                           
  1062                           ; 2 bytes @ 0x60
  1063  0000E0                     	ds	2
  1064                           
  1065                           	psect	cstackCOMRAM
  1066  000001                     __pcstackCOMRAM:
  1067                           	callstack 0
  1068  000001                     ??_kpDebounce:
  1069  000001                     ?_kpRead:
  1070                           	callstack 0
  1071  000001                     ?___wmul:
  1072                           	callstack 0
  1073  000001                     ?___lwdiv:
  1074                           	callstack 0
  1075  000001                     ?___fladd:
  1076                           	callstack 0
  1077  000001                     ?___aldiv:
  1078                           	callstack 0
  1079  000001                     Delay40us@i:
  1080                           	callstack 0
  1081  000001                     digitalWrite@pin:
  1082                           	callstack 0
  1083  000001                     pinMode@pin:
  1084                           	callstack 0
  1085  000001                     delay@temp:
  1086                           	callstack 0
  1087  000001                     delayAux@i:
  1088                           	callstack 0
  1089  000001                     ___wmul@multiplier:
  1090                           	callstack 0
  1091  000001                     ___lwdiv@dividend:
  1092                           	callstack 0
  1093  000001                     ___aldiv@dividend:
  1094                           	callstack 0
  1095  000001                     ___flge@ff1:
  1096                           	callstack 0
  1097  000001                     ___fladd@b:
  1098                           	callstack 0
  1099                           
  1100                           ; 4 bytes @ 0x0
  1101  000001                     	ds	1
  1102  000002                     Delay2ms@i:
  1103                           	callstack 0
  1104                           
  1105                           ; 1 bytes @ 0x1
  1106  000002                     	ds	1
  1107  000003                     ??_delayAux:
  1108  000003                     digitalWrite@value:
  1109                           	callstack 0
  1110  000003                     pinMode@type:
  1111                           	callstack 0
  1112  000003                     delay@i:
  1113                           	callstack 0
  1114  000003                     ___wmul@multiplicand:
  1115                           	callstack 0
  1116  000003                     ___lwdiv@divisor:
  1117                           	callstack 0
  1118                           
  1119                           ; 2 bytes @ 0x2
  1120  000003                     	ds	1
  1121  000004                     delayAux@j:
  1122                           	callstack 0
  1123                           
  1124                           ; 2 bytes @ 0x3
  1125  000004                     	ds	1
  1126  000005                     ??_digitalWrite:
  1127  000005                     ??_pinMode:
  1128  000005                     delay@j:
  1129                           	callstack 0
  1130  000005                     ___wmul@product:
  1131                           	callstack 0
  1132  000005                     ___lwdiv@quotient:
  1133                           	callstack 0
  1134  000005                     ___aldiv@divisor:
  1135                           	callstack 0
  1136  000005                     ___flge@ff2:
  1137                           	callstack 0
  1138  000005                     ___fladd@a:
  1139                           	callstack 0
  1140                           
  1141                           ; 4 bytes @ 0x4
  1142  000005                     	ds	1
  1143  000006                     kpDebounce@old_D:
  1144                           	callstack 0
  1145  000006                     delay@k:
  1146                           	callstack 0
  1147                           
  1148                           ; 1 bytes @ 0x5
  1149  000006                     	ds	1
  1150  000007                     ??_ssdUpdate:
  1151  000007                     lcdCommand@old_D:
  1152                           	callstack 0
  1153  000007                     lcdData@valor:
  1154                           	callstack 0
  1155  000007                     ___lwdiv@counter:
  1156                           	callstack 0
  1157  000007                     kpDebounce@k:
  1158                           	callstack 0
  1159                           
  1160                           ; 2 bytes @ 0x6
  1161  000007                     	ds	1
  1162  000008                     ??_pwmSet1:
  1163  000008                     ??_pwmSet2:
  1164  000008                     lcdCommand@cmd:
  1165                           	callstack 0
  1166  000008                     lcdData@old_D:
  1167                           	callstack 0
  1168                           
  1169                           ; 1 bytes @ 0x7
  1170  000008                     	ds	1
  1171  000009                     ??___fladd:
  1172  000009                     ??___flge:
  1173  000009                     lcdPosition@col:
  1174                           	callstack 0
  1175  000009                     kpDebounce@j:
  1176                           	callstack 0
  1177  000009                     ___aldiv@counter:
  1178                           	callstack 0
  1179  000009                     printf@msg:
  1180                           	callstack 0
  1181                           
  1182                           ; 2 bytes @ 0x8
  1183  000009                     	ds	1
  1184  00000A                     lcdPosition@comand:
  1185                           	callstack 0
  1186  00000A                     kpDebounce@i:
  1187                           	callstack 0
  1188  00000A                     pwmSet1@porcento:
  1189                           	callstack 0
  1190  00000A                     pwmSet2@porcento:
  1191                           	callstack 0
  1192  00000A                     ___aldiv@sign:
  1193                           	callstack 0
  1194                           
  1195                           ; 1 bytes @ 0x9
  1196  00000A                     	ds	1
  1197  00000B                     lcdPosition@lin:
  1198                           	callstack 0
  1199  00000B                     printf@j:
  1200                           	callstack 0
  1201  00000B                     pwmSet1@val:
  1202                           	callstack 0
  1203  00000B                     pwmSet2@val:
  1204                           	callstack 0
  1205  00000B                     ___aldiv@quotient:
  1206                           	callstack 0
  1207                           
  1208                           ; 4 bytes @ 0xA
  1209  00000B                     	ds	2
  1210  00000D                     ??_printf:
  1211  00000D                     ___fladd@signs:
  1212                           	callstack 0
  1213                           
  1214                           ; 1 bytes @ 0xC
  1215  00000D                     	ds	1
  1216  00000E                     ___fladd@aexp:
  1217                           	callstack 0
  1218                           
  1219                           ; 1 bytes @ 0xD
  1220  00000E                     	ds	1
  1221  00000F                     ?___almod:
  1222                           	callstack 0
  1223  00000F                     ___fladd@bexp:
  1224                           	callstack 0
  1225  00000F                     printf@i:
  1226                           	callstack 0
  1227  00000F                     pwmFrequency@freq:
  1228                           	callstack 0
  1229  00000F                     ___almod@dividend:
  1230                           	callstack 0
  1231                           
  1232                           ; 4 bytes @ 0xE
  1233  00000F                     	ds	1
  1234  000010                     ___fladd@grs:
  1235                           	callstack 0
  1236                           
  1237                           ; 1 bytes @ 0xF
  1238  000010                     	ds	1
  1239  000011                     buzzer@i:
  1240                           	callstack 0
  1241                           
  1242                           ; 2 bytes @ 0x10
  1243  000011                     	ds	2
  1244  000013                     ___almod@divisor:
  1245                           	callstack 0
  1246                           
  1247                           ; 4 bytes @ 0x12
  1248  000013                     	ds	4
  1249  000017                     ___almod@counter:
  1250                           	callstack 0
  1251                           
  1252                           ; 1 bytes @ 0x16
  1253  000017                     	ds	1
  1254  000018                     ___almod@sign:
  1255                           	callstack 0
  1256                           
  1257                           ; 1 bytes @ 0x17
  1258  000018                     	ds	1
  1259  000019                     ssdDigit@pos:
  1260                           	callstack 0
  1261                           
  1262                           ; 1 bytes @ 0x18
  1263  000019                     	ds	1
  1264  00001A                     ssdDigit@val:
  1265                           	callstack 0
  1266                           
  1267                           ; 1 bytes @ 0x19
  1268  00001A                     	ds	1
  1269  00001B                     ssdTimer@cont:
  1270                           	callstack 0
  1271  00001B                     washOne@msg:
  1272                           	callstack 0
  1273  00001B                     washTwo@msg:
  1274                           	callstack 0
  1275  00001B                     washThree@msg:
  1276                           	callstack 0
  1277  00001B                     washFour@msg:
  1278                           	callstack 0
  1279                           
  1280                           ; 48 bytes @ 0x1A
  1281  00001B                     	ds	4
  1282  00001F                     ssdTimer@c:
  1283                           	callstack 0
  1284                           
  1285                           ; 2 bytes @ 0x1E
  1286  00001F                     	ds	2
  1287  000021                     ssdTimer@i:
  1288                           	callstack 0
  1289                           
  1290                           ; 2 bytes @ 0x20
  1291  000021                     	ds	2
  1292  000023                     ssdTimer@tempo:
  1293                           	callstack 0
  1294                           
  1295                           ; 4 bytes @ 0x22
  1296  000023                     	ds	24
  1297  00003B                     washOne@c:
  1298                           	callstack 0
  1299  00003B                     washTwo@c:
  1300                           	callstack 0
  1301  00003B                     washThree@c:
  1302                           	callstack 0
  1303                           
  1304                           ; 2 bytes @ 0x3A
  1305  00003B                     	ds	2
  1306  00003D                     washOne@i:
  1307                           	callstack 0
  1308  00003D                     washTwo@i:
  1309                           	callstack 0
  1310  00003D                     washThree@i:
  1311                           	callstack 0
  1312                           
  1313                           ; 2 bytes @ 0x3C
  1314  00003D                     	ds	2
  1315  00003F                     washOne@tempo:
  1316                           	callstack 0
  1317  00003F                     washTwo@tempo:
  1318                           	callstack 0
  1319  00003F                     washThree@tempo:
  1320                           	callstack 0
  1321                           
  1322                           ; 4 bytes @ 0x3E
  1323  00003F                     	ds	4
  1324  000043                     washOne@cont:
  1325                           	callstack 0
  1326  000043                     washTwo@cont:
  1327                           	callstack 0
  1328  000043                     washThree@cont:
  1329                           	callstack 0
  1330                           
  1331                           ; 4 bytes @ 0x42
  1332  000043                     	ds	8
  1333  00004B                     washFour@c:
  1334                           	callstack 0
  1335                           
  1336                           ; 2 bytes @ 0x4A
  1337  00004B                     	ds	2
  1338  00004D                     washFour@i:
  1339                           	callstack 0
  1340                           
  1341                           ; 2 bytes @ 0x4C
  1342  00004D                     	ds	2
  1343  00004F                     washFour@tempo:
  1344                           	callstack 0
  1345                           
  1346                           ; 4 bytes @ 0x4E
  1347  00004F                     	ds	4
  1348  000053                     washFour@cont:
  1349                           	callstack 0
  1350                           
  1351                           ; 4 bytes @ 0x52
  1352  000053                     	ds	4
  1353  000057                     kpOptions1@tecla:
  1354                           	callstack 0
  1355                           
  1356                           ; 2 bytes @ 0x56
  1357  000057                     	ds	2
  1358  000059                     
  1359                           ; 1 bytes @ 0x58
  1360 ;;
  1361 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1362 ;;
  1363 ;; *************** function _main *****************
  1364 ;; Defined at:
  1365 ;;		line 12 in file "main.c"
  1366 ;; Parameters:    Size  Location     Type
  1367 ;;		None
  1368 ;; Auto vars:     Size  Location     Type
  1369 ;;  msg1           64   96[BANK1 ] unsigned char [64]
  1370 ;;  msg            32  160[BANK1 ] unsigned char [32]
  1371 ;; Return value:  Size  Location     Type
  1372 ;;                  1    wreg      void 
  1373 ;; Registers used:
  1374 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1375 ;; Tracked objects:
  1376 ;;		On entry : 0/0
  1377 ;;		On exit  : 0/0
  1378 ;;		Unchanged: 0/0
  1379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1380 ;;      Params:         0       0       0       0       0       0       0
  1381 ;;      Locals:         0       0      96       0       0       0       0
  1382 ;;      Temps:          0       0       0       0       0       0       0
  1383 ;;      Totals:         0       0      96       0       0       0       0
  1384 ;;Total ram usage:       96 bytes
  1385 ;; Hardware stack levels required when called: 8
  1386 ;; This function calls:
  1387 ;;		_delay
  1388 ;;		_initDishWasher
  1389 ;;		_kpInit
  1390 ;;		_kpOptions1
  1391 ;;		_lcdInit
  1392 ;;		_printf
  1393 ;;		_pwmInit
  1394 ;;		_ssdInit
  1395 ;; This function is called by:
  1396 ;;		Startup code after reset
  1397 ;; This function uses a non-reentrant model
  1398 ;;
  1399                           
  1400                           	psect	text0
  1401  00356C                     __ptext0:
  1402                           	callstack 0
  1403  00356C                     _main:
  1404                           	callstack 23
  1405  00356C                     
  1406                           ;main.c: 13:     char msg[32] = "Inicializando...Lava-loucas";
  1407  00356C  EE23  F070         	lfsr	2,main@F2391
  1408  003570  EE11  F0A0         	lfsr	1,main@msg
  1409  003574  0E1F               	movlw	31
  1410  003576                     u4141:
  1411  003576  CFDB FFE3          	movff	plusw2,plusw1
  1412  00357A  06E8               	decf	wreg,f,c
  1413  00357C  E2FC               	bc	u4141
  1414                           
  1415                           ;main.c: 14:     char msg1[64] = "Pre lavagem?    (*)Aqcua-Spray  (#)Pular etapa";
  1416  00357E  EE24  F000         	lfsr	2,main@F2393
  1417  003582  EE11  F060         	lfsr	1,main@msg1
  1418  003586  0E3F               	movlw	63
  1419  003588                     u4151:
  1420  003588  CFDB FFE3          	movff	plusw2,plusw1
  1421  00358C  06E8               	decf	wreg,f,c
  1422  00358E  E2FC               	bc	u4151
  1423  003590                     
  1424                           ;main.c: 16:     TRISB = 0x03;
  1425  003590  0E03               	movlw	3
  1426  003592  6E93               	movwf	147,c	;volatile
  1427  003594                     
  1428                           ;main.c: 17:     TRISC = 0x00;
  1429  003594  0E00               	movlw	0
  1430  003596  6E94               	movwf	148,c	;volatile
  1431  003598                     
  1432                           ;main.c: 18:     TRISD = 0x00;
  1433  003598  0E00               	movlw	0
  1434  00359A  6E95               	movwf	149,c	;volatile
  1435  00359C                     
  1436                           ;main.c: 19:     TRISE = 0x00;
  1437  00359C  0E00               	movlw	0
  1438  00359E  6E96               	movwf	150,c	;volatile
  1439  0035A0                     
  1440                           ;main.c: 21:     initDishWasher();
  1441  0035A0  EC6D  F01A         	call	_initDishWasher	;wreg free
  1442  0035A4                     
  1443                           ;main.c: 23:     lcdInit();
  1444  0035A4  EC7C  F01B         	call	_lcdInit	;wreg free
  1445  0035A8                     
  1446                           ;main.c: 24:     kpInit();
  1447  0035A8  EC0D  F01E         	call	_kpInit	;wreg free
  1448  0035AC                     
  1449                           ;main.c: 25:     ssdInit();
  1450  0035AC  ECF0  F01C         	call	_ssdInit	;wreg free
  1451  0035B0                     
  1452                           ;main.c: 26:     pwmInit();
  1453  0035B0  ECE0  F01D         	call	_pwmInit	;wreg free
  1454  0035B4                     
  1455                           ;main.c: 28:     printf(msg, 32);
  1456  0035B4  0EA0               	movlw	low main@msg
  1457  0035B6  6E09               	movwf	printf@msg^0,c
  1458  0035B8  0E01               	movlw	high main@msg
  1459  0035BA  6E0A               	movwf	(printf@msg+1)^0,c
  1460  0035BC  0E00               	movlw	0
  1461  0035BE  6E0C               	movwf	(printf@j+1)^0,c
  1462  0035C0  0E20               	movlw	32
  1463  0035C2  6E0B               	movwf	printf@j^0,c
  1464  0035C4  ECBF  F019         	call	_printf	;wreg free
  1465  0035C8                     
  1466                           ;main.c: 29:     delay(2000);
  1467  0035C8  0E07               	movlw	7
  1468  0035CA  6E02               	movwf	(delay@temp+1)^0,c
  1469  0035CC  0ED0               	movlw	208
  1470  0035CE  6E01               	movwf	delay@temp^0,c
  1471  0035D0  EC92  F01C         	call	_delay	;wreg free
  1472  0035D4                     
  1473                           ;main.c: 31:     printf(msg1, 64);
  1474  0035D4  0E60               	movlw	low main@msg1
  1475  0035D6  6E09               	movwf	printf@msg^0,c
  1476  0035D8  0E01               	movlw	high main@msg1
  1477  0035DA  6E0A               	movwf	(printf@msg+1)^0,c
  1478  0035DC  0E00               	movlw	0
  1479  0035DE  6E0C               	movwf	(printf@j+1)^0,c
  1480  0035E0  0E40               	movlw	64
  1481  0035E2  6E0B               	movwf	printf@j^0,c
  1482  0035E4  ECBF  F019         	call	_printf	;wreg free
  1483  0035E8                     
  1484                           ;main.c: 32:     delay(2000);
  1485  0035E8  0E07               	movlw	7
  1486  0035EA  6E02               	movwf	(delay@temp+1)^0,c
  1487  0035EC  0ED0               	movlw	208
  1488  0035EE  6E01               	movwf	delay@temp^0,c
  1489  0035F0  EC92  F01C         	call	_delay	;wreg free
  1490  0035F4                     
  1491                           ;main.c: 34:     kpOptions1();
  1492  0035F4  ECFE  F01A         	call	_kpOptions1	;wreg free
  1493  0035F8  EF00  F000         	goto	start
  1494  0035FC                     __end_of_main:
  1495                           	callstack 0
  1496                           
  1497 ;; *************** function _ssdInit *****************
  1498 ;; Defined at:
  1499 ;;		line 102 in file "ssd.c"
  1500 ;; Parameters:    Size  Location     Type
  1501 ;;		None
  1502 ;; Auto vars:     Size  Location     Type
  1503 ;;		None
  1504 ;; Return value:  Size  Location     Type
  1505 ;;                  1    wreg      void 
  1506 ;; Registers used:
  1507 ;;		wreg, status,2, status,0, cstack
  1508 ;; Tracked objects:
  1509 ;;		On entry : 0/0
  1510 ;;		On exit  : 0/0
  1511 ;;		Unchanged: 0/0
  1512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1513 ;;      Params:         0       0       0       0       0       0       0
  1514 ;;      Locals:         0       0       0       0       0       0       0
  1515 ;;      Temps:          0       0       0       0       0       0       0
  1516 ;;      Totals:         0       0       0       0       0       0       0
  1517 ;;Total ram usage:        0 bytes
  1518 ;; Hardware stack levels used: 1
  1519 ;; Hardware stack levels required when called: 1
  1520 ;; This function calls:
  1521 ;;		_pinMode
  1522 ;; This function is called by:
  1523 ;;		_main
  1524 ;; This function uses a non-reentrant model
  1525 ;;
  1526                           
  1527                           	psect	text1
  1528  0039E0                     __ptext1:
  1529                           	callstack 0
  1530  0039E0                     _ssdInit:
  1531                           	callstack 29
  1532  0039E0                     
  1533                           ;ssd.c: 104:     pinMode(PIN_A2, 0);
  1534  0039E0  0E00               	movlw	0
  1535  0039E2  6E02               	movwf	(pinMode@pin+1)^0,c
  1536  0039E4  0E02               	movlw	2
  1537  0039E6  6E01               	movwf	pinMode@pin^0,c
  1538  0039E8  0E00               	movlw	0
  1539  0039EA  6E04               	movwf	(pinMode@type+1)^0,c
  1540  0039EC  0E00               	movlw	0
  1541  0039EE  6E03               	movwf	pinMode@type^0,c
  1542  0039F0  EC58  F012         	call	_pinMode	;wreg free
  1543                           
  1544                           ;ssd.c: 105:     pinMode(PIN_A3, 0);
  1545  0039F4  0E00               	movlw	0
  1546  0039F6  6E02               	movwf	(pinMode@pin+1)^0,c
  1547  0039F8  0E03               	movlw	3
  1548  0039FA  6E01               	movwf	pinMode@pin^0,c
  1549  0039FC  0E00               	movlw	0
  1550  0039FE  6E04               	movwf	(pinMode@type+1)^0,c
  1551  003A00  0E00               	movlw	0
  1552  003A02  6E03               	movwf	pinMode@type^0,c
  1553  003A04  EC58  F012         	call	_pinMode	;wreg free
  1554                           
  1555                           ;ssd.c: 106:     pinMode(PIN_A4, 0);
  1556  003A08  0E00               	movlw	0
  1557  003A0A  6E02               	movwf	(pinMode@pin+1)^0,c
  1558  003A0C  0E04               	movlw	4
  1559  003A0E  6E01               	movwf	pinMode@pin^0,c
  1560  003A10  0E00               	movlw	0
  1561  003A12  6E04               	movwf	(pinMode@type+1)^0,c
  1562  003A14  0E00               	movlw	0
  1563  003A16  6E03               	movwf	pinMode@type^0,c
  1564  003A18  EC58  F012         	call	_pinMode	;wreg free
  1565                           
  1566                           ;ssd.c: 107:     pinMode(PIN_A5, 0);
  1567  003A1C  0E00               	movlw	0
  1568  003A1E  6E02               	movwf	(pinMode@pin+1)^0,c
  1569  003A20  0E05               	movlw	5
  1570  003A22  6E01               	movwf	pinMode@pin^0,c
  1571  003A24  0E00               	movlw	0
  1572  003A26  6E04               	movwf	(pinMode@type+1)^0,c
  1573  003A28  0E00               	movlw	0
  1574  003A2A  6E03               	movwf	pinMode@type^0,c
  1575  003A2C  EC58  F012         	call	_pinMode	;wreg free
  1576  003A30                     
  1577                           ;ssd.c: 110:     TRISD = 0x00;
  1578  003A30  0E00               	movlw	0
  1579  003A32  6E95               	movwf	149,c	;volatile
  1580  003A34  0012               	return		;funcret
  1581  003A36                     __end_of_ssdInit:
  1582                           	callstack 0
  1583                           
  1584 ;; *************** function _pwmInit *****************
  1585 ;; Defined at:
  1586 ;;		line 59 in file "pwm.c"
  1587 ;; Parameters:    Size  Location     Type
  1588 ;;		None
  1589 ;; Auto vars:     Size  Location     Type
  1590 ;;		None
  1591 ;; Return value:  Size  Location     Type
  1592 ;;                  1    wreg      void 
  1593 ;; Registers used:
  1594 ;;		wreg, status,2, status,0, cstack
  1595 ;; Tracked objects:
  1596 ;;		On entry : 0/0
  1597 ;;		On exit  : 0/0
  1598 ;;		Unchanged: 0/0
  1599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1600 ;;      Params:         0       0       0       0       0       0       0
  1601 ;;      Locals:         0       0       0       0       0       0       0
  1602 ;;      Temps:          0       0       0       0       0       0       0
  1603 ;;      Totals:         0       0       0       0       0       0       0
  1604 ;;Total ram usage:        0 bytes
  1605 ;; Hardware stack levels used: 1
  1606 ;; Hardware stack levels required when called: 2
  1607 ;; This function calls:
  1608 ;;		_pwmFrequency
  1609 ;; This function is called by:
  1610 ;;		_main
  1611 ;; This function uses a non-reentrant model
  1612 ;;
  1613                           
  1614                           	psect	text2
  1615  003BC0                     __ptext2:
  1616                           	callstack 0
  1617  003BC0                     _pwmInit:
  1618                           	callstack 28
  1619  003BC0                     
  1620                           ;pwm.c: 60:  ((TRISC) &= ~(1<<(1)));
  1621  003BC0  9294               	bcf	148,1,c	;volatile
  1622                           
  1623                           ;pwm.c: 61:     ((TRISC) &= ~(1<<(2)));
  1624  003BC2  9494               	bcf	148,2,c	;volatile
  1625  003BC4                     
  1626                           ;pwm.c: 63:  T2CON |= 0b00000011;
  1627  003BC4  0E03               	movlw	3
  1628  003BC6  12CA               	iorwf	202,f,c	;volatile
  1629  003BC8                     
  1630                           ;pwm.c: 64:  ((T2CON) |= (1<<(2)));
  1631  003BC8  84CA               	bsf	202,2,c	;volatile
  1632  003BCA                     
  1633                           ;pwm.c: 66:  CCP1CON = 0b00001100;
  1634  003BCA  0E0C               	movlw	12
  1635  003BCC  6EBD               	movwf	189,c	;volatile
  1636  003BCE                     
  1637                           ;pwm.c: 68:     pwmFrequency(100);
  1638  003BCE  0E00               	movlw	0
  1639  003BD0  6E10               	movwf	(pwmFrequency@freq+1)^0,c
  1640  003BD2  0E64               	movlw	100
  1641  003BD4  6E0F               	movwf	pwmFrequency@freq^0,c
  1642  003BD6  ECCD  F01D         	call	_pwmFrequency	;wreg free
  1643  003BDA  0012               	return		;funcret
  1644  003BDC                     __end_of_pwmInit:
  1645                           	callstack 0
  1646                           
  1647 ;; *************** function _lcdInit *****************
  1648 ;; Defined at:
  1649 ;;		line 100 in file "lcd.c"
  1650 ;; Parameters:    Size  Location     Type
  1651 ;;		None
  1652 ;; Auto vars:     Size  Location     Type
  1653 ;;		None
  1654 ;; Return value:  Size  Location     Type
  1655 ;;                  1    wreg      void 
  1656 ;; Registers used:
  1657 ;;		wreg, status,2, status,0, cstack
  1658 ;; Tracked objects:
  1659 ;;		On entry : 0/0
  1660 ;;		On exit  : 0/0
  1661 ;;		Unchanged: 0/0
  1662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1663 ;;      Params:         0       0       0       0       0       0       0
  1664 ;;      Locals:         0       0       0       0       0       0       0
  1665 ;;      Temps:          0       0       0       0       0       0       0
  1666 ;;      Totals:         0       0       0       0       0       0       0
  1667 ;;Total ram usage:        0 bytes
  1668 ;; Hardware stack levels used: 1
  1669 ;; Hardware stack levels required when called: 3
  1670 ;; This function calls:
  1671 ;;		_Delay2ms
  1672 ;;		_lcdCommand
  1673 ;;		_pinMode
  1674 ;; This function is called by:
  1675 ;;		_main
  1676 ;; This function uses a non-reentrant model
  1677 ;;
  1678                           
  1679                           	psect	text3
  1680  0036F8                     __ptext3:
  1681                           	callstack 0
  1682  0036F8                     _lcdInit:
  1683                           	callstack 27
  1684  0036F8                     
  1685                           ;lcd.c: 102:     pinMode(PIN_E2, 0);
  1686  0036F8  0E00               	movlw	0
  1687  0036FA  6E02               	movwf	(pinMode@pin+1)^0,c
  1688  0036FC  0E22               	movlw	34
  1689  0036FE  6E01               	movwf	pinMode@pin^0,c
  1690  003700  0E00               	movlw	0
  1691  003702  6E04               	movwf	(pinMode@type+1)^0,c
  1692  003704  0E00               	movlw	0
  1693  003706  6E03               	movwf	pinMode@type^0,c
  1694  003708  EC58  F012         	call	_pinMode	;wreg free
  1695                           
  1696                           ;lcd.c: 103:     pinMode(PIN_E1, 0);
  1697  00370C  0E00               	movlw	0
  1698  00370E  6E02               	movwf	(pinMode@pin+1)^0,c
  1699  003710  0E21               	movlw	33
  1700  003712  6E01               	movwf	pinMode@pin^0,c
  1701  003714  0E00               	movlw	0
  1702  003716  6E04               	movwf	(pinMode@type+1)^0,c
  1703  003718  0E00               	movlw	0
  1704  00371A  6E03               	movwf	pinMode@type^0,c
  1705  00371C  EC58  F012         	call	_pinMode	;wreg free
  1706  003720                     
  1707                           ;lcd.c: 104:  TRISD = 0x00;
  1708  003720  0E00               	movlw	0
  1709  003722  6E95               	movwf	149,c	;volatile
  1710  003724                     
  1711                           ;lcd.c: 107:  Delay2ms(); Delay2ms(); Delay2ms(); Delay2ms(); Delay2ms();
  1712  003724  ECEE  F01D         	call	_Delay2ms	;wreg free
  1713  003728  ECEE  F01D         	call	_Delay2ms	;wreg free
  1714  00372C  ECEE  F01D         	call	_Delay2ms	;wreg free
  1715  003730  ECEE  F01D         	call	_Delay2ms	;wreg free
  1716  003734  ECEE  F01D         	call	_Delay2ms	;wreg free
  1717  003738                     
  1718                           ;lcd.c: 109:     lcdCommand(0x38);
  1719  003738  0E38               	movlw	56
  1720  00373A  EC3D  F01B         	call	_lcdCommand
  1721  00373E                     
  1722                           ;lcd.c: 110:     Delay2ms(); Delay2ms();
  1723  00373E  ECEE  F01D         	call	_Delay2ms	;wreg free
  1724  003742  ECEE  F01D         	call	_Delay2ms	;wreg free
  1725  003746                     
  1726                           ;lcd.c: 111:     lcdCommand(0x38);
  1727  003746  0E38               	movlw	56
  1728  003748  EC3D  F01B         	call	_lcdCommand
  1729  00374C                     
  1730                           ;lcd.c: 112:     Delay2ms();
  1731  00374C  ECEE  F01D         	call	_Delay2ms	;wreg free
  1732  003750                     
  1733                           ;lcd.c: 113:     lcdCommand(0x38);
  1734  003750  0E38               	movlw	56
  1735  003752  EC3D  F01B         	call	_lcdCommand
  1736  003756                     
  1737                           ;lcd.c: 115:     lcdCommand(0x38);
  1738  003756  0E38               	movlw	56
  1739  003758  EC3D  F01B         	call	_lcdCommand
  1740  00375C                     
  1741                           ;lcd.c: 116:     lcdCommand(0x06);
  1742  00375C  0E06               	movlw	6
  1743  00375E  EC3D  F01B         	call	_lcdCommand
  1744  003762                     
  1745                           ;lcd.c: 119:     lcdCommand(0x0C);
  1746  003762  0E0C               	movlw	12
  1747  003764  EC3D  F01B         	call	_lcdCommand
  1748  003768                     
  1749                           ;lcd.c: 120:     lcdCommand(0x01);
  1750  003768  0E01               	movlw	1
  1751  00376A  EC3D  F01B         	call	_lcdCommand
  1752  00376E  0012               	return		;funcret
  1753  003770                     __end_of_lcdInit:
  1754                           	callstack 0
  1755                           
  1756 ;; *************** function _pinMode *****************
  1757 ;; Defined at:
  1758 ;;		line 54 in file "io.c"
  1759 ;; Parameters:    Size  Location     Type
  1760 ;;  pin             2    0[COMRAM] int 
  1761 ;;  type            2    2[COMRAM] int 
  1762 ;; Auto vars:     Size  Location     Type
  1763 ;;		None
  1764 ;; Return value:  Size  Location     Type
  1765 ;;                  1    wreg      void 
  1766 ;; Registers used:
  1767 ;;		wreg, status,2, status,0
  1768 ;; Tracked objects:
  1769 ;;		On entry : 0/0
  1770 ;;		On exit  : 0/0
  1771 ;;		Unchanged: 0/0
  1772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1773 ;;      Params:         4       0       0       0       0       0       0
  1774 ;;      Locals:         0       0       0       0       0       0       0
  1775 ;;      Temps:          2       0       0       0       0       0       0
  1776 ;;      Totals:         6       0       0       0       0       0       0
  1777 ;;Total ram usage:        6 bytes
  1778 ;; Hardware stack levels used: 1
  1779 ;; This function calls:
  1780 ;;		Nothing
  1781 ;; This function is called by:
  1782 ;;		_lcdInit
  1783 ;;		_ssdInit
  1784 ;; This function uses a non-reentrant model
  1785 ;;
  1786                           
  1787                           	psect	text4
  1788  0024B0                     __ptext4:
  1789                           	callstack 0
  1790  0024B0                     _pinMode:
  1791                           	callstack 29
  1792  0024B0                     
  1793                           ;io.c: 56:     if(pin <8){
  1794  0024B0  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  1795  0024B2  EF66  F012         	goto	u3870
  1796  0024B6  5002               	movf	(pinMode@pin+1)^0,w,c
  1797  0024B8  E107               	bnz	u3871
  1798  0024BA  0E08               	movlw	8
  1799  0024BC  5C01               	subwf	pinMode@pin^0,w,c
  1800  0024BE  B0D8               	btfsc	status,0,c
  1801  0024C0  EF64  F012         	goto	u3871
  1802  0024C4  EF66  F012         	goto	u3870
  1803  0024C8                     u3871:
  1804  0024C8  EF90  F012         	goto	l3847
  1805  0024CC                     u3870:
  1806  0024CC                     
  1807                           ;io.c: 57:         if (type){ ((TRISA) |= (1<<(pin)));}
  1808  0024CC  5003               	movf	pinMode@type^0,w,c
  1809  0024CE  1004               	iorwf	(pinMode@type+1)^0,w,c
  1810  0024D0  B4D8               	btfsc	status,2,c
  1811  0024D2  EF6D  F012         	goto	u3881
  1812  0024D6  EF6F  F012         	goto	u3880
  1813  0024DA                     u3881:
  1814  0024DA  EF7F  F012         	goto	l3845
  1815  0024DE                     u3880:
  1816  0024DE  C001  F005         	movff	pinMode@pin,??_pinMode
  1817  0024E2  0E01               	movlw	1
  1818  0024E4  6E06               	movwf	(??_pinMode+1)^0,c
  1819  0024E6  2A05               	incf	??_pinMode^0,f,c
  1820  0024E8  EF78  F012         	goto	u3894
  1821  0024EC                     u3895:
  1822  0024EC  90D8               	bcf	status,0,c
  1823  0024EE  3606               	rlcf	(??_pinMode+1)^0,f,c
  1824  0024F0                     u3894:
  1825  0024F0  2E05               	decfsz	??_pinMode^0,f,c
  1826  0024F2  EF76  F012         	goto	u3895
  1827  0024F6  5006               	movf	(??_pinMode+1)^0,w,c
  1828  0024F8  1292               	iorwf	146,f,c	;volatile
  1829  0024FA  EF7E  F013         	goto	l209
  1830  0024FE                     l3845:
  1831  0024FE  C001  F005         	movff	pinMode@pin,??_pinMode
  1832  002502  0E01               	movlw	1
  1833  002504  6E06               	movwf	(??_pinMode+1)^0,c
  1834  002506  2A05               	incf	??_pinMode^0,f,c
  1835  002508  EF88  F012         	goto	u3904
  1836  00250C                     u3905:
  1837  00250C  90D8               	bcf	status,0,c
  1838  00250E  3606               	rlcf	(??_pinMode+1)^0,f,c
  1839  002510                     u3904:
  1840  002510  2E05               	decfsz	??_pinMode^0,f,c
  1841  002512  EF86  F012         	goto	u3905
  1842  002516  5006               	movf	(??_pinMode+1)^0,w,c
  1843  002518  0AFF               	xorlw	255
  1844  00251A  1692               	andwf	146,f,c	;volatile
  1845  00251C  EF7E  F013         	goto	l209
  1846  002520                     l3847:
  1847  002520  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  1848  002522  EF9E  F012         	goto	u3910
  1849  002526  5002               	movf	(pinMode@pin+1)^0,w,c
  1850  002528  E107               	bnz	u3911
  1851  00252A  0E10               	movlw	16
  1852  00252C  5C01               	subwf	pinMode@pin^0,w,c
  1853  00252E  B0D8               	btfsc	status,0,c
  1854  002530  EF9C  F012         	goto	u3911
  1855  002534  EF9E  F012         	goto	u3910
  1856  002538                     u3911:
  1857  002538  EFCC  F012         	goto	l3855
  1858  00253C                     u3910:
  1859  00253C                     
  1860                           ;io.c: 60:         if (type){ ((TRISB) |= (1<<(pin-8)));}
  1861  00253C  5003               	movf	pinMode@type^0,w,c
  1862  00253E  1004               	iorwf	(pinMode@type+1)^0,w,c
  1863  002540  B4D8               	btfsc	status,2,c
  1864  002542  EFA5  F012         	goto	u3921
  1865  002546  EFA7  F012         	goto	u3920
  1866  00254A                     u3921:
  1867  00254A  EFB9  F012         	goto	l3853
  1868  00254E                     u3920:
  1869  00254E  C001  F005         	movff	pinMode@pin,??_pinMode
  1870  002552  0EF8               	movlw	-8
  1871  002554  2605               	addwf	??_pinMode^0,f,c
  1872  002556  0E01               	movlw	1
  1873  002558  6E06               	movwf	(??_pinMode+1)^0,c
  1874  00255A  2A05               	incf	??_pinMode^0,f,c
  1875  00255C  EFB2  F012         	goto	u3934
  1876  002560                     u3935:
  1877  002560  90D8               	bcf	status,0,c
  1878  002562  3606               	rlcf	(??_pinMode+1)^0,f,c
  1879  002564                     u3934:
  1880  002564  2E05               	decfsz	??_pinMode^0,f,c
  1881  002566  EFB0  F012         	goto	u3935
  1882  00256A  5006               	movf	(??_pinMode+1)^0,w,c
  1883  00256C  1293               	iorwf	147,f,c	;volatile
  1884  00256E  EF7E  F013         	goto	l209
  1885  002572                     l3853:
  1886  002572  C001  F005         	movff	pinMode@pin,??_pinMode
  1887  002576  0EF8               	movlw	-8
  1888  002578  2605               	addwf	??_pinMode^0,f,c
  1889  00257A  0E01               	movlw	1
  1890  00257C  6E06               	movwf	(??_pinMode+1)^0,c
  1891  00257E  2A05               	incf	??_pinMode^0,f,c
  1892  002580  EFC4  F012         	goto	u3944
  1893  002584                     u3945:
  1894  002584  90D8               	bcf	status,0,c
  1895  002586  3606               	rlcf	(??_pinMode+1)^0,f,c
  1896  002588                     u3944:
  1897  002588  2E05               	decfsz	??_pinMode^0,f,c
  1898  00258A  EFC2  F012         	goto	u3945
  1899  00258E  5006               	movf	(??_pinMode+1)^0,w,c
  1900  002590  0AFF               	xorlw	255
  1901  002592  1693               	andwf	147,f,c	;volatile
  1902  002594  EF7E  F013         	goto	l209
  1903  002598                     l3855:
  1904  002598  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  1905  00259A  EFDA  F012         	goto	u3950
  1906  00259E  5002               	movf	(pinMode@pin+1)^0,w,c
  1907  0025A0  E107               	bnz	u3951
  1908  0025A2  0E18               	movlw	24
  1909  0025A4  5C01               	subwf	pinMode@pin^0,w,c
  1910  0025A6  B0D8               	btfsc	status,0,c
  1911  0025A8  EFD8  F012         	goto	u3951
  1912  0025AC  EFDA  F012         	goto	u3950
  1913  0025B0                     u3951:
  1914  0025B0  EF08  F013         	goto	l3863
  1915  0025B4                     u3950:
  1916  0025B4                     
  1917                           ;io.c: 63:         if (type){ ((TRISC) |= (1<<(pin-16)));}
  1918  0025B4  5003               	movf	pinMode@type^0,w,c
  1919  0025B6  1004               	iorwf	(pinMode@type+1)^0,w,c
  1920  0025B8  B4D8               	btfsc	status,2,c
  1921  0025BA  EFE1  F012         	goto	u3961
  1922  0025BE  EFE3  F012         	goto	u3960
  1923  0025C2                     u3961:
  1924  0025C2  EFF5  F012         	goto	l3861
  1925  0025C6                     u3960:
  1926  0025C6  C001  F005         	movff	pinMode@pin,??_pinMode
  1927  0025CA  0EF0               	movlw	-16
  1928  0025CC  2605               	addwf	??_pinMode^0,f,c
  1929  0025CE  0E01               	movlw	1
  1930  0025D0  6E06               	movwf	(??_pinMode+1)^0,c
  1931  0025D2  2A05               	incf	??_pinMode^0,f,c
  1932  0025D4  EFEE  F012         	goto	u3974
  1933  0025D8                     u3975:
  1934  0025D8  90D8               	bcf	status,0,c
  1935  0025DA  3606               	rlcf	(??_pinMode+1)^0,f,c
  1936  0025DC                     u3974:
  1937  0025DC  2E05               	decfsz	??_pinMode^0,f,c
  1938  0025DE  EFEC  F012         	goto	u3975
  1939  0025E2  5006               	movf	(??_pinMode+1)^0,w,c
  1940  0025E4  1294               	iorwf	148,f,c	;volatile
  1941  0025E6  EF7E  F013         	goto	l209
  1942  0025EA                     l3861:
  1943  0025EA  C001  F005         	movff	pinMode@pin,??_pinMode
  1944  0025EE  0EF0               	movlw	-16
  1945  0025F0  2605               	addwf	??_pinMode^0,f,c
  1946  0025F2  0E01               	movlw	1
  1947  0025F4  6E06               	movwf	(??_pinMode+1)^0,c
  1948  0025F6  2A05               	incf	??_pinMode^0,f,c
  1949  0025F8  EF00  F013         	goto	u3984
  1950  0025FC                     u3985:
  1951  0025FC  90D8               	bcf	status,0,c
  1952  0025FE  3606               	rlcf	(??_pinMode+1)^0,f,c
  1953  002600                     u3984:
  1954  002600  2E05               	decfsz	??_pinMode^0,f,c
  1955  002602  EFFE  F012         	goto	u3985
  1956  002606  5006               	movf	(??_pinMode+1)^0,w,c
  1957  002608  0AFF               	xorlw	255
  1958  00260A  1694               	andwf	148,f,c	;volatile
  1959  00260C  EF7E  F013         	goto	l209
  1960  002610                     l3863:
  1961  002610  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  1962  002612  EF16  F013         	goto	u3990
  1963  002616  5002               	movf	(pinMode@pin+1)^0,w,c
  1964  002618  E107               	bnz	u3991
  1965  00261A  0E20               	movlw	32
  1966  00261C  5C01               	subwf	pinMode@pin^0,w,c
  1967  00261E  B0D8               	btfsc	status,0,c
  1968  002620  EF14  F013         	goto	u3991
  1969  002624  EF16  F013         	goto	u3990
  1970  002628                     u3991:
  1971  002628  EF44  F013         	goto	l3871
  1972  00262C                     u3990:
  1973  00262C                     
  1974                           ;io.c: 66:         if (type){ ((TRISD) |= (1<<(pin-24)));}
  1975  00262C  5003               	movf	pinMode@type^0,w,c
  1976  00262E  1004               	iorwf	(pinMode@type+1)^0,w,c
  1977  002630  B4D8               	btfsc	status,2,c
  1978  002632  EF1D  F013         	goto	u4001
  1979  002636  EF1F  F013         	goto	u4000
  1980  00263A                     u4001:
  1981  00263A  EF31  F013         	goto	l3869
  1982  00263E                     u4000:
  1983  00263E  C001  F005         	movff	pinMode@pin,??_pinMode
  1984  002642  0EE8               	movlw	-24
  1985  002644  2605               	addwf	??_pinMode^0,f,c
  1986  002646  0E01               	movlw	1
  1987  002648  6E06               	movwf	(??_pinMode+1)^0,c
  1988  00264A  2A05               	incf	??_pinMode^0,f,c
  1989  00264C  EF2A  F013         	goto	u4014
  1990  002650                     u4015:
  1991  002650  90D8               	bcf	status,0,c
  1992  002652  3606               	rlcf	(??_pinMode+1)^0,f,c
  1993  002654                     u4014:
  1994  002654  2E05               	decfsz	??_pinMode^0,f,c
  1995  002656  EF28  F013         	goto	u4015
  1996  00265A  5006               	movf	(??_pinMode+1)^0,w,c
  1997  00265C  1295               	iorwf	149,f,c	;volatile
  1998  00265E  EF7E  F013         	goto	l209
  1999  002662                     l3869:
  2000  002662  C001  F005         	movff	pinMode@pin,??_pinMode
  2001  002666  0EE8               	movlw	-24
  2002  002668  2605               	addwf	??_pinMode^0,f,c
  2003  00266A  0E01               	movlw	1
  2004  00266C  6E06               	movwf	(??_pinMode+1)^0,c
  2005  00266E  2A05               	incf	??_pinMode^0,f,c
  2006  002670  EF3C  F013         	goto	u4024
  2007  002674                     u4025:
  2008  002674  90D8               	bcf	status,0,c
  2009  002676  3606               	rlcf	(??_pinMode+1)^0,f,c
  2010  002678                     u4024:
  2011  002678  2E05               	decfsz	??_pinMode^0,f,c
  2012  00267A  EF3A  F013         	goto	u4025
  2013  00267E  5006               	movf	(??_pinMode+1)^0,w,c
  2014  002680  0AFF               	xorlw	255
  2015  002682  1695               	andwf	149,f,c	;volatile
  2016  002684  EF7E  F013         	goto	l209
  2017  002688                     l3871:
  2018  002688  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  2019  00268A  EF52  F013         	goto	u4030
  2020  00268E  5002               	movf	(pinMode@pin+1)^0,w,c
  2021  002690  E107               	bnz	u4031
  2022  002692  0E28               	movlw	40
  2023  002694  5C01               	subwf	pinMode@pin^0,w,c
  2024  002696  B0D8               	btfsc	status,0,c
  2025  002698  EF50  F013         	goto	u4031
  2026  00269C  EF52  F013         	goto	u4030
  2027  0026A0                     u4031:
  2028  0026A0  EF7E  F013         	goto	l209
  2029  0026A4                     u4030:
  2030  0026A4                     
  2031                           ;io.c: 69:         if (type){ ((TRISE) |= (1<<(pin-32)));}
  2032  0026A4  5003               	movf	pinMode@type^0,w,c
  2033  0026A6  1004               	iorwf	(pinMode@type+1)^0,w,c
  2034  0026A8  B4D8               	btfsc	status,2,c
  2035  0026AA  EF59  F013         	goto	u4041
  2036  0026AE  EF5B  F013         	goto	u4040
  2037  0026B2                     u4041:
  2038  0026B2  EF6D  F013         	goto	l3877
  2039  0026B6                     u4040:
  2040  0026B6  C001  F005         	movff	pinMode@pin,??_pinMode
  2041  0026BA  0EE0               	movlw	-32
  2042  0026BC  2605               	addwf	??_pinMode^0,f,c
  2043  0026BE  0E01               	movlw	1
  2044  0026C0  6E06               	movwf	(??_pinMode+1)^0,c
  2045  0026C2  2A05               	incf	??_pinMode^0,f,c
  2046  0026C4  EF66  F013         	goto	u4054
  2047  0026C8                     u4055:
  2048  0026C8  90D8               	bcf	status,0,c
  2049  0026CA  3606               	rlcf	(??_pinMode+1)^0,f,c
  2050  0026CC                     u4054:
  2051  0026CC  2E05               	decfsz	??_pinMode^0,f,c
  2052  0026CE  EF64  F013         	goto	u4055
  2053  0026D2  5006               	movf	(??_pinMode+1)^0,w,c
  2054  0026D4  1296               	iorwf	150,f,c	;volatile
  2055  0026D6  EF7E  F013         	goto	l209
  2056  0026DA                     l3877:
  2057  0026DA  C001  F005         	movff	pinMode@pin,??_pinMode
  2058  0026DE  0EE0               	movlw	-32
  2059  0026E0  2605               	addwf	??_pinMode^0,f,c
  2060  0026E2  0E01               	movlw	1
  2061  0026E4  6E06               	movwf	(??_pinMode+1)^0,c
  2062  0026E6  2A05               	incf	??_pinMode^0,f,c
  2063  0026E8  EF78  F013         	goto	u4064
  2064  0026EC                     u4065:
  2065  0026EC  90D8               	bcf	status,0,c
  2066  0026EE  3606               	rlcf	(??_pinMode+1)^0,f,c
  2067  0026F0                     u4064:
  2068  0026F0  2E05               	decfsz	??_pinMode^0,f,c
  2069  0026F2  EF76  F013         	goto	u4065
  2070  0026F6  5006               	movf	(??_pinMode+1)^0,w,c
  2071  0026F8  0AFF               	xorlw	255
  2072  0026FA  1696               	andwf	150,f,c	;volatile
  2073  0026FC                     l209:
  2074  0026FC  0012               	return		;funcret
  2075  0026FE                     __end_of_pinMode:
  2076                           	callstack 0
  2077                           
  2078 ;; *************** function _kpOptions1 *****************
  2079 ;; Defined at:
  2080 ;;		line 101 in file "keypad.c"
  2081 ;; Parameters:    Size  Location     Type
  2082 ;;		None
  2083 ;; Auto vars:     Size  Location     Type
  2084 ;;  tecla           2   86[COMRAM] unsigned int 
  2085 ;; Return value:  Size  Location     Type
  2086 ;;                  1    wreg      void 
  2087 ;; Registers used:
  2088 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2089 ;; Tracked objects:
  2090 ;;		On entry : 0/0
  2091 ;;		On exit  : 0/0
  2092 ;;		Unchanged: 0/0
  2093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2094 ;;      Params:         0       0       0       0       0       0       0
  2095 ;;      Locals:         2       0       0       0       0       0       0
  2096 ;;      Temps:          0       0       0       0       0       0       0
  2097 ;;      Totals:         2       0       0       0       0       0       0
  2098 ;;Total ram usage:        2 bytes
  2099 ;; Hardware stack levels used: 1
  2100 ;; Hardware stack levels required when called: 7
  2101 ;; This function calls:
  2102 ;;		_kpDebounce
  2103 ;;		_kpOptions2
  2104 ;;		_kpRead
  2105 ;;		_lcdCommand
  2106 ;;		_preWash
  2107 ;; This function is called by:
  2108 ;;		_main
  2109 ;; This function uses a non-reentrant model
  2110 ;;
  2111                           
  2112                           	psect	text5
  2113  0035FC                     __ptext5:
  2114                           	callstack 0
  2115  0035FC                     _kpOptions1:
  2116                           	callstack 23
  2117  0035FC                     
  2118                           ;keypad.c: 102:     unsigned int tecla = 0;
  2119  0035FC  0E00               	movlw	0
  2120  0035FE  6E58               	movwf	(kpOptions1@tecla+1)^0,c
  2121  003600  0E00               	movlw	0
  2122  003602  6E57               	movwf	kpOptions1@tecla^0,c
  2123                           
  2124                           ;keypad.c: 104:     while(tecla == 0) {
  2125  003604  EF33  F01B         	goto	l4011
  2126  003608                     l3997:
  2127                           
  2128                           ;keypad.c: 105:         kpDebounce();
  2129  003608  ECA6  F014         	call	_kpDebounce	;wreg free
  2130  00360C                     
  2131                           ;keypad.c: 106:         if (kpRead() != tecla) {
  2132  00360C  EC08  F01E         	call	_kpRead	;wreg free
  2133  003610  5057               	movf	kpOptions1@tecla^0,w,c
  2134  003612  1801               	xorwf	?_kpRead^0,w,c
  2135  003614  E109               	bnz	u4100
  2136  003616  5058               	movf	(kpOptions1@tecla+1)^0,w,c
  2137  003618  1802               	xorwf	(?_kpRead+1)^0,w,c
  2138  00361A  B4D8               	btfsc	status,2,c
  2139  00361C  EF12  F01B         	goto	u4101
  2140  003620  EF14  F01B         	goto	u4100
  2141  003624                     u4101:
  2142  003624  EF33  F01B         	goto	l4011
  2143  003628                     u4100:
  2144  003628                     
  2145                           ;keypad.c: 107:             tecla = kpRead();
  2146  003628  EC08  F01E         	call	_kpRead	;wreg free
  2147  00362C  C001  F057         	movff	?_kpRead,kpOptions1@tecla
  2148  003630  C002  F058         	movff	?_kpRead+1,kpOptions1@tecla+1
  2149  003634                     
  2150                           ;keypad.c: 108:             if (((tecla) & (1<<(0)))) {
  2151  003634  A057               	btfss	kpOptions1@tecla^0,0,c
  2152  003636  EF1F  F01B         	goto	u4111
  2153  00363A  EF21  F01B         	goto	u4110
  2154  00363E                     u4111:
  2155  00363E  EF28  F01B         	goto	l111
  2156  003642                     u4110:
  2157  003642                     
  2158                           ;keypad.c: 109:                 lcdCommand(0x01);
  2159  003642  0E01               	movlw	1
  2160  003644  EC3D  F01B         	call	_lcdCommand
  2161  003648                     
  2162                           ;keypad.c: 110:                 preWash();
  2163  003648  EC63  F015         	call	_preWash	;wreg free
  2164                           
  2165                           ;keypad.c: 111:             } else if (((tecla) & (1<<(8)))) {
  2166  00364C  EF33  F01B         	goto	l4011
  2167  003650                     l111:
  2168  003650  A058               	btfss	(kpOptions1@tecla+1)^0,0,c
  2169  003652  EF2D  F01B         	goto	u4121
  2170  003656  EF2F  F01B         	goto	u4120
  2171  00365A                     u4121:
  2172  00365A  EF33  F01B         	goto	l110
  2173  00365E                     u4120:
  2174  00365E                     
  2175                           ;keypad.c: 112:                 kpOptions2();
  2176  00365E  EC4B  F017         	call	_kpOptions2	;wreg free
  2177  003662  EF33  F01B         	goto	l4011
  2178  003666                     l110:
  2179  003666                     l4011:
  2180                           
  2181                           ;keypad.c: 104:     while(tecla == 0) {
  2182  003666  5057               	movf	kpOptions1@tecla^0,w,c
  2183  003668  1058               	iorwf	(kpOptions1@tecla+1)^0,w,c
  2184  00366A  B4D8               	btfsc	status,2,c
  2185  00366C  EF3A  F01B         	goto	u4131
  2186  003670  EF3C  F01B         	goto	u4130
  2187  003674                     u4131:
  2188  003674  EF04  F01B         	goto	l3997
  2189  003678                     u4130:
  2190  003678  0012               	return		;funcret
  2191  00367A                     __end_of_kpOptions1:
  2192                           	callstack 0
  2193                           
  2194 ;; *************** function _preWash *****************
  2195 ;; Defined at:
  2196 ;;		line 22 in file "washes.c"
  2197 ;; Parameters:    Size  Location     Type
  2198 ;;		None
  2199 ;; Auto vars:     Size  Location     Type
  2200 ;;  msgem2         32   64[BANK1 ] unsigned char [32]
  2201 ;;  msgem1         32   32[BANK1 ] unsigned char [32]
  2202 ;;  msgem          32    0[BANK1 ] unsigned char [32]
  2203 ;; Return value:  Size  Location     Type
  2204 ;;                  1    wreg      void 
  2205 ;; Registers used:
  2206 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2207 ;; Tracked objects:
  2208 ;;		On entry : 0/0
  2209 ;;		On exit  : 0/0
  2210 ;;		Unchanged: 0/0
  2211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2212 ;;      Params:         0       0       0       0       0       0       0
  2213 ;;      Locals:         0       0      96       0       0       0       0
  2214 ;;      Temps:          0       0       0       0       0       0       0
  2215 ;;      Totals:         0       0      96       0       0       0       0
  2216 ;;Total ram usage:       96 bytes
  2217 ;; Hardware stack levels used: 1
  2218 ;; Hardware stack levels required when called: 6
  2219 ;; This function calls:
  2220 ;;		_delay
  2221 ;;		_kpOptions2
  2222 ;;		_lcdCommand
  2223 ;;		_lcdPosition
  2224 ;;		_printf
  2225 ;;		_pwmFrequency
  2226 ;;		_pwmSet1
  2227 ;;		_pwmSet2
  2228 ;;		_ssdTimer
  2229 ;; This function is called by:
  2230 ;;		_kpOptions1
  2231 ;; This function uses a non-reentrant model
  2232 ;;
  2233                           
  2234                           	psect	text6
  2235  002AC6                     __ptext6:
  2236                           	callstack 0
  2237  002AC6                     _preWash:
  2238                           	callstack 23
  2239  002AC6                     
  2240                           ;washes.c: 24:     char msgem[32] = "Iniciando       Pre-Lavagem";
  2241  002AC6  EE22  F080         	lfsr	2,preWash@F2400
  2242  002ACA  EE11  F000         	lfsr	1,preWash@msgem
  2243  002ACE  0E1F               	movlw	31
  2244  002AD0                     u4071:
  2245  002AD0  CFDB FFE3          	movff	plusw2,plusw1
  2246  002AD4  06E8               	decf	wreg,f,c
  2247  002AD6  E2FC               	bc	u4071
  2248                           
  2249                           ;washes.c: 25:     char msgem1[32] = "Realizando Aqcua-Spray...";
  2250  002AD8  EE22  F060         	lfsr	2,preWash@F2402
  2251  002ADC  EE11  F020         	lfsr	1,preWash@msgem1
  2252  002AE0  0E1F               	movlw	31
  2253  002AE2                     u4081:
  2254  002AE2  CFDB FFE3          	movff	plusw2,plusw1
  2255  002AE6  06E8               	decf	wreg,f,c
  2256  002AE8  E2FC               	bc	u4081
  2257                           
  2258                           ;washes.c: 26:     char msgem2[32] = "Finalizando";
  2259  002AEA  EE22  F040         	lfsr	2,preWash@F2404
  2260  002AEE  EE11  F040         	lfsr	1,preWash@msgem2
  2261  002AF2  0E1F               	movlw	31
  2262  002AF4                     u4091:
  2263  002AF4  CFDB FFE3          	movff	plusw2,plusw1
  2264  002AF8  06E8               	decf	wreg,f,c
  2265  002AFA  E2FC               	bc	u4091
  2266  002AFC                     
  2267                           ;washes.c: 29:     printf(msgem, 32);
  2268  002AFC  0E00               	movlw	low preWash@msgem
  2269  002AFE  6E09               	movwf	printf@msg^0,c
  2270  002B00  0E01               	movlw	high preWash@msgem
  2271  002B02  6E0A               	movwf	(printf@msg+1)^0,c
  2272  002B04  0E00               	movlw	0
  2273  002B06  6E0C               	movwf	(printf@j+1)^0,c
  2274  002B08  0E20               	movlw	32
  2275  002B0A  6E0B               	movwf	printf@j^0,c
  2276  002B0C  ECBF  F019         	call	_printf	;wreg free
  2277  002B10                     
  2278                           ;washes.c: 30:     delay(2000);
  2279  002B10  0E07               	movlw	7
  2280  002B12  6E02               	movwf	(delay@temp+1)^0,c
  2281  002B14  0ED0               	movlw	208
  2282  002B16  6E01               	movwf	delay@temp^0,c
  2283  002B18  EC92  F01C         	call	_delay	;wreg free
  2284  002B1C                     
  2285                           ;washes.c: 33:     printf(msgem1, 32);
  2286  002B1C  0E20               	movlw	low preWash@msgem1
  2287  002B1E  6E09               	movwf	printf@msg^0,c
  2288  002B20  0E01               	movlw	high preWash@msgem1
  2289  002B22  6E0A               	movwf	(printf@msg+1)^0,c
  2290  002B24  0E00               	movlw	0
  2291  002B26  6E0C               	movwf	(printf@j+1)^0,c
  2292  002B28  0E20               	movlw	32
  2293  002B2A  6E0B               	movwf	printf@j^0,c
  2294  002B2C  ECBF  F019         	call	_printf	;wreg free
  2295  002B30                     
  2296                           ;washes.c: 34:     lcdPosition(1, 9);
  2297  002B30  0E09               	movlw	9
  2298  002B32  6E09               	movwf	lcdPosition@col^0,c
  2299  002B34  0E01               	movlw	1
  2300  002B36  EC85  F01D         	call	_lcdPosition
  2301  002B3A                     
  2302                           ;washes.c: 35:     lcdCommand(0x0F);
  2303  002B3A  0E0F               	movlw	15
  2304  002B3C  EC3D  F01B         	call	_lcdCommand
  2305  002B40                     
  2306                           ;washes.c: 36:     pwmSet1(100);
  2307  002B40  0E64               	movlw	100
  2308  002B42  ECF2  F01B         	call	_pwmSet1
  2309  002B46                     
  2310                           ;washes.c: 37:     ssdTimer(600);
  2311  002B46  0E58               	movlw	88
  2312  002B48  6E1B               	movwf	ssdTimer@cont^0,c
  2313  002B4A  0E02               	movlw	2
  2314  002B4C  6E1C               	movwf	(ssdTimer@cont+1)^0,c
  2315  002B4E  0E00               	movlw	0
  2316  002B50  6E1D               	movwf	(ssdTimer@cont+2)^0,c
  2317  002B52  0E00               	movlw	0
  2318  002B54  6E1E               	movwf	(ssdTimer@cont+3)^0,c
  2319  002B56  EC64  F010         	call	_ssdTimer	;wreg free
  2320  002B5A                     
  2321                           ;washes.c: 38:     printf(msgem2, 32);
  2322  002B5A  0E40               	movlw	low preWash@msgem2
  2323  002B5C  6E09               	movwf	printf@msg^0,c
  2324  002B5E  0E01               	movlw	high preWash@msgem2
  2325  002B60  6E0A               	movwf	(printf@msg+1)^0,c
  2326  002B62  0E00               	movlw	0
  2327  002B64  6E0C               	movwf	(printf@j+1)^0,c
  2328  002B66  0E20               	movlw	32
  2329  002B68  6E0B               	movwf	printf@j^0,c
  2330  002B6A  ECBF  F019         	call	_printf	;wreg free
  2331  002B6E                     
  2332                           ;washes.c: 39:     lcdPosition(0, 11);
  2333  002B6E  0E0B               	movlw	11
  2334  002B70  6E09               	movwf	lcdPosition@col^0,c
  2335  002B72  0E00               	movlw	0
  2336  002B74  EC85  F01D         	call	_lcdPosition
  2337  002B78                     
  2338                           ;washes.c: 40:     lcdCommand(0x0F);
  2339  002B78  0E0F               	movlw	15
  2340  002B7A  EC3D  F01B         	call	_lcdCommand
  2341  002B7E                     
  2342                           ;washes.c: 43:     pwmSet1(0);
  2343  002B7E  0E00               	movlw	0
  2344  002B80  ECF2  F01B         	call	_pwmSet1
  2345  002B84                     
  2346                           ;washes.c: 44:     ((PORTA) &= ~(1<<(2)));
  2347  002B84  9480               	bcf	128,2,c	;volatile
  2348  002B86                     
  2349                           ;washes.c: 45:     lcdCommand(0x01);
  2350  002B86  0E01               	movlw	1
  2351  002B88  EC3D  F01B         	call	_lcdCommand
  2352  002B8C                     
  2353                           ;washes.c: 46:     lcdCommand(0x0C);
  2354  002B8C  0E0C               	movlw	12
  2355  002B8E  EC3D  F01B         	call	_lcdCommand
  2356  002B92                     
  2357                           ;washes.c: 47:     delay(100);
  2358  002B92  0E00               	movlw	0
  2359  002B94  6E02               	movwf	(delay@temp+1)^0,c
  2360  002B96  0E64               	movlw	100
  2361  002B98  6E01               	movwf	delay@temp^0,c
  2362  002B9A  EC92  F01C         	call	_delay	;wreg free
  2363  002B9E                     
  2364                           ;washes.c: 50:     pwmFrequency(10000);
  2365  002B9E  0E27               	movlw	39
  2366  002BA0  6E10               	movwf	(pwmFrequency@freq+1)^0,c
  2367  002BA2  0E10               	movlw	16
  2368  002BA4  6E0F               	movwf	pwmFrequency@freq^0,c
  2369  002BA6  ECCD  F01D         	call	_pwmFrequency	;wreg free
  2370  002BAA                     
  2371                           ;washes.c: 51:     pwmSet2(50);
  2372  002BAA  0E32               	movlw	50
  2373  002BAC  EC28  F01C         	call	_pwmSet2
  2374  002BB0                     
  2375                           ;washes.c: 52:     ((TRISC) |= (1<<(1)));
  2376  002BB0  8294               	bsf	148,1,c	;volatile
  2377  002BB2                     
  2378                           ;washes.c: 53:     PORTD = 0xFF;
  2379  002BB2  6883               	setf	131,c	;volatile
  2380  002BB4                     
  2381                           ;washes.c: 54:     delay(3000);
  2382  002BB4  0E0B               	movlw	11
  2383  002BB6  6E02               	movwf	(delay@temp+1)^0,c
  2384  002BB8  0EB8               	movlw	184
  2385  002BBA  6E01               	movwf	delay@temp^0,c
  2386  002BBC  EC92  F01C         	call	_delay	;wreg free
  2387  002BC0                     
  2388                           ;washes.c: 55:     ((TRISC) &= ~(1<<(1)));
  2389  002BC0  9294               	bcf	148,1,c	;volatile
  2390  002BC2                     
  2391                           ;washes.c: 56:     PORTD = 0x00;
  2392  002BC2  0E00               	movlw	0
  2393  002BC4  6E83               	movwf	131,c	;volatile
  2394  002BC6                     
  2395                           ;washes.c: 57:     delay(1000);
  2396  002BC6  0E03               	movlw	3
  2397  002BC8  6E02               	movwf	(delay@temp+1)^0,c
  2398  002BCA  0EE8               	movlw	232
  2399  002BCC  6E01               	movwf	delay@temp^0,c
  2400  002BCE  EC92  F01C         	call	_delay	;wreg free
  2401  002BD2                     
  2402                           ;washes.c: 58:     ((TRISC) |= (1<<(1)));
  2403  002BD2  8294               	bsf	148,1,c	;volatile
  2404  002BD4                     
  2405                           ;washes.c: 59:     pwmFrequency(10000);
  2406  002BD4  0E27               	movlw	39
  2407  002BD6  6E10               	movwf	(pwmFrequency@freq+1)^0,c
  2408  002BD8  0E10               	movlw	16
  2409  002BDA  6E0F               	movwf	pwmFrequency@freq^0,c
  2410  002BDC  ECCD  F01D         	call	_pwmFrequency	;wreg free
  2411  002BE0                     
  2412                           ;washes.c: 60:     PORTD = 0xFF;
  2413  002BE0  6883               	setf	131,c	;volatile
  2414  002BE2                     
  2415                           ;washes.c: 61:     delay(3000);
  2416  002BE2  0E0B               	movlw	11
  2417  002BE4  6E02               	movwf	(delay@temp+1)^0,c
  2418  002BE6  0EB8               	movlw	184
  2419  002BE8  6E01               	movwf	delay@temp^0,c
  2420  002BEA  EC92  F01C         	call	_delay	;wreg free
  2421  002BEE                     
  2422                           ;washes.c: 62:     ((TRISC) &= ~(1<<(1)));
  2423  002BEE  9294               	bcf	148,1,c	;volatile
  2424  002BF0                     
  2425                           ;washes.c: 63:     PORTD = 0x00;
  2426  002BF0  0E00               	movlw	0
  2427  002BF2  6E83               	movwf	131,c	;volatile
  2428  002BF4                     
  2429                           ;washes.c: 64:     delay(1000);
  2430  002BF4  0E03               	movlw	3
  2431  002BF6  6E02               	movwf	(delay@temp+1)^0,c
  2432  002BF8  0EE8               	movlw	232
  2433  002BFA  6E01               	movwf	delay@temp^0,c
  2434  002BFC  EC92  F01C         	call	_delay	;wreg free
  2435  002C00                     
  2436                           ;washes.c: 65:     ((TRISC) |= (1<<(1)));
  2437  002C00  8294               	bsf	148,1,c	;volatile
  2438  002C02                     
  2439                           ;washes.c: 66:     pwmFrequency(10000);
  2440  002C02  0E27               	movlw	39
  2441  002C04  6E10               	movwf	(pwmFrequency@freq+1)^0,c
  2442  002C06  0E10               	movlw	16
  2443  002C08  6E0F               	movwf	pwmFrequency@freq^0,c
  2444  002C0A  ECCD  F01D         	call	_pwmFrequency	;wreg free
  2445  002C0E                     
  2446                           ;washes.c: 67:     PORTD = 0xFF;
  2447  002C0E  6883               	setf	131,c	;volatile
  2448  002C10                     
  2449                           ;washes.c: 68:     delay(3000);
  2450  002C10  0E0B               	movlw	11
  2451  002C12  6E02               	movwf	(delay@temp+1)^0,c
  2452  002C14  0EB8               	movlw	184
  2453  002C16  6E01               	movwf	delay@temp^0,c
  2454  002C18  EC92  F01C         	call	_delay	;wreg free
  2455  002C1C                     
  2456                           ;washes.c: 69:     ((TRISC) &= ~(1<<(1)));
  2457  002C1C  9294               	bcf	148,1,c	;volatile
  2458  002C1E                     
  2459                           ;washes.c: 70:     pwmSet2(0);
  2460  002C1E  0E00               	movlw	0
  2461  002C20  EC28  F01C         	call	_pwmSet2
  2462  002C24                     
  2463                           ;washes.c: 71:     PORTD = 0x00;
  2464  002C24  0E00               	movlw	0
  2465  002C26  6E83               	movwf	131,c	;volatile
  2466  002C28                     
  2467                           ;washes.c: 73:     delay(100);
  2468  002C28  0E00               	movlw	0
  2469  002C2A  6E02               	movwf	(delay@temp+1)^0,c
  2470  002C2C  0E64               	movlw	100
  2471  002C2E  6E01               	movwf	delay@temp^0,c
  2472  002C30  EC92  F01C         	call	_delay	;wreg free
  2473  002C34                     
  2474                           ;washes.c: 76:     kpOptions2();
  2475  002C34  EC4B  F017         	call	_kpOptions2	;wreg free
  2476  002C38  0012               	return		;funcret
  2477  002C3A                     __end_of_preWash:
  2478                           	callstack 0
  2479                           
  2480 ;; *************** function _ssdTimer *****************
  2481 ;; Defined at:
  2482 ;;		line 113 in file "ssd.c"
  2483 ;; Parameters:    Size  Location     Type
  2484 ;;  cont            4   26[COMRAM] long 
  2485 ;; Auto vars:     Size  Location     Type
  2486 ;;  tempo           4   34[COMRAM] float 
  2487 ;;  i               2   32[COMRAM] int 
  2488 ;;  c               2   30[COMRAM] int 
  2489 ;; Return value:  Size  Location     Type
  2490 ;;                  1    wreg      void 
  2491 ;; Registers used:
  2492 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2493 ;; Tracked objects:
  2494 ;;		On entry : 0/0
  2495 ;;		On exit  : 0/0
  2496 ;;		Unchanged: 0/0
  2497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2498 ;;      Params:         4       0       0       0       0       0       0
  2499 ;;      Locals:         8       0       0       0       0       0       0
  2500 ;;      Temps:          0       0       0       0       0       0       0
  2501 ;;      Totals:        12       0       0       0       0       0       0
  2502 ;;Total ram usage:       12 bytes
  2503 ;; Hardware stack levels used: 1
  2504 ;; Hardware stack levels required when called: 2
  2505 ;; This function calls:
  2506 ;;		___aldiv
  2507 ;;		___almod
  2508 ;;		___fladd
  2509 ;;		___flge
  2510 ;;		_delayAux
  2511 ;;		_ssdDigit
  2512 ;;		_ssdUpdate
  2513 ;; This function is called by:
  2514 ;;		_preWash
  2515 ;; This function uses a non-reentrant model
  2516 ;;
  2517                           
  2518                           	psect	text7
  2519  0020C8                     __ptext7:
  2520                           	callstack 0
  2521  0020C8                     _ssdTimer:
  2522                           	callstack 26
  2523  0020C8                     
  2524                           ;ssd.c: 114:     float tempo;;ssd.c: 115:     int c, i;;ssd.c: 117:     while (cont >= 0
      +                          ) {
  2525  0020C8  EF50  F012         	goto	l3837
  2526  0020CC                     l3797:
  2527                           
  2528                           ;ssd.c: 118:         if (c == 0) {
  2529  0020CC  501F               	movf	ssdTimer@c^0,w,c
  2530  0020CE  1020               	iorwf	(ssdTimer@c+1)^0,w,c
  2531  0020D0  A4D8               	btfss	status,2,c
  2532  0020D2  EF6D  F010         	goto	u3791
  2533  0020D6  EF6F  F010         	goto	u3790
  2534  0020DA                     u3791:
  2535  0020DA  EF7B  F010         	goto	l3803
  2536  0020DE                     u3790:
  2537  0020DE                     
  2538                           ;ssd.c: 119:             cont--;
  2539  0020DE  0EFF               	movlw	255
  2540  0020E0  261B               	addwf	ssdTimer@cont^0,f,c
  2541  0020E2  0EFF               	movlw	255
  2542  0020E4  221C               	addwfc	(ssdTimer@cont+1)^0,f,c
  2543  0020E6  0EFF               	movlw	255
  2544  0020E8  221D               	addwfc	(ssdTimer@cont+2)^0,f,c
  2545  0020EA  0EFF               	movlw	255
  2546  0020EC  221E               	addwfc	(ssdTimer@cont+3)^0,f,c
  2547  0020EE                     
  2548                           ;ssd.c: 120:             c = 12;
  2549  0020EE  0E00               	movlw	0
  2550  0020F0  6E20               	movwf	(ssdTimer@c+1)^0,c
  2551  0020F2  0E0C               	movlw	12
  2552  0020F4  6E1F               	movwf	ssdTimer@c^0,c
  2553  0020F6                     l3803:
  2554                           
  2555                           ;ssd.c: 122:         if ((cont / 100) % 10 < 6) {
  2556  0020F6  0E64               	movlw	100
  2557  0020F8  6E05               	movwf	___aldiv@divisor^0,c
  2558  0020FA  0E00               	movlw	0
  2559  0020FC  6E06               	movwf	(___aldiv@divisor+1)^0,c
  2560  0020FE  0E00               	movlw	0
  2561  002100  6E07               	movwf	(___aldiv@divisor+2)^0,c
  2562  002102  0E00               	movlw	0
  2563  002104  6E08               	movwf	(___aldiv@divisor+3)^0,c
  2564  002106  C01B  F001         	movff	ssdTimer@cont,___aldiv@dividend
  2565  00210A  C01C  F002         	movff	ssdTimer@cont+1,___aldiv@dividend+1
  2566  00210E  C01D  F003         	movff	ssdTimer@cont+2,___aldiv@dividend+2
  2567  002112  C01E  F004         	movff	ssdTimer@cont+3,___aldiv@dividend+3
  2568  002116  ECC5  F016         	call	___aldiv	;wreg free
  2569  00211A  C001  F00F         	movff	?___aldiv,___almod@dividend
  2570  00211E  C002  F010         	movff	?___aldiv+1,___almod@dividend+1
  2571  002122  C003  F011         	movff	?___aldiv+2,___almod@dividend+2
  2572  002126  C004  F012         	movff	?___aldiv+3,___almod@dividend+3
  2573  00212A  0E0A               	movlw	10
  2574  00212C  6E13               	movwf	___almod@divisor^0,c
  2575  00212E  0E00               	movlw	0
  2576  002130  6E14               	movwf	(___almod@divisor+1)^0,c
  2577  002132  0E00               	movlw	0
  2578  002134  6E15               	movwf	(___almod@divisor+2)^0,c
  2579  002136  0E00               	movlw	0
  2580  002138  6E16               	movwf	(___almod@divisor+3)^0,c
  2581  00213A  EC49  F019         	call	___almod	;wreg free
  2582  00213E  BE12               	btfsc	(?___almod+3)^0,7,c
  2583  002140  EFAF  F010         	goto	u3800
  2584  002144  5012               	movf	(?___almod+3)^0,w,c
  2585  002146  1011               	iorwf	(?___almod+2)^0,w,c
  2586  002148  1010               	iorwf	(?___almod+1)^0,w,c
  2587  00214A  E107               	bnz	u3801
  2588  00214C  0E06               	movlw	6
  2589  00214E  5C0F               	subwf	?___almod^0,w,c
  2590  002150  B0D8               	btfsc	status,0,c
  2591  002152  EFAD  F010         	goto	u3801
  2592  002156  EFAF  F010         	goto	u3800
  2593  00215A                     u3801:
  2594  00215A  EFD8  F010         	goto	l419
  2595  00215E                     u3800:
  2596  00215E                     
  2597                           ;ssd.c: 123:             ssdDigit(((cont / 10) % 10), 3);
  2598  00215E  0E03               	movlw	3
  2599  002160  6E19               	movwf	ssdDigit@pos^0,c
  2600  002162  0E0A               	movlw	10
  2601  002164  6E05               	movwf	___aldiv@divisor^0,c
  2602  002166  0E00               	movlw	0
  2603  002168  6E06               	movwf	(___aldiv@divisor+1)^0,c
  2604  00216A  0E00               	movlw	0
  2605  00216C  6E07               	movwf	(___aldiv@divisor+2)^0,c
  2606  00216E  0E00               	movlw	0
  2607  002170  6E08               	movwf	(___aldiv@divisor+3)^0,c
  2608  002172  C01B  F001         	movff	ssdTimer@cont,___aldiv@dividend
  2609  002176  C01C  F002         	movff	ssdTimer@cont+1,___aldiv@dividend+1
  2610  00217A  C01D  F003         	movff	ssdTimer@cont+2,___aldiv@dividend+2
  2611  00217E  C01E  F004         	movff	ssdTimer@cont+3,___aldiv@dividend+3
  2612  002182  ECC5  F016         	call	___aldiv	;wreg free
  2613  002186  C001  F00F         	movff	?___aldiv,___almod@dividend
  2614  00218A  C002  F010         	movff	?___aldiv+1,___almod@dividend+1
  2615  00218E  C003  F011         	movff	?___aldiv+2,___almod@dividend+2
  2616  002192  C004  F012         	movff	?___aldiv+3,___almod@dividend+3
  2617  002196  0E0A               	movlw	10
  2618  002198  6E13               	movwf	___almod@divisor^0,c
  2619  00219A  0E00               	movlw	0
  2620  00219C  6E14               	movwf	(___almod@divisor+1)^0,c
  2621  00219E  0E00               	movlw	0
  2622  0021A0  6E15               	movwf	(___almod@divisor+2)^0,c
  2623  0021A2  0E00               	movlw	0
  2624  0021A4  6E16               	movwf	(___almod@divisor+3)^0,c
  2625  0021A6  EC49  F019         	call	___almod	;wreg free
  2626  0021AA  500F               	movf	?___almod^0,w,c
  2627  0021AC  ECC4  F01C         	call	_ssdDigit
  2628  0021B0                     l419:
  2629                           
  2630                           ;ssd.c: 125:         delayAux(2);
  2631  0021B0  0E00               	movlw	0
  2632  0021B2  6E02               	movwf	(delayAux@i+1)^0,c
  2633  0021B4  0E02               	movlw	2
  2634  0021B6  6E01               	movwf	delayAux@i^0,c
  2635  0021B8  ECA2  F01D         	call	_delayAux	;wreg free
  2636                           
  2637                           ;ssd.c: 126:         if ((cont / 100) % 10 < 6) {
  2638  0021BC  0E64               	movlw	100
  2639  0021BE  6E05               	movwf	___aldiv@divisor^0,c
  2640  0021C0  0E00               	movlw	0
  2641  0021C2  6E06               	movwf	(___aldiv@divisor+1)^0,c
  2642  0021C4  0E00               	movlw	0
  2643  0021C6  6E07               	movwf	(___aldiv@divisor+2)^0,c
  2644  0021C8  0E00               	movlw	0
  2645  0021CA  6E08               	movwf	(___aldiv@divisor+3)^0,c
  2646  0021CC  C01B  F001         	movff	ssdTimer@cont,___aldiv@dividend
  2647  0021D0  C01C  F002         	movff	ssdTimer@cont+1,___aldiv@dividend+1
  2648  0021D4  C01D  F003         	movff	ssdTimer@cont+2,___aldiv@dividend+2
  2649  0021D8  C01E  F004         	movff	ssdTimer@cont+3,___aldiv@dividend+3
  2650  0021DC  ECC5  F016         	call	___aldiv	;wreg free
  2651  0021E0  C001  F00F         	movff	?___aldiv,___almod@dividend
  2652  0021E4  C002  F010         	movff	?___aldiv+1,___almod@dividend+1
  2653  0021E8  C003  F011         	movff	?___aldiv+2,___almod@dividend+2
  2654  0021EC  C004  F012         	movff	?___aldiv+3,___almod@dividend+3
  2655  0021F0  0E0A               	movlw	10
  2656  0021F2  6E13               	movwf	___almod@divisor^0,c
  2657  0021F4  0E00               	movlw	0
  2658  0021F6  6E14               	movwf	(___almod@divisor+1)^0,c
  2659  0021F8  0E00               	movlw	0
  2660  0021FA  6E15               	movwf	(___almod@divisor+2)^0,c
  2661  0021FC  0E00               	movlw	0
  2662  0021FE  6E16               	movwf	(___almod@divisor+3)^0,c
  2663  002200  EC49  F019         	call	___almod	;wreg free
  2664  002204  BE12               	btfsc	(?___almod+3)^0,7,c
  2665  002206  EF12  F011         	goto	u3810
  2666  00220A  5012               	movf	(?___almod+3)^0,w,c
  2667  00220C  1011               	iorwf	(?___almod+2)^0,w,c
  2668  00220E  1010               	iorwf	(?___almod+1)^0,w,c
  2669  002210  E107               	bnz	u3811
  2670  002212  0E06               	movlw	6
  2671  002214  5C0F               	subwf	?___almod^0,w,c
  2672  002216  B0D8               	btfsc	status,0,c
  2673  002218  EF10  F011         	goto	u3811
  2674  00221C  EF12  F011         	goto	u3810
  2675  002220                     u3811:
  2676  002220  EF3B  F011         	goto	l420
  2677  002224                     u3810:
  2678  002224                     
  2679                           ;ssd.c: 127:             ssdDigit(((cont / 100) % 10), 2);
  2680  002224  0E02               	movlw	2
  2681  002226  6E19               	movwf	ssdDigit@pos^0,c
  2682  002228  0E64               	movlw	100
  2683  00222A  6E05               	movwf	___aldiv@divisor^0,c
  2684  00222C  0E00               	movlw	0
  2685  00222E  6E06               	movwf	(___aldiv@divisor+1)^0,c
  2686  002230  0E00               	movlw	0
  2687  002232  6E07               	movwf	(___aldiv@divisor+2)^0,c
  2688  002234  0E00               	movlw	0
  2689  002236  6E08               	movwf	(___aldiv@divisor+3)^0,c
  2690  002238  C01B  F001         	movff	ssdTimer@cont,___aldiv@dividend
  2691  00223C  C01C  F002         	movff	ssdTimer@cont+1,___aldiv@dividend+1
  2692  002240  C01D  F003         	movff	ssdTimer@cont+2,___aldiv@dividend+2
  2693  002244  C01E  F004         	movff	ssdTimer@cont+3,___aldiv@dividend+3
  2694  002248  ECC5  F016         	call	___aldiv	;wreg free
  2695  00224C  C001  F00F         	movff	?___aldiv,___almod@dividend
  2696  002250  C002  F010         	movff	?___aldiv+1,___almod@dividend+1
  2697  002254  C003  F011         	movff	?___aldiv+2,___almod@dividend+2
  2698  002258  C004  F012         	movff	?___aldiv+3,___almod@dividend+3
  2699  00225C  0E0A               	movlw	10
  2700  00225E  6E13               	movwf	___almod@divisor^0,c
  2701  002260  0E00               	movlw	0
  2702  002262  6E14               	movwf	(___almod@divisor+1)^0,c
  2703  002264  0E00               	movlw	0
  2704  002266  6E15               	movwf	(___almod@divisor+2)^0,c
  2705  002268  0E00               	movlw	0
  2706  00226A  6E16               	movwf	(___almod@divisor+3)^0,c
  2707  00226C  EC49  F019         	call	___almod	;wreg free
  2708  002270  500F               	movf	?___almod^0,w,c
  2709  002272  ECC4  F01C         	call	_ssdDigit
  2710  002276                     l420:
  2711                           
  2712                           ;ssd.c: 129:         if ((cont / 100) % 10 >= 6) {
  2713  002276  0E64               	movlw	100
  2714  002278  6E05               	movwf	___aldiv@divisor^0,c
  2715  00227A  0E00               	movlw	0
  2716  00227C  6E06               	movwf	(___aldiv@divisor+1)^0,c
  2717  00227E  0E00               	movlw	0
  2718  002280  6E07               	movwf	(___aldiv@divisor+2)^0,c
  2719  002282  0E00               	movlw	0
  2720  002284  6E08               	movwf	(___aldiv@divisor+3)^0,c
  2721  002286  C01B  F001         	movff	ssdTimer@cont,___aldiv@dividend
  2722  00228A  C01C  F002         	movff	ssdTimer@cont+1,___aldiv@dividend+1
  2723  00228E  C01D  F003         	movff	ssdTimer@cont+2,___aldiv@dividend+2
  2724  002292  C01E  F004         	movff	ssdTimer@cont+3,___aldiv@dividend+3
  2725  002296  ECC5  F016         	call	___aldiv	;wreg free
  2726  00229A  C001  F00F         	movff	?___aldiv,___almod@dividend
  2727  00229E  C002  F010         	movff	?___aldiv+1,___almod@dividend+1
  2728  0022A2  C003  F011         	movff	?___aldiv+2,___almod@dividend+2
  2729  0022A6  C004  F012         	movff	?___aldiv+3,___almod@dividend+3
  2730  0022AA  0E0A               	movlw	10
  2731  0022AC  6E13               	movwf	___almod@divisor^0,c
  2732  0022AE  0E00               	movlw	0
  2733  0022B0  6E14               	movwf	(___almod@divisor+1)^0,c
  2734  0022B2  0E00               	movlw	0
  2735  0022B4  6E15               	movwf	(___almod@divisor+2)^0,c
  2736  0022B6  0E00               	movlw	0
  2737  0022B8  6E16               	movwf	(___almod@divisor+3)^0,c
  2738  0022BA  EC49  F019         	call	___almod	;wreg free
  2739  0022BE  BE12               	btfsc	(?___almod+3)^0,7,c
  2740  0022C0  EF6D  F011         	goto	u3821
  2741  0022C4  5012               	movf	(?___almod+3)^0,w,c
  2742  0022C6  1011               	iorwf	(?___almod+2)^0,w,c
  2743  0022C8  1010               	iorwf	(?___almod+1)^0,w,c
  2744  0022CA  E109               	bnz	u3820
  2745  0022CC  0E06               	movlw	6
  2746  0022CE  5C0F               	subwf	?___almod^0,w,c
  2747  0022D0  A0D8               	btfss	status,0,c
  2748  0022D2  EF6D  F011         	goto	u3821
  2749  0022D6  EF6F  F011         	goto	u3820
  2750  0022DA                     u3821:
  2751  0022DA  EFE1  F011         	goto	l3829
  2752  0022DE                     u3820:
  2753  0022DE                     
  2754                           ;ssd.c: 130:             for (tempo = 0; tempo < 4; tempo++) {
  2755  0022DE  0E00               	movlw	0
  2756  0022E0  6E23               	movwf	ssdTimer@tempo^0,c
  2757  0022E2  0E00               	movlw	0
  2758  0022E4  6E24               	movwf	(ssdTimer@tempo+1)^0,c
  2759  0022E6  0E00               	movlw	0
  2760  0022E8  6E25               	movwf	(ssdTimer@tempo+2)^0,c
  2761  0022EA  0E00               	movlw	0
  2762  0022EC  6E26               	movwf	(ssdTimer@tempo+3)^0,c
  2763  0022EE  C023  F001         	movff	ssdTimer@tempo,___flge@ff1
  2764  0022F2  C024  F002         	movff	ssdTimer@tempo+1,___flge@ff1+1
  2765  0022F6  C025  F003         	movff	ssdTimer@tempo+2,___flge@ff1+2
  2766  0022FA  C026  F004         	movff	ssdTimer@tempo+3,___flge@ff1+3
  2767  0022FE  0E00               	movlw	0
  2768  002300  6E05               	movwf	___flge@ff2^0,c
  2769  002302  0E00               	movlw	0
  2770  002304  6E06               	movwf	(___flge@ff2+1)^0,c
  2771  002306  0E80               	movlw	128
  2772  002308  6E07               	movwf	(___flge@ff2+2)^0,c
  2773  00230A  0E40               	movlw	64
  2774  00230C  6E08               	movwf	(___flge@ff2+3)^0,c
  2775  00230E  ECCF  F017         	call	___flge	;wreg free
  2776  002312  A0D8               	btfss	status,0,c
  2777  002314  EF8E  F011         	goto	u3831
  2778  002318  EF90  F011         	goto	u3830
  2779  00231C                     u3831:
  2780  00231C  EF92  F011         	goto	l3815
  2781  002320                     u3830:
  2782  002320  EFE1  F011         	goto	l3829
  2783  002324                     l3815:
  2784                           
  2785                           ;ssd.c: 131:                 for (i = 0; i < 10; i++) {
  2786  002324  0E00               	movlw	0
  2787  002326  6E22               	movwf	(ssdTimer@i+1)^0,c
  2788  002328  0E00               	movlw	0
  2789  00232A  6E21               	movwf	ssdTimer@i^0,c
  2790  00232C                     l3821:
  2791                           
  2792                           ;ssd.c: 132:                     cont--;
  2793  00232C  0EFF               	movlw	255
  2794  00232E  261B               	addwf	ssdTimer@cont^0,f,c
  2795  002330  0EFF               	movlw	255
  2796  002332  221C               	addwfc	(ssdTimer@cont+1)^0,f,c
  2797  002334  0EFF               	movlw	255
  2798  002336  221D               	addwfc	(ssdTimer@cont+2)^0,f,c
  2799  002338  0EFF               	movlw	255
  2800  00233A  221E               	addwfc	(ssdTimer@cont+3)^0,f,c
  2801  00233C                     
  2802                           ;ssd.c: 133:                 }
  2803  00233C  4A21               	infsnz	ssdTimer@i^0,f,c
  2804  00233E  2A22               	incf	(ssdTimer@i+1)^0,f,c
  2805  002340  BE22               	btfsc	(ssdTimer@i+1)^0,7,c
  2806  002342  EFAC  F011         	goto	u3841
  2807  002346  5022               	movf	(ssdTimer@i+1)^0,w,c
  2808  002348  E109               	bnz	u3840
  2809  00234A  0E0A               	movlw	10
  2810  00234C  5C21               	subwf	ssdTimer@i^0,w,c
  2811  00234E  A0D8               	btfss	status,0,c
  2812  002350  EFAC  F011         	goto	u3841
  2813  002354  EFAE  F011         	goto	u3840
  2814  002358                     u3841:
  2815  002358  EF96  F011         	goto	l3821
  2816  00235C                     u3840:
  2817  00235C                     
  2818                           ;ssd.c: 134:             }
  2819  00235C  C023  F001         	movff	ssdTimer@tempo,___fladd@b
  2820  002360  C024  F002         	movff	ssdTimer@tempo+1,___fladd@b+1
  2821  002364  C025  F003         	movff	ssdTimer@tempo+2,___fladd@b+2
  2822  002368  C026  F004         	movff	ssdTimer@tempo+3,___fladd@b+3
  2823  00236C  0E00               	movlw	0
  2824  00236E  6E05               	movwf	___fladd@a^0,c
  2825  002370  0E00               	movlw	0
  2826  002372  6E06               	movwf	(___fladd@a+1)^0,c
  2827  002374  0E80               	movlw	128
  2828  002376  6E07               	movwf	(___fladd@a+2)^0,c
  2829  002378  0E3F               	movlw	63
  2830  00237A  6E08               	movwf	(___fladd@a+3)^0,c
  2831  00237C  EC04  F00E         	call	___fladd	;wreg free
  2832  002380  C001  F023         	movff	?___fladd,ssdTimer@tempo
  2833  002384  C002  F024         	movff	?___fladd+1,ssdTimer@tempo+1
  2834  002388  C003  F025         	movff	?___fladd+2,ssdTimer@tempo+2
  2835  00238C  C004  F026         	movff	?___fladd+3,ssdTimer@tempo+3
  2836  002390  C023  F001         	movff	ssdTimer@tempo,___flge@ff1
  2837  002394  C024  F002         	movff	ssdTimer@tempo+1,___flge@ff1+1
  2838  002398  C025  F003         	movff	ssdTimer@tempo+2,___flge@ff1+2
  2839  00239C  C026  F004         	movff	ssdTimer@tempo+3,___flge@ff1+3
  2840  0023A0  0E00               	movlw	0
  2841  0023A2  6E05               	movwf	___flge@ff2^0,c
  2842  0023A4  0E00               	movlw	0
  2843  0023A6  6E06               	movwf	(___flge@ff2+1)^0,c
  2844  0023A8  0E80               	movlw	128
  2845  0023AA  6E07               	movwf	(___flge@ff2+2)^0,c
  2846  0023AC  0E40               	movlw	64
  2847  0023AE  6E08               	movwf	(___flge@ff2+3)^0,c
  2848  0023B0  ECCF  F017         	call	___flge	;wreg free
  2849  0023B4  A0D8               	btfss	status,0,c
  2850  0023B6  EFDF  F011         	goto	u3851
  2851  0023BA  EFE1  F011         	goto	u3850
  2852  0023BE                     u3851:
  2853  0023BE  EF92  F011         	goto	l3815
  2854  0023C2                     u3850:
  2855  0023C2                     l3829:
  2856                           
  2857                           ;ssd.c: 137:         delayAux(2);
  2858  0023C2  0E00               	movlw	0
  2859  0023C4  6E02               	movwf	(delayAux@i+1)^0,c
  2860  0023C6  0E02               	movlw	2
  2861  0023C8  6E01               	movwf	delayAux@i^0,c
  2862  0023CA  ECA2  F01D         	call	_delayAux	;wreg free
  2863                           
  2864                           ;ssd.c: 138:         ssdDigit(((cont / 1000) % 10), 1);
  2865  0023CE  0E01               	movlw	1
  2866  0023D0  6E19               	movwf	ssdDigit@pos^0,c
  2867  0023D2  0EE8               	movlw	232
  2868  0023D4  6E05               	movwf	___aldiv@divisor^0,c
  2869  0023D6  0E03               	movlw	3
  2870  0023D8  6E06               	movwf	(___aldiv@divisor+1)^0,c
  2871  0023DA  0E00               	movlw	0
  2872  0023DC  6E07               	movwf	(___aldiv@divisor+2)^0,c
  2873  0023DE  0E00               	movlw	0
  2874  0023E0  6E08               	movwf	(___aldiv@divisor+3)^0,c
  2875  0023E2  C01B  F001         	movff	ssdTimer@cont,___aldiv@dividend
  2876  0023E6  C01C  F002         	movff	ssdTimer@cont+1,___aldiv@dividend+1
  2877  0023EA  C01D  F003         	movff	ssdTimer@cont+2,___aldiv@dividend+2
  2878  0023EE  C01E  F004         	movff	ssdTimer@cont+3,___aldiv@dividend+3
  2879  0023F2  ECC5  F016         	call	___aldiv	;wreg free
  2880  0023F6  C001  F00F         	movff	?___aldiv,___almod@dividend
  2881  0023FA  C002  F010         	movff	?___aldiv+1,___almod@dividend+1
  2882  0023FE  C003  F011         	movff	?___aldiv+2,___almod@dividend+2
  2883  002402  C004  F012         	movff	?___aldiv+3,___almod@dividend+3
  2884  002406  0E0A               	movlw	10
  2885  002408  6E13               	movwf	___almod@divisor^0,c
  2886  00240A  0E00               	movlw	0
  2887  00240C  6E14               	movwf	(___almod@divisor+1)^0,c
  2888  00240E  0E00               	movlw	0
  2889  002410  6E15               	movwf	(___almod@divisor+2)^0,c
  2890  002412  0E00               	movlw	0
  2891  002414  6E16               	movwf	(___almod@divisor+3)^0,c
  2892  002416  EC49  F019         	call	___almod	;wreg free
  2893  00241A  500F               	movf	?___almod^0,w,c
  2894  00241C  ECC4  F01C         	call	_ssdDigit
  2895                           
  2896                           ;ssd.c: 139:         delayAux(2);
  2897  002420  0E00               	movlw	0
  2898  002422  6E02               	movwf	(delayAux@i+1)^0,c
  2899  002424  0E02               	movlw	2
  2900  002426  6E01               	movwf	delayAux@i^0,c
  2901  002428  ECA2  F01D         	call	_delayAux	;wreg free
  2902                           
  2903                           ;ssd.c: 140:         ssdDigit(((cont / 10000) % 10), 0);
  2904  00242C  0E00               	movlw	0
  2905  00242E  6E19               	movwf	ssdDigit@pos^0,c
  2906  002430  0E10               	movlw	16
  2907  002432  6E05               	movwf	___aldiv@divisor^0,c
  2908  002434  0E27               	movlw	39
  2909  002436  6E06               	movwf	(___aldiv@divisor+1)^0,c
  2910  002438  0E00               	movlw	0
  2911  00243A  6E07               	movwf	(___aldiv@divisor+2)^0,c
  2912  00243C  0E00               	movlw	0
  2913  00243E  6E08               	movwf	(___aldiv@divisor+3)^0,c
  2914  002440  C01B  F001         	movff	ssdTimer@cont,___aldiv@dividend
  2915  002444  C01C  F002         	movff	ssdTimer@cont+1,___aldiv@dividend+1
  2916  002448  C01D  F003         	movff	ssdTimer@cont+2,___aldiv@dividend+2
  2917  00244C  C01E  F004         	movff	ssdTimer@cont+3,___aldiv@dividend+3
  2918  002450  ECC5  F016         	call	___aldiv	;wreg free
  2919  002454  C001  F00F         	movff	?___aldiv,___almod@dividend
  2920  002458  C002  F010         	movff	?___aldiv+1,___almod@dividend+1
  2921  00245C  C003  F011         	movff	?___aldiv+2,___almod@dividend+2
  2922  002460  C004  F012         	movff	?___aldiv+3,___almod@dividend+3
  2923  002464  0E0A               	movlw	10
  2924  002466  6E13               	movwf	___almod@divisor^0,c
  2925  002468  0E00               	movlw	0
  2926  00246A  6E14               	movwf	(___almod@divisor+1)^0,c
  2927  00246C  0E00               	movlw	0
  2928  00246E  6E15               	movwf	(___almod@divisor+2)^0,c
  2929  002470  0E00               	movlw	0
  2930  002472  6E16               	movwf	(___almod@divisor+3)^0,c
  2931  002474  EC49  F019         	call	___almod	;wreg free
  2932  002478  500F               	movf	?___almod^0,w,c
  2933  00247A  ECC4  F01C         	call	_ssdDigit
  2934                           
  2935                           ;ssd.c: 141:         delayAux(2);
  2936  00247E  0E00               	movlw	0
  2937  002480  6E02               	movwf	(delayAux@i+1)^0,c
  2938  002482  0E02               	movlw	2
  2939  002484  6E01               	movwf	delayAux@i^0,c
  2940  002486  ECA2  F01D         	call	_delayAux	;wreg free
  2941  00248A                     
  2942                           ;ssd.c: 142:         ssdUpdate();
  2943  00248A  EC1D  F016         	call	_ssdUpdate	;wreg free
  2944  00248E                     
  2945                           ;ssd.c: 143:         delayAux(2);
  2946  00248E  0E00               	movlw	0
  2947  002490  6E02               	movwf	(delayAux@i+1)^0,c
  2948  002492  0E02               	movlw	2
  2949  002494  6E01               	movwf	delayAux@i^0,c
  2950  002496  ECA2  F01D         	call	_delayAux	;wreg free
  2951  00249A                     
  2952                           ;ssd.c: 144:         c--;
  2953  00249A  061F               	decf	ssdTimer@c^0,f,c
  2954  00249C  A0D8               	btfss	status,0,c
  2955  00249E  0620               	decf	(ssdTimer@c+1)^0,f,c
  2956  0024A0                     l3837:
  2957                           
  2958                           ;ssd.c: 117:     while (cont >= 0) {
  2959  0024A0  BE1E               	btfsc	(ssdTimer@cont+3)^0,7,c
  2960  0024A2  EF57  F012         	goto	u3860
  2961  0024A6  EF55  F012         	goto	u3861
  2962  0024AA                     u3861:
  2963  0024AA  EF66  F010         	goto	l3797
  2964  0024AE                     u3860:
  2965  0024AE  0012               	return		;funcret
  2966  0024B0                     __end_of_ssdTimer:
  2967                           	callstack 0
  2968                           
  2969 ;; *************** function _kpOptions2 *****************
  2970 ;; Defined at:
  2971 ;;		line 118 in file "keypad.c"
  2972 ;; Parameters:    Size  Location     Type
  2973 ;;		None
  2974 ;; Auto vars:     Size  Location     Type
  2975 ;;  msg3           64    0[BANK0 ] unsigned char [64]
  2976 ;;  msg2           32   64[BANK0 ] unsigned char [32]
  2977 ;;  tecla1          2   96[BANK0 ] unsigned int 
  2978 ;; Return value:  Size  Location     Type
  2979 ;;                  1    wreg      void 
  2980 ;; Registers used:
  2981 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2982 ;; Tracked objects:
  2983 ;;		On entry : 0/0
  2984 ;;		On exit  : 0/0
  2985 ;;		Unchanged: 0/0
  2986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2987 ;;      Params:         0       0       0       0       0       0       0
  2988 ;;      Locals:         0      98       0       0       0       0       0
  2989 ;;      Temps:          0       0       0       0       0       0       0
  2990 ;;      Totals:         0      98       0       0       0       0       0
  2991 ;;Total ram usage:       98 bytes
  2992 ;; Hardware stack levels used: 1
  2993 ;; Hardware stack levels required when called: 5
  2994 ;; This function calls:
  2995 ;;		_delay
  2996 ;;		_kpDebounce
  2997 ;;		_kpRead
  2998 ;;		_lcdCommand
  2999 ;;		_printf
  3000 ;;		_washFour
  3001 ;;		_washOne
  3002 ;;		_washThree
  3003 ;;		_washTwo
  3004 ;; This function is called by:
  3005 ;;		_kpOptions1
  3006 ;;		_preWash
  3007 ;; This function uses a non-reentrant model
  3008 ;;
  3009                           
  3010                           	psect	text8
  3011  002E96                     __ptext8:
  3012                           	callstack 0
  3013  002E96                     _kpOptions2:
  3014                           	callstack 23
  3015  002E96                     
  3016                           ;keypad.c: 120:     unsigned int tecla1 = 0;
  3017  002E96  0E00               	movlw	0
  3018  002E98  0100               	movlb	0	; () banked
  3019  002E9A  6FE1               	movwf	(kpOptions2@tecla1+1)& (0+255),b
  3020  002E9C  0E00               	movlw	0
  3021  002E9E  6FE0               	movwf	kpOptions2@tecla1& (0+255),b
  3022  002EA0                     
  3023                           ; BSR set to: 0
  3024                           ;keypad.c: 122:     char msg2[32] = "Escolha uma     opcao de lavagem";
  3025  002EA0  EE22  F0A0         	lfsr	2,kpOptions2@F2450
  3026  002EA4  EE10  F0C0         	lfsr	1,kpOptions2@msg2
  3027  002EA8  0E1F               	movlw	31
  3028  002EAA                     u3721:
  3029  002EAA  CFDB FFE3          	movff	plusw2,plusw1
  3030  002EAE  06E8               	decf	wreg,f,c
  3031  002EB0  E2FC               	bc	u3721
  3032  002EB2                     
  3033                           ; BSR set to: 0
  3034                           ;keypad.c: 123:     char msg3[64] = "1-Pesada        2-Dia a dia     3-Rapida        4-E
      +                          conomica";
  3035  002EB2  EE23  F000         	lfsr	2,kpOptions2@F2452
  3036  002EB6  EE10  F080         	lfsr	1,kpOptions2@msg3
  3037  002EBA  0E3F               	movlw	63
  3038  002EBC                     u3731:
  3039  002EBC  CFDB FFE3          	movff	plusw2,plusw1
  3040  002EC0  06E8               	decf	wreg,f,c
  3041  002EC2  E2FC               	bc	u3731
  3042  002EC4                     
  3043                           ; BSR set to: 0
  3044                           ;keypad.c: 125:     printf(msg2, 32);
  3045  002EC4  0EC0               	movlw	low kpOptions2@msg2
  3046  002EC6  6E09               	movwf	printf@msg^0,c
  3047  002EC8  0E00               	movlw	high kpOptions2@msg2
  3048  002ECA  6E0A               	movwf	(printf@msg+1)^0,c
  3049  002ECC  0E00               	movlw	0
  3050  002ECE  6E0C               	movwf	(printf@j+1)^0,c
  3051  002ED0  0E20               	movlw	32
  3052  002ED2  6E0B               	movwf	printf@j^0,c
  3053  002ED4  ECBF  F019         	call	_printf	;wreg free
  3054  002ED8                     
  3055                           ;keypad.c: 126:     delay(3000);
  3056  002ED8  0E0B               	movlw	11
  3057  002EDA  6E02               	movwf	(delay@temp+1)^0,c
  3058  002EDC  0EB8               	movlw	184
  3059  002EDE  6E01               	movwf	delay@temp^0,c
  3060  002EE0  EC92  F01C         	call	_delay	;wreg free
  3061  002EE4                     
  3062                           ;keypad.c: 128:     printf(msg3, 64);
  3063  002EE4  0E80               	movlw	low kpOptions2@msg3
  3064  002EE6  6E09               	movwf	printf@msg^0,c
  3065  002EE8  0E00               	movlw	high kpOptions2@msg3
  3066  002EEA  6E0A               	movwf	(printf@msg+1)^0,c
  3067  002EEC  0E00               	movlw	0
  3068  002EEE  6E0C               	movwf	(printf@j+1)^0,c
  3069  002EF0  0E40               	movlw	64
  3070  002EF2  6E0B               	movwf	printf@j^0,c
  3071  002EF4  ECBF  F019         	call	_printf	;wreg free
  3072  002EF8                     l3771:
  3073                           
  3074                           ;keypad.c: 131:         kpDebounce();
  3075  002EF8  ECA6  F014         	call	_kpDebounce	;wreg free
  3076  002EFC                     
  3077                           ;keypad.c: 132:         if (kpRead() != tecla1) {
  3078  002EFC  EC08  F01E         	call	_kpRead	;wreg free
  3079  002F00  0100               	movlb	0	; () banked
  3080  002F02  51E0               	movf	kpOptions2@tecla1& (0+255),w,b
  3081  002F04  1801               	xorwf	?_kpRead^0,w,c
  3082  002F06  E109               	bnz	u3740
  3083  002F08  51E1               	movf	(kpOptions2@tecla1+1)& (0+255),w,b
  3084  002F0A  1802               	xorwf	(?_kpRead+1)^0,w,c
  3085  002F0C  B4D8               	btfsc	status,2,c
  3086  002F0E  EF8B  F017         	goto	u3741
  3087  002F12  EF8D  F017         	goto	u3740
  3088  002F16                     u3741:
  3089  002F16  EF7C  F017         	goto	l3771
  3090  002F1A                     u3740:
  3091  002F1A                     
  3092                           ; BSR set to: 0
  3093                           ;keypad.c: 133:             tecla1 = kpRead();
  3094  002F1A  EC08  F01E         	call	_kpRead	;wreg free
  3095  002F1E  C001  F0E0         	movff	?_kpRead,kpOptions2@tecla1
  3096  002F22  C002  F0E1         	movff	?_kpRead+1,kpOptions2@tecla1+1
  3097  002F26                     
  3098                           ;keypad.c: 134:             if (((tecla1) & (1<<(3)))) {
  3099  002F26  0100               	movlb	0	; () banked
  3100  002F28  A7E0               	btfss	kpOptions2@tecla1& (0+255),3,b
  3101  002F2A  EF99  F017         	goto	u3751
  3102  002F2E  EF9B  F017         	goto	u3750
  3103  002F32                     u3751:
  3104  002F32  EFA2  F017         	goto	l124
  3105  002F36                     u3750:
  3106  002F36                     
  3107                           ; BSR set to: 0
  3108                           ;keypad.c: 135:                 lcdCommand(0x01);
  3109  002F36  0E01               	movlw	1
  3110  002F38  EC3D  F01B         	call	_lcdCommand
  3111  002F3C                     
  3112                           ;keypad.c: 136:                 washOne();
  3113  002F3C  EC8A  F008         	call	_washOne	;wreg free
  3114                           
  3115                           ;keypad.c: 137:             } else if (((tecla1) & (1<<(7)))) {
  3116  002F40  EF7C  F017         	goto	l3771
  3117  002F44                     l124:
  3118                           
  3119                           ; BSR set to: 0
  3120  002F44  AFE0               	btfss	kpOptions2@tecla1& (0+255),7,b
  3121  002F46  EFA7  F017         	goto	u3761
  3122  002F4A  EFA9  F017         	goto	u3760
  3123  002F4E                     u3761:
  3124  002F4E  EFB0  F017         	goto	l126
  3125  002F52                     u3760:
  3126  002F52                     
  3127                           ; BSR set to: 0
  3128                           ;keypad.c: 138:                 lcdCommand(0x01);
  3129  002F52  0E01               	movlw	1
  3130  002F54  EC3D  F01B         	call	_lcdCommand
  3131  002F58                     
  3132                           ;keypad.c: 139:                 washTwo();
  3133  002F58  EC10  F003         	call	_washTwo	;wreg free
  3134                           
  3135                           ;keypad.c: 140:             } else if (((tecla1) & (1<<(11)))) {
  3136  002F5C  EF7C  F017         	goto	l3771
  3137  002F60                     l126:
  3138                           
  3139                           ; BSR set to: 0
  3140  002F60  A7E1               	btfss	(kpOptions2@tecla1+1)& (0+255),3,b
  3141  002F62  EFB5  F017         	goto	u3771
  3142  002F66  EFB7  F017         	goto	u3770
  3143  002F6A                     u3771:
  3144  002F6A  EFBE  F017         	goto	l128
  3145  002F6E                     u3770:
  3146  002F6E                     
  3147                           ; BSR set to: 0
  3148                           ;keypad.c: 141:                 lcdCommand(0x01);
  3149  002F6E  0E01               	movlw	1
  3150  002F70  EC3D  F01B         	call	_lcdCommand
  3151  002F74                     
  3152                           ;keypad.c: 142:                 washThree();
  3153  002F74  ECCD  F005         	call	_washThree	;wreg free
  3154                           
  3155                           ;keypad.c: 143:             } else if (((tecla1) & (1<<(2)))) {
  3156  002F78  EF7C  F017         	goto	l3771
  3157  002F7C                     l128:
  3158                           
  3159                           ; BSR set to: 0
  3160  002F7C  A5E0               	btfss	kpOptions2@tecla1& (0+255),2,b
  3161  002F7E  EFC3  F017         	goto	u3781
  3162  002F82  EFC5  F017         	goto	u3780
  3163  002F86                     u3781:
  3164  002F86  EFCC  F017         	goto	l125
  3165  002F8A                     u3780:
  3166  002F8A                     
  3167                           ; BSR set to: 0
  3168                           ;keypad.c: 144:                 lcdCommand(0x01);
  3169  002F8A  0E01               	movlw	1
  3170  002F8C  EC3D  F01B         	call	_lcdCommand
  3171  002F90                     
  3172                           ;keypad.c: 145:                 washFour();
  3173  002F90  EC47  F00B         	call	_washFour	;wreg free
  3174  002F94  EF7C  F017         	goto	l3771
  3175  002F98                     l125:
  3176                           
  3177                           ; BSR set to: 0
  3178  002F98  EF7C  F017         	goto	l3771
  3179  002F9C  0012               	return		;funcret
  3180  002F9E                     __end_of_kpOptions2:
  3181                           	callstack 0
  3182                           
  3183 ;; *************** function _washTwo *****************
  3184 ;; Defined at:
  3185 ;;		line 165 in file "washes.c"
  3186 ;; Parameters:    Size  Location     Type
  3187 ;;		None
  3188 ;; Auto vars:     Size  Location     Type
  3189 ;;  msg            32   26[COMRAM] unsigned char [32]
  3190 ;;  cont            4   66[COMRAM] long 
  3191 ;;  tempo           4   62[COMRAM] float 
  3192 ;;  i               2   60[COMRAM] int 
  3193 ;;  c               2   58[COMRAM] int 
  3194 ;; Return value:  Size  Location     Type
  3195 ;;                  1    wreg      void 
  3196 ;; Registers used:
  3197 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3198 ;; Tracked objects:
  3199 ;;		On entry : 0/0
  3200 ;;		On exit  : 0/0
  3201 ;;		Unchanged: 0/0
  3202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3203 ;;      Params:         0       0       0       0       0       0       0
  3204 ;;      Locals:        44       0       0       0       0       0       0
  3205 ;;      Temps:          0       0       0       0       0       0       0
  3206 ;;      Totals:        44       0       0       0       0       0       0
  3207 ;;Total ram usage:       44 bytes
  3208 ;; Hardware stack levels used: 1
  3209 ;; Hardware stack levels required when called: 4
  3210 ;; This function calls:
  3211 ;;		___aldiv
  3212 ;;		___almod
  3213 ;;		___fladd
  3214 ;;		___flge
  3215 ;;		_buzzer
  3216 ;;		_delay
  3217 ;;		_delayAux
  3218 ;;		_lcdCommand
  3219 ;;		_lcdPosition
  3220 ;;		_printf
  3221 ;;		_pwmSet1
  3222 ;;		_ssdDigit
  3223 ;;		_ssdUpdate
  3224 ;; This function is called by:
  3225 ;;		_kpOptions2
  3226 ;; This function uses a non-reentrant model
  3227 ;;
  3228                           
  3229                           	psect	text9
  3230  000620                     __ptext9:
  3231                           	callstack 0
  3232  000620                     _washTwo:
  3233                           	callstack 23
  3234  000620                     
  3235                           ;washes.c: 166:     float tempo;;washes.c: 167:     int c, i;;washes.c: 168:     long in
      +                          t cont = 8000;
  3236  000620  0E40               	movlw	64
  3237  000622  6E43               	movwf	washTwo@cont^0,c
  3238  000624  0E1F               	movlw	31
  3239  000626  6E44               	movwf	(washTwo@cont+1)^0,c
  3240  000628  0E00               	movlw	0
  3241  00062A  6E45               	movwf	(washTwo@cont+2)^0,c
  3242  00062C  0E00               	movlw	0
  3243  00062E  6E46               	movwf	(washTwo@cont+3)^0,c
  3244  000630                     
  3245                           ;washes.c: 170:     char msg[32] = "Iniciando       Lavagem diaAdia";
  3246  000630  EE22  F000         	lfsr	2,washTwo@F2418
  3247  000634  EE10  F01B         	lfsr	1,washTwo@msg
  3248  000638  0E1F               	movlw	31
  3249  00063A                     u3361:
  3250  00063A  CFDB FFE3          	movff	plusw2,plusw1
  3251  00063E  06E8               	decf	wreg,f,c
  3252  000640  E2FC               	bc	u3361
  3253  000642                     
  3254                           ;washes.c: 172:     printf(msg, 32);
  3255  000642  0E1B               	movlw	low washTwo@msg
  3256  000644  6E09               	movwf	printf@msg^0,c
  3257  000646  0E00               	movlw	high washTwo@msg
  3258  000648  6E0A               	movwf	(printf@msg+1)^0,c
  3259  00064A  0E00               	movlw	0
  3260  00064C  6E0C               	movwf	(printf@j+1)^0,c
  3261  00064E  0E20               	movlw	32
  3262  000650  6E0B               	movwf	printf@j^0,c
  3263  000652  ECBF  F019         	call	_printf	;wreg free
  3264  000656                     
  3265                           ;washes.c: 174:     delay(2000);
  3266  000656  0E07               	movlw	7
  3267  000658  6E02               	movwf	(delay@temp+1)^0,c
  3268  00065A  0ED0               	movlw	208
  3269  00065C  6E01               	movwf	delay@temp^0,c
  3270  00065E  EC92  F01C         	call	_delay	;wreg free
  3271  000662                     
  3272                           ;washes.c: 176:     printf(msg1, 32);
  3273  000662  0EE0               	movlw	low _msg1
  3274  000664  6E09               	movwf	printf@msg^0,c
  3275  000666  0E01               	movlw	high _msg1
  3276  000668  6E0A               	movwf	(printf@msg+1)^0,c
  3277  00066A  0E00               	movlw	0
  3278  00066C  6E0C               	movwf	(printf@j+1)^0,c
  3279  00066E  0E20               	movlw	32
  3280  000670  6E0B               	movwf	printf@j^0,c
  3281  000672  ECBF  F019         	call	_printf	;wreg free
  3282  000676                     
  3283                           ;washes.c: 177:     lcdPosition(0, 15);
  3284  000676  0E0F               	movlw	15
  3285  000678  6E09               	movwf	lcdPosition@col^0,c
  3286  00067A  0E00               	movlw	0
  3287  00067C  EC85  F01D         	call	_lcdPosition
  3288  000680                     
  3289                           ;washes.c: 178:     lcdCommand(0x0F);
  3290  000680  0E0F               	movlw	15
  3291  000682  EC3D  F01B         	call	_lcdCommand
  3292  000686                     
  3293                           ;washes.c: 180:     PORTC = 0x01;
  3294  000686  0E01               	movlw	1
  3295  000688  6E82               	movwf	130,c	;volatile
  3296                           
  3297                           ;washes.c: 181:     while (cont >= 0) {
  3298  00068A  EFA0  F005         	goto	l3521
  3299  00068E                     l3445:
  3300                           
  3301                           ;washes.c: 182:         if (c == 0) {
  3302  00068E  503B               	movf	washTwo@c^0,w,c
  3303  000690  103C               	iorwf	(washTwo@c+1)^0,w,c
  3304  000692  A4D8               	btfss	status,2,c
  3305  000694  EF4E  F003         	goto	u3371
  3306  000698  EF50  F003         	goto	u3370
  3307  00069C                     u3371:
  3308  00069C  EF5C  F003         	goto	l3451
  3309  0006A0                     u3370:
  3310  0006A0                     
  3311                           ;washes.c: 183:             cont--;
  3312  0006A0  0EFF               	movlw	255
  3313  0006A2  2643               	addwf	washTwo@cont^0,f,c
  3314  0006A4  0EFF               	movlw	255
  3315  0006A6  2244               	addwfc	(washTwo@cont+1)^0,f,c
  3316  0006A8  0EFF               	movlw	255
  3317  0006AA  2245               	addwfc	(washTwo@cont+2)^0,f,c
  3318  0006AC  0EFF               	movlw	255
  3319  0006AE  2246               	addwfc	(washTwo@cont+3)^0,f,c
  3320  0006B0                     
  3321                           ;washes.c: 184:             c = 12;
  3322  0006B0  0E00               	movlw	0
  3323  0006B2  6E3C               	movwf	(washTwo@c+1)^0,c
  3324  0006B4  0E0C               	movlw	12
  3325  0006B6  6E3B               	movwf	washTwo@c^0,c
  3326  0006B8                     l3451:
  3327                           
  3328                           ;washes.c: 187:         if (cont == 6000) {
  3329  0006B8  0E70               	movlw	112
  3330  0006BA  1843               	xorwf	washTwo@cont^0,w,c
  3331  0006BC  E109               	bnz	u3381
  3332  0006BE  0E17               	movlw	23
  3333  0006C0  1844               	xorwf	(washTwo@cont+1)^0,w,c
  3334  0006C2  1045               	iorwf	(washTwo@cont+2)^0,w,c
  3335  0006C4  1046               	iorwf	(washTwo@cont+3)^0,w,c
  3336  0006C6  A4D8               	btfss	status,2,c
  3337  0006C8  EF68  F003         	goto	u3381
  3338  0006CC  EF6A  F003         	goto	u3380
  3339  0006D0                     u3381:
  3340  0006D0  EF81  F003         	goto	l3463
  3341  0006D4                     u3380:
  3342  0006D4                     
  3343                           ;washes.c: 188:             pwmSet1(75);
  3344  0006D4  0E4B               	movlw	75
  3345  0006D6  ECF2  F01B         	call	_pwmSet1
  3346  0006DA                     
  3347                           ;washes.c: 189:             PORTC = 0x00;
  3348  0006DA  0E00               	movlw	0
  3349  0006DC  6E82               	movwf	130,c	;volatile
  3350  0006DE                     
  3351                           ;washes.c: 190:             printf(msg2, 32);
  3352  0006DE  0EC0               	movlw	low _msg2
  3353  0006E0  6E09               	movwf	printf@msg^0,c
  3354  0006E2  0E01               	movlw	high _msg2
  3355  0006E4  6E0A               	movwf	(printf@msg+1)^0,c
  3356  0006E6  0E00               	movlw	0
  3357  0006E8  6E0C               	movwf	(printf@j+1)^0,c
  3358  0006EA  0E20               	movlw	32
  3359  0006EC  6E0B               	movwf	printf@j^0,c
  3360  0006EE  ECBF  F019         	call	_printf	;wreg free
  3361  0006F2                     
  3362                           ;washes.c: 191:             lcdPosition(0, 10);
  3363  0006F2  0E0A               	movlw	10
  3364  0006F4  6E09               	movwf	lcdPosition@col^0,c
  3365  0006F6  0E00               	movlw	0
  3366  0006F8  EC85  F01D         	call	_lcdPosition
  3367  0006FC                     
  3368                           ;washes.c: 192:             lcdCommand(0x0F);
  3369  0006FC  0E0F               	movlw	15
  3370  0006FE  EC3D  F01B         	call	_lcdCommand
  3371  000702                     l3463:
  3372                           
  3373                           ;washes.c: 195:         if (cont == 4000) {
  3374  000702  0EA0               	movlw	160
  3375  000704  1843               	xorwf	washTwo@cont^0,w,c
  3376  000706  E109               	bnz	u3391
  3377  000708  0E0F               	movlw	15
  3378  00070A  1844               	xorwf	(washTwo@cont+1)^0,w,c
  3379  00070C  1045               	iorwf	(washTwo@cont+2)^0,w,c
  3380  00070E  1046               	iorwf	(washTwo@cont+3)^0,w,c
  3381  000710  A4D8               	btfss	status,2,c
  3382  000712  EF8D  F003         	goto	u3391
  3383  000716  EF8F  F003         	goto	u3390
  3384  00071A                     u3391:
  3385  00071A  EFA6  F003         	goto	l3475
  3386  00071E                     u3390:
  3387  00071E                     
  3388                           ;washes.c: 196:             pwmSet1(0);
  3389  00071E  0E00               	movlw	0
  3390  000720  ECF2  F01B         	call	_pwmSet1
  3391  000724                     
  3392                           ;washes.c: 197:             PORTE = 0x01;
  3393  000724  0E01               	movlw	1
  3394  000726  6E84               	movwf	132,c	;volatile
  3395  000728                     
  3396                           ;washes.c: 198:             printf(msg3, 32);
  3397  000728  0EE0               	movlw	low _msg3
  3398  00072A  6E09               	movwf	printf@msg^0,c
  3399  00072C  0E02               	movlw	high _msg3
  3400  00072E  6E0A               	movwf	(printf@msg+1)^0,c
  3401  000730  0E00               	movlw	0
  3402  000732  6E0C               	movwf	(printf@j+1)^0,c
  3403  000734  0E20               	movlw	32
  3404  000736  6E0B               	movwf	printf@j^0,c
  3405  000738  ECBF  F019         	call	_printf	;wreg free
  3406  00073C                     
  3407                           ;washes.c: 199:             lcdPosition(0, 13);
  3408  00073C  0E0D               	movlw	13
  3409  00073E  6E09               	movwf	lcdPosition@col^0,c
  3410  000740  0E00               	movlw	0
  3411  000742  EC85  F01D         	call	_lcdPosition
  3412  000746                     
  3413                           ;washes.c: 200:             lcdCommand(0x0F);
  3414  000746  0E0F               	movlw	15
  3415  000748  EC3D  F01B         	call	_lcdCommand
  3416  00074C                     l3475:
  3417                           
  3418                           ;washes.c: 203:         if (cont == 2000) {
  3419  00074C  0ED0               	movlw	208
  3420  00074E  1843               	xorwf	washTwo@cont^0,w,c
  3421  000750  E109               	bnz	u3401
  3422  000752  0E07               	movlw	7
  3423  000754  1844               	xorwf	(washTwo@cont+1)^0,w,c
  3424  000756  1045               	iorwf	(washTwo@cont+2)^0,w,c
  3425  000758  1046               	iorwf	(washTwo@cont+3)^0,w,c
  3426  00075A  A4D8               	btfss	status,2,c
  3427  00075C  EFB2  F003         	goto	u3401
  3428  000760  EFB4  F003         	goto	u3400
  3429  000764                     u3401:
  3430  000764  EFCB  F003         	goto	l3487
  3431  000768                     u3400:
  3432  000768                     
  3433                           ;washes.c: 204:             PORTE = 0x00;
  3434  000768  0E00               	movlw	0
  3435  00076A  6E84               	movwf	132,c	;volatile
  3436  00076C                     
  3437                           ;washes.c: 205:             pwmSet1(75);
  3438  00076C  0E4B               	movlw	75
  3439  00076E  ECF2  F01B         	call	_pwmSet1
  3440  000772                     
  3441                           ;washes.c: 206:             printf(msg4, 32);
  3442  000772  0EC0               	movlw	low _msg4
  3443  000774  6E09               	movwf	printf@msg^0,c
  3444  000776  0E02               	movlw	high _msg4
  3445  000778  6E0A               	movwf	(printf@msg+1)^0,c
  3446  00077A  0E00               	movlw	0
  3447  00077C  6E0C               	movwf	(printf@j+1)^0,c
  3448  00077E  0E20               	movlw	32
  3449  000780  6E0B               	movwf	printf@j^0,c
  3450  000782  ECBF  F019         	call	_printf	;wreg free
  3451  000786                     
  3452                           ;washes.c: 207:             lcdPosition(0, 10);
  3453  000786  0E0A               	movlw	10
  3454  000788  6E09               	movwf	lcdPosition@col^0,c
  3455  00078A  0E00               	movlw	0
  3456  00078C  EC85  F01D         	call	_lcdPosition
  3457  000790                     
  3458                           ;washes.c: 208:             lcdCommand(0x0F);
  3459  000790  0E0F               	movlw	15
  3460  000792  EC3D  F01B         	call	_lcdCommand
  3461  000796                     l3487:
  3462                           
  3463                           ;washes.c: 211:         if ((cont / 100) % 10 < 6) {
  3464  000796  0E64               	movlw	100
  3465  000798  6E05               	movwf	___aldiv@divisor^0,c
  3466  00079A  0E00               	movlw	0
  3467  00079C  6E06               	movwf	(___aldiv@divisor+1)^0,c
  3468  00079E  0E00               	movlw	0
  3469  0007A0  6E07               	movwf	(___aldiv@divisor+2)^0,c
  3470  0007A2  0E00               	movlw	0
  3471  0007A4  6E08               	movwf	(___aldiv@divisor+3)^0,c
  3472  0007A6  C043  F001         	movff	washTwo@cont,___aldiv@dividend
  3473  0007AA  C044  F002         	movff	washTwo@cont+1,___aldiv@dividend+1
  3474  0007AE  C045  F003         	movff	washTwo@cont+2,___aldiv@dividend+2
  3475  0007B2  C046  F004         	movff	washTwo@cont+3,___aldiv@dividend+3
  3476  0007B6  ECC5  F016         	call	___aldiv	;wreg free
  3477  0007BA  C001  F00F         	movff	?___aldiv,___almod@dividend
  3478  0007BE  C002  F010         	movff	?___aldiv+1,___almod@dividend+1
  3479  0007C2  C003  F011         	movff	?___aldiv+2,___almod@dividend+2
  3480  0007C6  C004  F012         	movff	?___aldiv+3,___almod@dividend+3
  3481  0007CA  0E0A               	movlw	10
  3482  0007CC  6E13               	movwf	___almod@divisor^0,c
  3483  0007CE  0E00               	movlw	0
  3484  0007D0  6E14               	movwf	(___almod@divisor+1)^0,c
  3485  0007D2  0E00               	movlw	0
  3486  0007D4  6E15               	movwf	(___almod@divisor+2)^0,c
  3487  0007D6  0E00               	movlw	0
  3488  0007D8  6E16               	movwf	(___almod@divisor+3)^0,c
  3489  0007DA  EC49  F019         	call	___almod	;wreg free
  3490  0007DE  BE12               	btfsc	(?___almod+3)^0,7,c
  3491  0007E0  EFFF  F003         	goto	u3410
  3492  0007E4  5012               	movf	(?___almod+3)^0,w,c
  3493  0007E6  1011               	iorwf	(?___almod+2)^0,w,c
  3494  0007E8  1010               	iorwf	(?___almod+1)^0,w,c
  3495  0007EA  E107               	bnz	u3411
  3496  0007EC  0E06               	movlw	6
  3497  0007EE  5C0F               	subwf	?___almod^0,w,c
  3498  0007F0  B0D8               	btfsc	status,0,c
  3499  0007F2  EFFD  F003         	goto	u3411
  3500  0007F6  EFFF  F003         	goto	u3410
  3501  0007FA                     u3411:
  3502  0007FA  EF28  F004         	goto	l296
  3503  0007FE                     u3410:
  3504  0007FE                     
  3505                           ;washes.c: 212:             ssdDigit(((cont / 10) % 10), 3);
  3506  0007FE  0E03               	movlw	3
  3507  000800  6E19               	movwf	ssdDigit@pos^0,c
  3508  000802  0E0A               	movlw	10
  3509  000804  6E05               	movwf	___aldiv@divisor^0,c
  3510  000806  0E00               	movlw	0
  3511  000808  6E06               	movwf	(___aldiv@divisor+1)^0,c
  3512  00080A  0E00               	movlw	0
  3513  00080C  6E07               	movwf	(___aldiv@divisor+2)^0,c
  3514  00080E  0E00               	movlw	0
  3515  000810  6E08               	movwf	(___aldiv@divisor+3)^0,c
  3516  000812  C043  F001         	movff	washTwo@cont,___aldiv@dividend
  3517  000816  C044  F002         	movff	washTwo@cont+1,___aldiv@dividend+1
  3518  00081A  C045  F003         	movff	washTwo@cont+2,___aldiv@dividend+2
  3519  00081E  C046  F004         	movff	washTwo@cont+3,___aldiv@dividend+3
  3520  000822  ECC5  F016         	call	___aldiv	;wreg free
  3521  000826  C001  F00F         	movff	?___aldiv,___almod@dividend
  3522  00082A  C002  F010         	movff	?___aldiv+1,___almod@dividend+1
  3523  00082E  C003  F011         	movff	?___aldiv+2,___almod@dividend+2
  3524  000832  C004  F012         	movff	?___aldiv+3,___almod@dividend+3
  3525  000836  0E0A               	movlw	10
  3526  000838  6E13               	movwf	___almod@divisor^0,c
  3527  00083A  0E00               	movlw	0
  3528  00083C  6E14               	movwf	(___almod@divisor+1)^0,c
  3529  00083E  0E00               	movlw	0
  3530  000840  6E15               	movwf	(___almod@divisor+2)^0,c
  3531  000842  0E00               	movlw	0
  3532  000844  6E16               	movwf	(___almod@divisor+3)^0,c
  3533  000846  EC49  F019         	call	___almod	;wreg free
  3534  00084A  500F               	movf	?___almod^0,w,c
  3535  00084C  ECC4  F01C         	call	_ssdDigit
  3536  000850                     l296:
  3537                           
  3538                           ;washes.c: 214:         delayAux(2);
  3539  000850  0E00               	movlw	0
  3540  000852  6E02               	movwf	(delayAux@i+1)^0,c
  3541  000854  0E02               	movlw	2
  3542  000856  6E01               	movwf	delayAux@i^0,c
  3543  000858  ECA2  F01D         	call	_delayAux	;wreg free
  3544                           
  3545                           ;washes.c: 215:         if ((cont / 100) % 10 < 6) {
  3546  00085C  0E64               	movlw	100
  3547  00085E  6E05               	movwf	___aldiv@divisor^0,c
  3548  000860  0E00               	movlw	0
  3549  000862  6E06               	movwf	(___aldiv@divisor+1)^0,c
  3550  000864  0E00               	movlw	0
  3551  000866  6E07               	movwf	(___aldiv@divisor+2)^0,c
  3552  000868  0E00               	movlw	0
  3553  00086A  6E08               	movwf	(___aldiv@divisor+3)^0,c
  3554  00086C  C043  F001         	movff	washTwo@cont,___aldiv@dividend
  3555  000870  C044  F002         	movff	washTwo@cont+1,___aldiv@dividend+1
  3556  000874  C045  F003         	movff	washTwo@cont+2,___aldiv@dividend+2
  3557  000878  C046  F004         	movff	washTwo@cont+3,___aldiv@dividend+3
  3558  00087C  ECC5  F016         	call	___aldiv	;wreg free
  3559  000880  C001  F00F         	movff	?___aldiv,___almod@dividend
  3560  000884  C002  F010         	movff	?___aldiv+1,___almod@dividend+1
  3561  000888  C003  F011         	movff	?___aldiv+2,___almod@dividend+2
  3562  00088C  C004  F012         	movff	?___aldiv+3,___almod@dividend+3
  3563  000890  0E0A               	movlw	10
  3564  000892  6E13               	movwf	___almod@divisor^0,c
  3565  000894  0E00               	movlw	0
  3566  000896  6E14               	movwf	(___almod@divisor+1)^0,c
  3567  000898  0E00               	movlw	0
  3568  00089A  6E15               	movwf	(___almod@divisor+2)^0,c
  3569  00089C  0E00               	movlw	0
  3570  00089E  6E16               	movwf	(___almod@divisor+3)^0,c
  3571  0008A0  EC49  F019         	call	___almod	;wreg free
  3572  0008A4  BE12               	btfsc	(?___almod+3)^0,7,c
  3573  0008A6  EF62  F004         	goto	u3420
  3574  0008AA  5012               	movf	(?___almod+3)^0,w,c
  3575  0008AC  1011               	iorwf	(?___almod+2)^0,w,c
  3576  0008AE  1010               	iorwf	(?___almod+1)^0,w,c
  3577  0008B0  E107               	bnz	u3421
  3578  0008B2  0E06               	movlw	6
  3579  0008B4  5C0F               	subwf	?___almod^0,w,c
  3580  0008B6  B0D8               	btfsc	status,0,c
  3581  0008B8  EF60  F004         	goto	u3421
  3582  0008BC  EF62  F004         	goto	u3420
  3583  0008C0                     u3421:
  3584  0008C0  EF8B  F004         	goto	l297
  3585  0008C4                     u3420:
  3586  0008C4                     
  3587                           ;washes.c: 216:             ssdDigit(((cont / 100) % 10), 2);
  3588  0008C4  0E02               	movlw	2
  3589  0008C6  6E19               	movwf	ssdDigit@pos^0,c
  3590  0008C8  0E64               	movlw	100
  3591  0008CA  6E05               	movwf	___aldiv@divisor^0,c
  3592  0008CC  0E00               	movlw	0
  3593  0008CE  6E06               	movwf	(___aldiv@divisor+1)^0,c
  3594  0008D0  0E00               	movlw	0
  3595  0008D2  6E07               	movwf	(___aldiv@divisor+2)^0,c
  3596  0008D4  0E00               	movlw	0
  3597  0008D6  6E08               	movwf	(___aldiv@divisor+3)^0,c
  3598  0008D8  C043  F001         	movff	washTwo@cont,___aldiv@dividend
  3599  0008DC  C044  F002         	movff	washTwo@cont+1,___aldiv@dividend+1
  3600  0008E0  C045  F003         	movff	washTwo@cont+2,___aldiv@dividend+2
  3601  0008E4  C046  F004         	movff	washTwo@cont+3,___aldiv@dividend+3
  3602  0008E8  ECC5  F016         	call	___aldiv	;wreg free
  3603  0008EC  C001  F00F         	movff	?___aldiv,___almod@dividend
  3604  0008F0  C002  F010         	movff	?___aldiv+1,___almod@dividend+1
  3605  0008F4  C003  F011         	movff	?___aldiv+2,___almod@dividend+2
  3606  0008F8  C004  F012         	movff	?___aldiv+3,___almod@dividend+3
  3607  0008FC  0E0A               	movlw	10
  3608  0008FE  6E13               	movwf	___almod@divisor^0,c
  3609  000900  0E00               	movlw	0
  3610  000902  6E14               	movwf	(___almod@divisor+1)^0,c
  3611  000904  0E00               	movlw	0
  3612  000906  6E15               	movwf	(___almod@divisor+2)^0,c
  3613  000908  0E00               	movlw	0
  3614  00090A  6E16               	movwf	(___almod@divisor+3)^0,c
  3615  00090C  EC49  F019         	call	___almod	;wreg free
  3616  000910  500F               	movf	?___almod^0,w,c
  3617  000912  ECC4  F01C         	call	_ssdDigit
  3618  000916                     l297:
  3619                           
  3620                           ;washes.c: 218:         if ((cont / 100) % 10 >= 6) {
  3621  000916  0E64               	movlw	100
  3622  000918  6E05               	movwf	___aldiv@divisor^0,c
  3623  00091A  0E00               	movlw	0
  3624  00091C  6E06               	movwf	(___aldiv@divisor+1)^0,c
  3625  00091E  0E00               	movlw	0
  3626  000920  6E07               	movwf	(___aldiv@divisor+2)^0,c
  3627  000922  0E00               	movlw	0
  3628  000924  6E08               	movwf	(___aldiv@divisor+3)^0,c
  3629  000926  C043  F001         	movff	washTwo@cont,___aldiv@dividend
  3630  00092A  C044  F002         	movff	washTwo@cont+1,___aldiv@dividend+1
  3631  00092E  C045  F003         	movff	washTwo@cont+2,___aldiv@dividend+2
  3632  000932  C046  F004         	movff	washTwo@cont+3,___aldiv@dividend+3
  3633  000936  ECC5  F016         	call	___aldiv	;wreg free
  3634  00093A  C001  F00F         	movff	?___aldiv,___almod@dividend
  3635  00093E  C002  F010         	movff	?___aldiv+1,___almod@dividend+1
  3636  000942  C003  F011         	movff	?___aldiv+2,___almod@dividend+2
  3637  000946  C004  F012         	movff	?___aldiv+3,___almod@dividend+3
  3638  00094A  0E0A               	movlw	10
  3639  00094C  6E13               	movwf	___almod@divisor^0,c
  3640  00094E  0E00               	movlw	0
  3641  000950  6E14               	movwf	(___almod@divisor+1)^0,c
  3642  000952  0E00               	movlw	0
  3643  000954  6E15               	movwf	(___almod@divisor+2)^0,c
  3644  000956  0E00               	movlw	0
  3645  000958  6E16               	movwf	(___almod@divisor+3)^0,c
  3646  00095A  EC49  F019         	call	___almod	;wreg free
  3647  00095E  BE12               	btfsc	(?___almod+3)^0,7,c
  3648  000960  EFBD  F004         	goto	u3431
  3649  000964  5012               	movf	(?___almod+3)^0,w,c
  3650  000966  1011               	iorwf	(?___almod+2)^0,w,c
  3651  000968  1010               	iorwf	(?___almod+1)^0,w,c
  3652  00096A  E109               	bnz	u3430
  3653  00096C  0E06               	movlw	6
  3654  00096E  5C0F               	subwf	?___almod^0,w,c
  3655  000970  A0D8               	btfss	status,0,c
  3656  000972  EFBD  F004         	goto	u3431
  3657  000976  EFBF  F004         	goto	u3430
  3658  00097A                     u3431:
  3659  00097A  EF31  F005         	goto	l3513
  3660  00097E                     u3430:
  3661  00097E                     
  3662                           ;washes.c: 219:             for (tempo = 0; tempo < 4; tempo++) {
  3663  00097E  0E00               	movlw	0
  3664  000980  6E3F               	movwf	washTwo@tempo^0,c
  3665  000982  0E00               	movlw	0
  3666  000984  6E40               	movwf	(washTwo@tempo+1)^0,c
  3667  000986  0E00               	movlw	0
  3668  000988  6E41               	movwf	(washTwo@tempo+2)^0,c
  3669  00098A  0E00               	movlw	0
  3670  00098C  6E42               	movwf	(washTwo@tempo+3)^0,c
  3671  00098E  C03F  F001         	movff	washTwo@tempo,___flge@ff1
  3672  000992  C040  F002         	movff	washTwo@tempo+1,___flge@ff1+1
  3673  000996  C041  F003         	movff	washTwo@tempo+2,___flge@ff1+2
  3674  00099A  C042  F004         	movff	washTwo@tempo+3,___flge@ff1+3
  3675  00099E  0E00               	movlw	0
  3676  0009A0  6E05               	movwf	___flge@ff2^0,c
  3677  0009A2  0E00               	movlw	0
  3678  0009A4  6E06               	movwf	(___flge@ff2+1)^0,c
  3679  0009A6  0E80               	movlw	128
  3680  0009A8  6E07               	movwf	(___flge@ff2+2)^0,c
  3681  0009AA  0E40               	movlw	64
  3682  0009AC  6E08               	movwf	(___flge@ff2+3)^0,c
  3683  0009AE  ECCF  F017         	call	___flge	;wreg free
  3684  0009B2  A0D8               	btfss	status,0,c
  3685  0009B4  EFDE  F004         	goto	u3441
  3686  0009B8  EFE0  F004         	goto	u3440
  3687  0009BC                     u3441:
  3688  0009BC  EFE2  F004         	goto	l3499
  3689  0009C0                     u3440:
  3690  0009C0  EF31  F005         	goto	l3513
  3691  0009C4                     l3499:
  3692                           
  3693                           ;washes.c: 220:                 for (i = 0; i < 10; i++) {
  3694  0009C4  0E00               	movlw	0
  3695  0009C6  6E3E               	movwf	(washTwo@i+1)^0,c
  3696  0009C8  0E00               	movlw	0
  3697  0009CA  6E3D               	movwf	washTwo@i^0,c
  3698  0009CC                     l3505:
  3699                           
  3700                           ;washes.c: 221:                     cont--;
  3701  0009CC  0EFF               	movlw	255
  3702  0009CE  2643               	addwf	washTwo@cont^0,f,c
  3703  0009D0  0EFF               	movlw	255
  3704  0009D2  2244               	addwfc	(washTwo@cont+1)^0,f,c
  3705  0009D4  0EFF               	movlw	255
  3706  0009D6  2245               	addwfc	(washTwo@cont+2)^0,f,c
  3707  0009D8  0EFF               	movlw	255
  3708  0009DA  2246               	addwfc	(washTwo@cont+3)^0,f,c
  3709  0009DC                     
  3710                           ;washes.c: 222:                 }
  3711  0009DC  4A3D               	infsnz	washTwo@i^0,f,c
  3712  0009DE  2A3E               	incf	(washTwo@i+1)^0,f,c
  3713  0009E0  BE3E               	btfsc	(washTwo@i+1)^0,7,c
  3714  0009E2  EFFC  F004         	goto	u3451
  3715  0009E6  503E               	movf	(washTwo@i+1)^0,w,c
  3716  0009E8  E109               	bnz	u3450
  3717  0009EA  0E0A               	movlw	10
  3718  0009EC  5C3D               	subwf	washTwo@i^0,w,c
  3719  0009EE  A0D8               	btfss	status,0,c
  3720  0009F0  EFFC  F004         	goto	u3451
  3721  0009F4  EFFE  F004         	goto	u3450
  3722  0009F8                     u3451:
  3723  0009F8  EFE6  F004         	goto	l3505
  3724  0009FC                     u3450:
  3725  0009FC                     
  3726                           ;washes.c: 223:             }
  3727  0009FC  C03F  F001         	movff	washTwo@tempo,___fladd@b
  3728  000A00  C040  F002         	movff	washTwo@tempo+1,___fladd@b+1
  3729  000A04  C041  F003         	movff	washTwo@tempo+2,___fladd@b+2
  3730  000A08  C042  F004         	movff	washTwo@tempo+3,___fladd@b+3
  3731  000A0C  0E00               	movlw	0
  3732  000A0E  6E05               	movwf	___fladd@a^0,c
  3733  000A10  0E00               	movlw	0
  3734  000A12  6E06               	movwf	(___fladd@a+1)^0,c
  3735  000A14  0E80               	movlw	128
  3736  000A16  6E07               	movwf	(___fladd@a+2)^0,c
  3737  000A18  0E3F               	movlw	63
  3738  000A1A  6E08               	movwf	(___fladd@a+3)^0,c
  3739  000A1C  EC04  F00E         	call	___fladd	;wreg free
  3740  000A20  C001  F03F         	movff	?___fladd,washTwo@tempo
  3741  000A24  C002  F040         	movff	?___fladd+1,washTwo@tempo+1
  3742  000A28  C003  F041         	movff	?___fladd+2,washTwo@tempo+2
  3743  000A2C  C004  F042         	movff	?___fladd+3,washTwo@tempo+3
  3744  000A30  C03F  F001         	movff	washTwo@tempo,___flge@ff1
  3745  000A34  C040  F002         	movff	washTwo@tempo+1,___flge@ff1+1
  3746  000A38  C041  F003         	movff	washTwo@tempo+2,___flge@ff1+2
  3747  000A3C  C042  F004         	movff	washTwo@tempo+3,___flge@ff1+3
  3748  000A40  0E00               	movlw	0
  3749  000A42  6E05               	movwf	___flge@ff2^0,c
  3750  000A44  0E00               	movlw	0
  3751  000A46  6E06               	movwf	(___flge@ff2+1)^0,c
  3752  000A48  0E80               	movlw	128
  3753  000A4A  6E07               	movwf	(___flge@ff2+2)^0,c
  3754  000A4C  0E40               	movlw	64
  3755  000A4E  6E08               	movwf	(___flge@ff2+3)^0,c
  3756  000A50  ECCF  F017         	call	___flge	;wreg free
  3757  000A54  A0D8               	btfss	status,0,c
  3758  000A56  EF2F  F005         	goto	u3461
  3759  000A5A  EF31  F005         	goto	u3460
  3760  000A5E                     u3461:
  3761  000A5E  EFE2  F004         	goto	l3499
  3762  000A62                     u3460:
  3763  000A62                     l3513:
  3764                           
  3765                           ;washes.c: 226:         delayAux(2);
  3766  000A62  0E00               	movlw	0
  3767  000A64  6E02               	movwf	(delayAux@i+1)^0,c
  3768  000A66  0E02               	movlw	2
  3769  000A68  6E01               	movwf	delayAux@i^0,c
  3770  000A6A  ECA2  F01D         	call	_delayAux	;wreg free
  3771                           
  3772                           ;washes.c: 227:         ssdDigit(((cont / 1000) % 10), 1);
  3773  000A6E  0E01               	movlw	1
  3774  000A70  6E19               	movwf	ssdDigit@pos^0,c
  3775  000A72  0EE8               	movlw	232
  3776  000A74  6E05               	movwf	___aldiv@divisor^0,c
  3777  000A76  0E03               	movlw	3
  3778  000A78  6E06               	movwf	(___aldiv@divisor+1)^0,c
  3779  000A7A  0E00               	movlw	0
  3780  000A7C  6E07               	movwf	(___aldiv@divisor+2)^0,c
  3781  000A7E  0E00               	movlw	0
  3782  000A80  6E08               	movwf	(___aldiv@divisor+3)^0,c
  3783  000A82  C043  F001         	movff	washTwo@cont,___aldiv@dividend
  3784  000A86  C044  F002         	movff	washTwo@cont+1,___aldiv@dividend+1
  3785  000A8A  C045  F003         	movff	washTwo@cont+2,___aldiv@dividend+2
  3786  000A8E  C046  F004         	movff	washTwo@cont+3,___aldiv@dividend+3
  3787  000A92  ECC5  F016         	call	___aldiv	;wreg free
  3788  000A96  C001  F00F         	movff	?___aldiv,___almod@dividend
  3789  000A9A  C002  F010         	movff	?___aldiv+1,___almod@dividend+1
  3790  000A9E  C003  F011         	movff	?___aldiv+2,___almod@dividend+2
  3791  000AA2  C004  F012         	movff	?___aldiv+3,___almod@dividend+3
  3792  000AA6  0E0A               	movlw	10
  3793  000AA8  6E13               	movwf	___almod@divisor^0,c
  3794  000AAA  0E00               	movlw	0
  3795  000AAC  6E14               	movwf	(___almod@divisor+1)^0,c
  3796  000AAE  0E00               	movlw	0
  3797  000AB0  6E15               	movwf	(___almod@divisor+2)^0,c
  3798  000AB2  0E00               	movlw	0
  3799  000AB4  6E16               	movwf	(___almod@divisor+3)^0,c
  3800  000AB6  EC49  F019         	call	___almod	;wreg free
  3801  000ABA  500F               	movf	?___almod^0,w,c
  3802  000ABC  ECC4  F01C         	call	_ssdDigit
  3803                           
  3804                           ;washes.c: 228:         delayAux(2);
  3805  000AC0  0E00               	movlw	0
  3806  000AC2  6E02               	movwf	(delayAux@i+1)^0,c
  3807  000AC4  0E02               	movlw	2
  3808  000AC6  6E01               	movwf	delayAux@i^0,c
  3809  000AC8  ECA2  F01D         	call	_delayAux	;wreg free
  3810                           
  3811                           ;washes.c: 229:         ssdDigit(((cont / 10000) % 10), 0);
  3812  000ACC  0E00               	movlw	0
  3813  000ACE  6E19               	movwf	ssdDigit@pos^0,c
  3814  000AD0  0E10               	movlw	16
  3815  000AD2  6E05               	movwf	___aldiv@divisor^0,c
  3816  000AD4  0E27               	movlw	39
  3817  000AD6  6E06               	movwf	(___aldiv@divisor+1)^0,c
  3818  000AD8  0E00               	movlw	0
  3819  000ADA  6E07               	movwf	(___aldiv@divisor+2)^0,c
  3820  000ADC  0E00               	movlw	0
  3821  000ADE  6E08               	movwf	(___aldiv@divisor+3)^0,c
  3822  000AE0  C043  F001         	movff	washTwo@cont,___aldiv@dividend
  3823  000AE4  C044  F002         	movff	washTwo@cont+1,___aldiv@dividend+1
  3824  000AE8  C045  F003         	movff	washTwo@cont+2,___aldiv@dividend+2
  3825  000AEC  C046  F004         	movff	washTwo@cont+3,___aldiv@dividend+3
  3826  000AF0  ECC5  F016         	call	___aldiv	;wreg free
  3827  000AF4  C001  F00F         	movff	?___aldiv,___almod@dividend
  3828  000AF8  C002  F010         	movff	?___aldiv+1,___almod@dividend+1
  3829  000AFC  C003  F011         	movff	?___aldiv+2,___almod@dividend+2
  3830  000B00  C004  F012         	movff	?___aldiv+3,___almod@dividend+3
  3831  000B04  0E0A               	movlw	10
  3832  000B06  6E13               	movwf	___almod@divisor^0,c
  3833  000B08  0E00               	movlw	0
  3834  000B0A  6E14               	movwf	(___almod@divisor+1)^0,c
  3835  000B0C  0E00               	movlw	0
  3836  000B0E  6E15               	movwf	(___almod@divisor+2)^0,c
  3837  000B10  0E00               	movlw	0
  3838  000B12  6E16               	movwf	(___almod@divisor+3)^0,c
  3839  000B14  EC49  F019         	call	___almod	;wreg free
  3840  000B18  500F               	movf	?___almod^0,w,c
  3841  000B1A  ECC4  F01C         	call	_ssdDigit
  3842                           
  3843                           ;washes.c: 230:         delayAux(2);
  3844  000B1E  0E00               	movlw	0
  3845  000B20  6E02               	movwf	(delayAux@i+1)^0,c
  3846  000B22  0E02               	movlw	2
  3847  000B24  6E01               	movwf	delayAux@i^0,c
  3848  000B26  ECA2  F01D         	call	_delayAux	;wreg free
  3849  000B2A                     
  3850                           ;washes.c: 231:         ssdUpdate();
  3851  000B2A  EC1D  F016         	call	_ssdUpdate	;wreg free
  3852  000B2E                     
  3853                           ;washes.c: 232:         delayAux(2);
  3854  000B2E  0E00               	movlw	0
  3855  000B30  6E02               	movwf	(delayAux@i+1)^0,c
  3856  000B32  0E02               	movlw	2
  3857  000B34  6E01               	movwf	delayAux@i^0,c
  3858  000B36  ECA2  F01D         	call	_delayAux	;wreg free
  3859  000B3A                     
  3860                           ;washes.c: 233:         c--;
  3861  000B3A  063B               	decf	washTwo@c^0,f,c
  3862  000B3C  A0D8               	btfss	status,0,c
  3863  000B3E  063C               	decf	(washTwo@c+1)^0,f,c
  3864  000B40                     l3521:
  3865                           
  3866                           ;washes.c: 181:     while (cont >= 0) {
  3867  000B40  BE46               	btfsc	(washTwo@cont+3)^0,7,c
  3868  000B42  EFA7  F005         	goto	u3470
  3869  000B46  EFA5  F005         	goto	u3471
  3870  000B4A                     u3471:
  3871  000B4A  EF47  F003         	goto	l3445
  3872  000B4E                     u3470:
  3873  000B4E                     
  3874                           ;washes.c: 237:     PORTA = 0x00;
  3875  000B4E  0E00               	movlw	0
  3876  000B50  6E80               	movwf	128,c	;volatile
  3877  000B52                     
  3878                           ;washes.c: 238:     pwmSet1(0);
  3879  000B52  0E00               	movlw	0
  3880  000B54  ECF2  F01B         	call	_pwmSet1
  3881  000B58                     
  3882                           ;washes.c: 240:     printf("Finalizada!", 10);
  3883  000B58  0E12               	movlw	low STR_1
  3884  000B5A  6E09               	movwf	printf@msg^0,c
  3885  000B5C  0E06               	movlw	high STR_1
  3886  000B5E  6E0A               	movwf	(printf@msg+1)^0,c
  3887  000B60  0E00               	movlw	0
  3888  000B62  6E0C               	movwf	(printf@j+1)^0,c
  3889  000B64  0E0A               	movlw	10
  3890  000B66  6E0B               	movwf	printf@j^0,c
  3891  000B68  ECBF  F019         	call	_printf	;wreg free
  3892  000B6C                     
  3893                           ;washes.c: 243:     buzzer();
  3894  000B6C  EC5E  F01C         	call	_buzzer	;wreg free
  3895  000B70                     
  3896                           ;washes.c: 245:     PORTB = 0x00;
  3897  000B70  0E00               	movlw	0
  3898  000B72  6E81               	movwf	129,c	;volatile
  3899  000B74                     
  3900                           ;washes.c: 246:     PORTD = 0x00;
  3901  000B74  0E00               	movlw	0
  3902  000B76  6E83               	movwf	131,c	;volatile
  3903  000B78                     
  3904                           ;washes.c: 248:     delay(3000);
  3905  000B78  0E0B               	movlw	11
  3906  000B7A  6E02               	movwf	(delay@temp+1)^0,c
  3907  000B7C  0EB8               	movlw	184
  3908  000B7E  6E01               	movwf	delay@temp^0,c
  3909  000B80  EC92  F01C         	call	_delay	;wreg free
  3910  000B84                     
  3911                           ;washes.c: 250:     printf(msg5, 64);
  3912  000B84  0EB0               	movlw	low _msg5
  3913  000B86  6E09               	movwf	printf@msg^0,c
  3914  000B88  0E03               	movlw	high _msg5
  3915  000B8A  6E0A               	movwf	(printf@msg+1)^0,c
  3916  000B8C  0E00               	movlw	0
  3917  000B8E  6E0C               	movwf	(printf@j+1)^0,c
  3918  000B90  0E40               	movlw	64
  3919  000B92  6E0B               	movwf	printf@j^0,c
  3920  000B94  ECBF  F019         	call	_printf	;wreg free
  3921  000B98  0012               	return		;funcret
  3922  000B9A                     __end_of_washTwo:
  3923                           	callstack 0
  3924                           
  3925 ;; *************** function _washThree *****************
  3926 ;; Defined at:
  3927 ;;		line 253 in file "washes.c"
  3928 ;; Parameters:    Size  Location     Type
  3929 ;;		None
  3930 ;; Auto vars:     Size  Location     Type
  3931 ;;  msg            32   26[COMRAM] unsigned char [32]
  3932 ;;  cont            4   66[COMRAM] long 
  3933 ;;  tempo           4   62[COMRAM] float 
  3934 ;;  i               2   60[COMRAM] int 
  3935 ;;  c               2   58[COMRAM] int 
  3936 ;; Return value:  Size  Location     Type
  3937 ;;                  1    wreg      void 
  3938 ;; Registers used:
  3939 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3940 ;; Tracked objects:
  3941 ;;		On entry : 0/0
  3942 ;;		On exit  : 0/0
  3943 ;;		Unchanged: 0/0
  3944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3945 ;;      Params:         0       0       0       0       0       0       0
  3946 ;;      Locals:        44       0       0       0       0       0       0
  3947 ;;      Temps:          0       0       0       0       0       0       0
  3948 ;;      Totals:        44       0       0       0       0       0       0
  3949 ;;Total ram usage:       44 bytes
  3950 ;; Hardware stack levels used: 1
  3951 ;; Hardware stack levels required when called: 4
  3952 ;; This function calls:
  3953 ;;		___aldiv
  3954 ;;		___almod
  3955 ;;		___fladd
  3956 ;;		___flge
  3957 ;;		_buzzer
  3958 ;;		_delay
  3959 ;;		_delayAux
  3960 ;;		_lcdCommand
  3961 ;;		_lcdPosition
  3962 ;;		_printf
  3963 ;;		_pwmSet1
  3964 ;;		_ssdDigit
  3965 ;;		_ssdUpdate
  3966 ;; This function is called by:
  3967 ;;		_kpOptions2
  3968 ;; This function uses a non-reentrant model
  3969 ;;
  3970                           
  3971                           	psect	text10
  3972  000B9A                     __ptext10:
  3973                           	callstack 0
  3974  000B9A                     _washThree:
  3975                           	callstack 23
  3976  000B9A                     
  3977                           ;washes.c: 254:     float tempo;;washes.c: 255:     int c, i;;washes.c: 256:     long in
      +                          t cont = 4000;
  3978  000B9A  0EA0               	movlw	160
  3979  000B9C  6E43               	movwf	washThree@cont^0,c
  3980  000B9E  0E0F               	movlw	15
  3981  000BA0  6E44               	movwf	(washThree@cont+1)^0,c
  3982  000BA2  0E00               	movlw	0
  3983  000BA4  6E45               	movwf	(washThree@cont+2)^0,c
  3984  000BA6  0E00               	movlw	0
  3985  000BA8  6E46               	movwf	(washThree@cont+3)^0,c
  3986  000BAA                     
  3987                           ;washes.c: 258:     char msg[32] = "Iniciando       Lavagem rapida";
  3988  000BAA  EE23  F090         	lfsr	2,washThree@F2425
  3989  000BAE  EE10  F01B         	lfsr	1,washThree@msg
  3990  000BB2  0E1F               	movlw	31
  3991  000BB4                     u3481:
  3992  000BB4  CFDB FFE3          	movff	plusw2,plusw1
  3993  000BB8  06E8               	decf	wreg,f,c
  3994  000BBA  E2FC               	bc	u3481
  3995  000BBC                     
  3996                           ;washes.c: 260:     printf(msg, 32);
  3997  000BBC  0E1B               	movlw	low washThree@msg
  3998  000BBE  6E09               	movwf	printf@msg^0,c
  3999  000BC0  0E00               	movlw	high washThree@msg
  4000  000BC2  6E0A               	movwf	(printf@msg+1)^0,c
  4001  000BC4  0E00               	movlw	0
  4002  000BC6  6E0C               	movwf	(printf@j+1)^0,c
  4003  000BC8  0E20               	movlw	32
  4004  000BCA  6E0B               	movwf	printf@j^0,c
  4005  000BCC  ECBF  F019         	call	_printf	;wreg free
  4006  000BD0                     
  4007                           ;washes.c: 261:     delay(2000);
  4008  000BD0  0E07               	movlw	7
  4009  000BD2  6E02               	movwf	(delay@temp+1)^0,c
  4010  000BD4  0ED0               	movlw	208
  4011  000BD6  6E01               	movwf	delay@temp^0,c
  4012  000BD8  EC92  F01C         	call	_delay	;wreg free
  4013  000BDC                     
  4014                           ;washes.c: 263:     printf(msg1, 32);
  4015  000BDC  0EE0               	movlw	low _msg1
  4016  000BDE  6E09               	movwf	printf@msg^0,c
  4017  000BE0  0E01               	movlw	high _msg1
  4018  000BE2  6E0A               	movwf	(printf@msg+1)^0,c
  4019  000BE4  0E00               	movlw	0
  4020  000BE6  6E0C               	movwf	(printf@j+1)^0,c
  4021  000BE8  0E20               	movlw	32
  4022  000BEA  6E0B               	movwf	printf@j^0,c
  4023  000BEC  ECBF  F019         	call	_printf	;wreg free
  4024  000BF0                     
  4025                           ;washes.c: 264:     lcdPosition(0, 15);
  4026  000BF0  0E0F               	movlw	15
  4027  000BF2  6E09               	movwf	lcdPosition@col^0,c
  4028  000BF4  0E00               	movlw	0
  4029  000BF6  EC85  F01D         	call	_lcdPosition
  4030  000BFA                     
  4031                           ;washes.c: 265:     lcdCommand(0x0F);
  4032  000BFA  0E0F               	movlw	15
  4033  000BFC  EC3D  F01B         	call	_lcdCommand
  4034  000C00                     
  4035                           ;washes.c: 267:     PORTC = 0x01;
  4036  000C00  0E01               	movlw	1
  4037  000C02  6E82               	movwf	130,c	;volatile
  4038                           
  4039                           ;washes.c: 268:     while (cont >= 0) {
  4040  000C04  EF5D  F008         	goto	l3631
  4041  000C08                     l3555:
  4042                           
  4043                           ;washes.c: 269:         if (c == 0) {
  4044  000C08  503B               	movf	washThree@c^0,w,c
  4045  000C0A  103C               	iorwf	(washThree@c+1)^0,w,c
  4046  000C0C  A4D8               	btfss	status,2,c
  4047  000C0E  EF0B  F006         	goto	u3491
  4048  000C12  EF0D  F006         	goto	u3490
  4049  000C16                     u3491:
  4050  000C16  EF19  F006         	goto	l3561
  4051  000C1A                     u3490:
  4052  000C1A                     
  4053                           ;washes.c: 270:             cont--;
  4054  000C1A  0EFF               	movlw	255
  4055  000C1C  2643               	addwf	washThree@cont^0,f,c
  4056  000C1E  0EFF               	movlw	255
  4057  000C20  2244               	addwfc	(washThree@cont+1)^0,f,c
  4058  000C22  0EFF               	movlw	255
  4059  000C24  2245               	addwfc	(washThree@cont+2)^0,f,c
  4060  000C26  0EFF               	movlw	255
  4061  000C28  2246               	addwfc	(washThree@cont+3)^0,f,c
  4062  000C2A                     
  4063                           ;washes.c: 271:             c = 12;
  4064  000C2A  0E00               	movlw	0
  4065  000C2C  6E3C               	movwf	(washThree@c+1)^0,c
  4066  000C2E  0E0C               	movlw	12
  4067  000C30  6E3B               	movwf	washThree@c^0,c
  4068  000C32                     l3561:
  4069                           
  4070                           ;washes.c: 274:         if (cont == 3000) {
  4071  000C32  0EB8               	movlw	184
  4072  000C34  1843               	xorwf	washThree@cont^0,w,c
  4073  000C36  E109               	bnz	u3501
  4074  000C38  0E0B               	movlw	11
  4075  000C3A  1844               	xorwf	(washThree@cont+1)^0,w,c
  4076  000C3C  1045               	iorwf	(washThree@cont+2)^0,w,c
  4077  000C3E  1046               	iorwf	(washThree@cont+3)^0,w,c
  4078  000C40  A4D8               	btfss	status,2,c
  4079  000C42  EF25  F006         	goto	u3501
  4080  000C46  EF27  F006         	goto	u3500
  4081  000C4A                     u3501:
  4082  000C4A  EF3E  F006         	goto	l3573
  4083  000C4E                     u3500:
  4084  000C4E                     
  4085                           ;washes.c: 275:             pwmSet1(50);
  4086  000C4E  0E32               	movlw	50
  4087  000C50  ECF2  F01B         	call	_pwmSet1
  4088  000C54                     
  4089                           ;washes.c: 276:             PORTC = 0x00;
  4090  000C54  0E00               	movlw	0
  4091  000C56  6E82               	movwf	130,c	;volatile
  4092  000C58                     
  4093                           ;washes.c: 277:             printf(msg2, 32);
  4094  000C58  0EC0               	movlw	low _msg2
  4095  000C5A  6E09               	movwf	printf@msg^0,c
  4096  000C5C  0E01               	movlw	high _msg2
  4097  000C5E  6E0A               	movwf	(printf@msg+1)^0,c
  4098  000C60  0E00               	movlw	0
  4099  000C62  6E0C               	movwf	(printf@j+1)^0,c
  4100  000C64  0E20               	movlw	32
  4101  000C66  6E0B               	movwf	printf@j^0,c
  4102  000C68  ECBF  F019         	call	_printf	;wreg free
  4103  000C6C                     
  4104                           ;washes.c: 278:             lcdPosition(0, 10);
  4105  000C6C  0E0A               	movlw	10
  4106  000C6E  6E09               	movwf	lcdPosition@col^0,c
  4107  000C70  0E00               	movlw	0
  4108  000C72  EC85  F01D         	call	_lcdPosition
  4109  000C76                     
  4110                           ;washes.c: 279:             lcdCommand(0x0F);
  4111  000C76  0E0F               	movlw	15
  4112  000C78  EC3D  F01B         	call	_lcdCommand
  4113  000C7C                     l3573:
  4114                           
  4115                           ;washes.c: 282:         if (cont == 2000) {
  4116  000C7C  0ED0               	movlw	208
  4117  000C7E  1843               	xorwf	washThree@cont^0,w,c
  4118  000C80  E109               	bnz	u3511
  4119  000C82  0E07               	movlw	7
  4120  000C84  1844               	xorwf	(washThree@cont+1)^0,w,c
  4121  000C86  1045               	iorwf	(washThree@cont+2)^0,w,c
  4122  000C88  1046               	iorwf	(washThree@cont+3)^0,w,c
  4123  000C8A  A4D8               	btfss	status,2,c
  4124  000C8C  EF4A  F006         	goto	u3511
  4125  000C90  EF4C  F006         	goto	u3510
  4126  000C94                     u3511:
  4127  000C94  EF63  F006         	goto	l3585
  4128  000C98                     u3510:
  4129  000C98                     
  4130                           ;washes.c: 283:             pwmSet1(0);
  4131  000C98  0E00               	movlw	0
  4132  000C9A  ECF2  F01B         	call	_pwmSet1
  4133  000C9E                     
  4134                           ;washes.c: 284:             PORTE = 0x01;
  4135  000C9E  0E01               	movlw	1
  4136  000CA0  6E84               	movwf	132,c	;volatile
  4137  000CA2                     
  4138                           ;washes.c: 285:             printf(msg3, 32);
  4139  000CA2  0EE0               	movlw	low _msg3
  4140  000CA4  6E09               	movwf	printf@msg^0,c
  4141  000CA6  0E02               	movlw	high _msg3
  4142  000CA8  6E0A               	movwf	(printf@msg+1)^0,c
  4143  000CAA  0E00               	movlw	0
  4144  000CAC  6E0C               	movwf	(printf@j+1)^0,c
  4145  000CAE  0E20               	movlw	32
  4146  000CB0  6E0B               	movwf	printf@j^0,c
  4147  000CB2  ECBF  F019         	call	_printf	;wreg free
  4148  000CB6                     
  4149                           ;washes.c: 286:             lcdPosition(0, 13);
  4150  000CB6  0E0D               	movlw	13
  4151  000CB8  6E09               	movwf	lcdPosition@col^0,c
  4152  000CBA  0E00               	movlw	0
  4153  000CBC  EC85  F01D         	call	_lcdPosition
  4154  000CC0                     
  4155                           ;washes.c: 287:             lcdCommand(0x0F);
  4156  000CC0  0E0F               	movlw	15
  4157  000CC2  EC3D  F01B         	call	_lcdCommand
  4158  000CC6                     l3585:
  4159                           
  4160                           ;washes.c: 290:         if (cont == 1000) {
  4161  000CC6  0EE8               	movlw	232
  4162  000CC8  1843               	xorwf	washThree@cont^0,w,c
  4163  000CCA  E109               	bnz	u3521
  4164  000CCC  0E03               	movlw	3
  4165  000CCE  1844               	xorwf	(washThree@cont+1)^0,w,c
  4166  000CD0  1045               	iorwf	(washThree@cont+2)^0,w,c
  4167  000CD2  1046               	iorwf	(washThree@cont+3)^0,w,c
  4168  000CD4  A4D8               	btfss	status,2,c
  4169  000CD6  EF6F  F006         	goto	u3521
  4170  000CDA  EF71  F006         	goto	u3520
  4171  000CDE                     u3521:
  4172  000CDE  EF88  F006         	goto	l3597
  4173  000CE2                     u3520:
  4174  000CE2                     
  4175                           ;washes.c: 291:             PORTE = 0x00;
  4176  000CE2  0E00               	movlw	0
  4177  000CE4  6E84               	movwf	132,c	;volatile
  4178  000CE6                     
  4179                           ;washes.c: 292:             pwmSet1(50);
  4180  000CE6  0E32               	movlw	50
  4181  000CE8  ECF2  F01B         	call	_pwmSet1
  4182  000CEC                     
  4183                           ;washes.c: 293:             printf(msg4, 32);
  4184  000CEC  0EC0               	movlw	low _msg4
  4185  000CEE  6E09               	movwf	printf@msg^0,c
  4186  000CF0  0E02               	movlw	high _msg4
  4187  000CF2  6E0A               	movwf	(printf@msg+1)^0,c
  4188  000CF4  0E00               	movlw	0
  4189  000CF6  6E0C               	movwf	(printf@j+1)^0,c
  4190  000CF8  0E20               	movlw	32
  4191  000CFA  6E0B               	movwf	printf@j^0,c
  4192  000CFC  ECBF  F019         	call	_printf	;wreg free
  4193  000D00                     
  4194                           ;washes.c: 294:             lcdPosition(0, 10);
  4195  000D00  0E0A               	movlw	10
  4196  000D02  6E09               	movwf	lcdPosition@col^0,c
  4197  000D04  0E00               	movlw	0
  4198  000D06  EC85  F01D         	call	_lcdPosition
  4199  000D0A                     
  4200                           ;washes.c: 295:             lcdCommand(0x0F);
  4201  000D0A  0E0F               	movlw	15
  4202  000D0C  EC3D  F01B         	call	_lcdCommand
  4203  000D10                     l3597:
  4204                           
  4205                           ;washes.c: 298:         if ((cont / 100) % 10 < 6) {
  4206  000D10  0E64               	movlw	100
  4207  000D12  6E05               	movwf	___aldiv@divisor^0,c
  4208  000D14  0E00               	movlw	0
  4209  000D16  6E06               	movwf	(___aldiv@divisor+1)^0,c
  4210  000D18  0E00               	movlw	0
  4211  000D1A  6E07               	movwf	(___aldiv@divisor+2)^0,c
  4212  000D1C  0E00               	movlw	0
  4213  000D1E  6E08               	movwf	(___aldiv@divisor+3)^0,c
  4214  000D20  C043  F001         	movff	washThree@cont,___aldiv@dividend
  4215  000D24  C044  F002         	movff	washThree@cont+1,___aldiv@dividend+1
  4216  000D28  C045  F003         	movff	washThree@cont+2,___aldiv@dividend+2
  4217  000D2C  C046  F004         	movff	washThree@cont+3,___aldiv@dividend+3
  4218  000D30  ECC5  F016         	call	___aldiv	;wreg free
  4219  000D34  C001  F00F         	movff	?___aldiv,___almod@dividend
  4220  000D38  C002  F010         	movff	?___aldiv+1,___almod@dividend+1
  4221  000D3C  C003  F011         	movff	?___aldiv+2,___almod@dividend+2
  4222  000D40  C004  F012         	movff	?___aldiv+3,___almod@dividend+3
  4223  000D44  0E0A               	movlw	10
  4224  000D46  6E13               	movwf	___almod@divisor^0,c
  4225  000D48  0E00               	movlw	0
  4226  000D4A  6E14               	movwf	(___almod@divisor+1)^0,c
  4227  000D4C  0E00               	movlw	0
  4228  000D4E  6E15               	movwf	(___almod@divisor+2)^0,c
  4229  000D50  0E00               	movlw	0
  4230  000D52  6E16               	movwf	(___almod@divisor+3)^0,c
  4231  000D54  EC49  F019         	call	___almod	;wreg free
  4232  000D58  BE12               	btfsc	(?___almod+3)^0,7,c
  4233  000D5A  EFBC  F006         	goto	u3530
  4234  000D5E  5012               	movf	(?___almod+3)^0,w,c
  4235  000D60  1011               	iorwf	(?___almod+2)^0,w,c
  4236  000D62  1010               	iorwf	(?___almod+1)^0,w,c
  4237  000D64  E107               	bnz	u3531
  4238  000D66  0E06               	movlw	6
  4239  000D68  5C0F               	subwf	?___almod^0,w,c
  4240  000D6A  B0D8               	btfsc	status,0,c
  4241  000D6C  EFBA  F006         	goto	u3531
  4242  000D70  EFBC  F006         	goto	u3530
  4243  000D74                     u3531:
  4244  000D74  EFE5  F006         	goto	l315
  4245  000D78                     u3530:
  4246  000D78                     
  4247                           ;washes.c: 299:             ssdDigit(((cont / 10) % 10), 3);
  4248  000D78  0E03               	movlw	3
  4249  000D7A  6E19               	movwf	ssdDigit@pos^0,c
  4250  000D7C  0E0A               	movlw	10
  4251  000D7E  6E05               	movwf	___aldiv@divisor^0,c
  4252  000D80  0E00               	movlw	0
  4253  000D82  6E06               	movwf	(___aldiv@divisor+1)^0,c
  4254  000D84  0E00               	movlw	0
  4255  000D86  6E07               	movwf	(___aldiv@divisor+2)^0,c
  4256  000D88  0E00               	movlw	0
  4257  000D8A  6E08               	movwf	(___aldiv@divisor+3)^0,c
  4258  000D8C  C043  F001         	movff	washThree@cont,___aldiv@dividend
  4259  000D90  C044  F002         	movff	washThree@cont+1,___aldiv@dividend+1
  4260  000D94  C045  F003         	movff	washThree@cont+2,___aldiv@dividend+2
  4261  000D98  C046  F004         	movff	washThree@cont+3,___aldiv@dividend+3
  4262  000D9C  ECC5  F016         	call	___aldiv	;wreg free
  4263  000DA0  C001  F00F         	movff	?___aldiv,___almod@dividend
  4264  000DA4  C002  F010         	movff	?___aldiv+1,___almod@dividend+1
  4265  000DA8  C003  F011         	movff	?___aldiv+2,___almod@dividend+2
  4266  000DAC  C004  F012         	movff	?___aldiv+3,___almod@dividend+3
  4267  000DB0  0E0A               	movlw	10
  4268  000DB2  6E13               	movwf	___almod@divisor^0,c
  4269  000DB4  0E00               	movlw	0
  4270  000DB6  6E14               	movwf	(___almod@divisor+1)^0,c
  4271  000DB8  0E00               	movlw	0
  4272  000DBA  6E15               	movwf	(___almod@divisor+2)^0,c
  4273  000DBC  0E00               	movlw	0
  4274  000DBE  6E16               	movwf	(___almod@divisor+3)^0,c
  4275  000DC0  EC49  F019         	call	___almod	;wreg free
  4276  000DC4  500F               	movf	?___almod^0,w,c
  4277  000DC6  ECC4  F01C         	call	_ssdDigit
  4278  000DCA                     l315:
  4279                           
  4280                           ;washes.c: 301:         delayAux(2);
  4281  000DCA  0E00               	movlw	0
  4282  000DCC  6E02               	movwf	(delayAux@i+1)^0,c
  4283  000DCE  0E02               	movlw	2
  4284  000DD0  6E01               	movwf	delayAux@i^0,c
  4285  000DD2  ECA2  F01D         	call	_delayAux	;wreg free
  4286                           
  4287                           ;washes.c: 302:         if ((cont / 100) % 10 < 6) {
  4288  000DD6  0E64               	movlw	100
  4289  000DD8  6E05               	movwf	___aldiv@divisor^0,c
  4290  000DDA  0E00               	movlw	0
  4291  000DDC  6E06               	movwf	(___aldiv@divisor+1)^0,c
  4292  000DDE  0E00               	movlw	0
  4293  000DE0  6E07               	movwf	(___aldiv@divisor+2)^0,c
  4294  000DE2  0E00               	movlw	0
  4295  000DE4  6E08               	movwf	(___aldiv@divisor+3)^0,c
  4296  000DE6  C043  F001         	movff	washThree@cont,___aldiv@dividend
  4297  000DEA  C044  F002         	movff	washThree@cont+1,___aldiv@dividend+1
  4298  000DEE  C045  F003         	movff	washThree@cont+2,___aldiv@dividend+2
  4299  000DF2  C046  F004         	movff	washThree@cont+3,___aldiv@dividend+3
  4300  000DF6  ECC5  F016         	call	___aldiv	;wreg free
  4301  000DFA  C001  F00F         	movff	?___aldiv,___almod@dividend
  4302  000DFE  C002  F010         	movff	?___aldiv+1,___almod@dividend+1
  4303  000E02  C003  F011         	movff	?___aldiv+2,___almod@dividend+2
  4304  000E06  C004  F012         	movff	?___aldiv+3,___almod@dividend+3
  4305  000E0A  0E0A               	movlw	10
  4306  000E0C  6E13               	movwf	___almod@divisor^0,c
  4307  000E0E  0E00               	movlw	0
  4308  000E10  6E14               	movwf	(___almod@divisor+1)^0,c
  4309  000E12  0E00               	movlw	0
  4310  000E14  6E15               	movwf	(___almod@divisor+2)^0,c
  4311  000E16  0E00               	movlw	0
  4312  000E18  6E16               	movwf	(___almod@divisor+3)^0,c
  4313  000E1A  EC49  F019         	call	___almod	;wreg free
  4314  000E1E  BE12               	btfsc	(?___almod+3)^0,7,c
  4315  000E20  EF1F  F007         	goto	u3540
  4316  000E24  5012               	movf	(?___almod+3)^0,w,c
  4317  000E26  1011               	iorwf	(?___almod+2)^0,w,c
  4318  000E28  1010               	iorwf	(?___almod+1)^0,w,c
  4319  000E2A  E107               	bnz	u3541
  4320  000E2C  0E06               	movlw	6
  4321  000E2E  5C0F               	subwf	?___almod^0,w,c
  4322  000E30  B0D8               	btfsc	status,0,c
  4323  000E32  EF1D  F007         	goto	u3541
  4324  000E36  EF1F  F007         	goto	u3540
  4325  000E3A                     u3541:
  4326  000E3A  EF48  F007         	goto	l316
  4327  000E3E                     u3540:
  4328  000E3E                     
  4329                           ;washes.c: 303:             ssdDigit(((cont / 100) % 10), 2);
  4330  000E3E  0E02               	movlw	2
  4331  000E40  6E19               	movwf	ssdDigit@pos^0,c
  4332  000E42  0E64               	movlw	100
  4333  000E44  6E05               	movwf	___aldiv@divisor^0,c
  4334  000E46  0E00               	movlw	0
  4335  000E48  6E06               	movwf	(___aldiv@divisor+1)^0,c
  4336  000E4A  0E00               	movlw	0
  4337  000E4C  6E07               	movwf	(___aldiv@divisor+2)^0,c
  4338  000E4E  0E00               	movlw	0
  4339  000E50  6E08               	movwf	(___aldiv@divisor+3)^0,c
  4340  000E52  C043  F001         	movff	washThree@cont,___aldiv@dividend
  4341  000E56  C044  F002         	movff	washThree@cont+1,___aldiv@dividend+1
  4342  000E5A  C045  F003         	movff	washThree@cont+2,___aldiv@dividend+2
  4343  000E5E  C046  F004         	movff	washThree@cont+3,___aldiv@dividend+3
  4344  000E62  ECC5  F016         	call	___aldiv	;wreg free
  4345  000E66  C001  F00F         	movff	?___aldiv,___almod@dividend
  4346  000E6A  C002  F010         	movff	?___aldiv+1,___almod@dividend+1
  4347  000E6E  C003  F011         	movff	?___aldiv+2,___almod@dividend+2
  4348  000E72  C004  F012         	movff	?___aldiv+3,___almod@dividend+3
  4349  000E76  0E0A               	movlw	10
  4350  000E78  6E13               	movwf	___almod@divisor^0,c
  4351  000E7A  0E00               	movlw	0
  4352  000E7C  6E14               	movwf	(___almod@divisor+1)^0,c
  4353  000E7E  0E00               	movlw	0
  4354  000E80  6E15               	movwf	(___almod@divisor+2)^0,c
  4355  000E82  0E00               	movlw	0
  4356  000E84  6E16               	movwf	(___almod@divisor+3)^0,c
  4357  000E86  EC49  F019         	call	___almod	;wreg free
  4358  000E8A  500F               	movf	?___almod^0,w,c
  4359  000E8C  ECC4  F01C         	call	_ssdDigit
  4360  000E90                     l316:
  4361                           
  4362                           ;washes.c: 305:         if ((cont / 100) % 10 >= 6) {
  4363  000E90  0E64               	movlw	100
  4364  000E92  6E05               	movwf	___aldiv@divisor^0,c
  4365  000E94  0E00               	movlw	0
  4366  000E96  6E06               	movwf	(___aldiv@divisor+1)^0,c
  4367  000E98  0E00               	movlw	0
  4368  000E9A  6E07               	movwf	(___aldiv@divisor+2)^0,c
  4369  000E9C  0E00               	movlw	0
  4370  000E9E  6E08               	movwf	(___aldiv@divisor+3)^0,c
  4371  000EA0  C043  F001         	movff	washThree@cont,___aldiv@dividend
  4372  000EA4  C044  F002         	movff	washThree@cont+1,___aldiv@dividend+1
  4373  000EA8  C045  F003         	movff	washThree@cont+2,___aldiv@dividend+2
  4374  000EAC  C046  F004         	movff	washThree@cont+3,___aldiv@dividend+3
  4375  000EB0  ECC5  F016         	call	___aldiv	;wreg free
  4376  000EB4  C001  F00F         	movff	?___aldiv,___almod@dividend
  4377  000EB8  C002  F010         	movff	?___aldiv+1,___almod@dividend+1
  4378  000EBC  C003  F011         	movff	?___aldiv+2,___almod@dividend+2
  4379  000EC0  C004  F012         	movff	?___aldiv+3,___almod@dividend+3
  4380  000EC4  0E0A               	movlw	10
  4381  000EC6  6E13               	movwf	___almod@divisor^0,c
  4382  000EC8  0E00               	movlw	0
  4383  000ECA  6E14               	movwf	(___almod@divisor+1)^0,c
  4384  000ECC  0E00               	movlw	0
  4385  000ECE  6E15               	movwf	(___almod@divisor+2)^0,c
  4386  000ED0  0E00               	movlw	0
  4387  000ED2  6E16               	movwf	(___almod@divisor+3)^0,c
  4388  000ED4  EC49  F019         	call	___almod	;wreg free
  4389  000ED8  BE12               	btfsc	(?___almod+3)^0,7,c
  4390  000EDA  EF7A  F007         	goto	u3551
  4391  000EDE  5012               	movf	(?___almod+3)^0,w,c
  4392  000EE0  1011               	iorwf	(?___almod+2)^0,w,c
  4393  000EE2  1010               	iorwf	(?___almod+1)^0,w,c
  4394  000EE4  E109               	bnz	u3550
  4395  000EE6  0E06               	movlw	6
  4396  000EE8  5C0F               	subwf	?___almod^0,w,c
  4397  000EEA  A0D8               	btfss	status,0,c
  4398  000EEC  EF7A  F007         	goto	u3551
  4399  000EF0  EF7C  F007         	goto	u3550
  4400  000EF4                     u3551:
  4401  000EF4  EFEE  F007         	goto	l3623
  4402  000EF8                     u3550:
  4403  000EF8                     
  4404                           ;washes.c: 306:             for (tempo = 0; tempo < 4; tempo++) {
  4405  000EF8  0E00               	movlw	0
  4406  000EFA  6E3F               	movwf	washThree@tempo^0,c
  4407  000EFC  0E00               	movlw	0
  4408  000EFE  6E40               	movwf	(washThree@tempo+1)^0,c
  4409  000F00  0E00               	movlw	0
  4410  000F02  6E41               	movwf	(washThree@tempo+2)^0,c
  4411  000F04  0E00               	movlw	0
  4412  000F06  6E42               	movwf	(washThree@tempo+3)^0,c
  4413  000F08  C03F  F001         	movff	washThree@tempo,___flge@ff1
  4414  000F0C  C040  F002         	movff	washThree@tempo+1,___flge@ff1+1
  4415  000F10  C041  F003         	movff	washThree@tempo+2,___flge@ff1+2
  4416  000F14  C042  F004         	movff	washThree@tempo+3,___flge@ff1+3
  4417  000F18  0E00               	movlw	0
  4418  000F1A  6E05               	movwf	___flge@ff2^0,c
  4419  000F1C  0E00               	movlw	0
  4420  000F1E  6E06               	movwf	(___flge@ff2+1)^0,c
  4421  000F20  0E80               	movlw	128
  4422  000F22  6E07               	movwf	(___flge@ff2+2)^0,c
  4423  000F24  0E40               	movlw	64
  4424  000F26  6E08               	movwf	(___flge@ff2+3)^0,c
  4425  000F28  ECCF  F017         	call	___flge	;wreg free
  4426  000F2C  A0D8               	btfss	status,0,c
  4427  000F2E  EF9B  F007         	goto	u3561
  4428  000F32  EF9D  F007         	goto	u3560
  4429  000F36                     u3561:
  4430  000F36  EF9F  F007         	goto	l3609
  4431  000F3A                     u3560:
  4432  000F3A  EFEE  F007         	goto	l3623
  4433  000F3E                     l3609:
  4434                           
  4435                           ;washes.c: 307:                 for (i = 0; i < 10; i++) {
  4436  000F3E  0E00               	movlw	0
  4437  000F40  6E3E               	movwf	(washThree@i+1)^0,c
  4438  000F42  0E00               	movlw	0
  4439  000F44  6E3D               	movwf	washThree@i^0,c
  4440  000F46                     l3615:
  4441                           
  4442                           ;washes.c: 308:                     cont--;
  4443  000F46  0EFF               	movlw	255
  4444  000F48  2643               	addwf	washThree@cont^0,f,c
  4445  000F4A  0EFF               	movlw	255
  4446  000F4C  2244               	addwfc	(washThree@cont+1)^0,f,c
  4447  000F4E  0EFF               	movlw	255
  4448  000F50  2245               	addwfc	(washThree@cont+2)^0,f,c
  4449  000F52  0EFF               	movlw	255
  4450  000F54  2246               	addwfc	(washThree@cont+3)^0,f,c
  4451  000F56                     
  4452                           ;washes.c: 309:                 }
  4453  000F56  4A3D               	infsnz	washThree@i^0,f,c
  4454  000F58  2A3E               	incf	(washThree@i+1)^0,f,c
  4455  000F5A  BE3E               	btfsc	(washThree@i+1)^0,7,c
  4456  000F5C  EFB9  F007         	goto	u3571
  4457  000F60  503E               	movf	(washThree@i+1)^0,w,c
  4458  000F62  E109               	bnz	u3570
  4459  000F64  0E0A               	movlw	10
  4460  000F66  5C3D               	subwf	washThree@i^0,w,c
  4461  000F68  A0D8               	btfss	status,0,c
  4462  000F6A  EFB9  F007         	goto	u3571
  4463  000F6E  EFBB  F007         	goto	u3570
  4464  000F72                     u3571:
  4465  000F72  EFA3  F007         	goto	l3615
  4466  000F76                     u3570:
  4467  000F76                     
  4468                           ;washes.c: 310:             }
  4469  000F76  C03F  F001         	movff	washThree@tempo,___fladd@b
  4470  000F7A  C040  F002         	movff	washThree@tempo+1,___fladd@b+1
  4471  000F7E  C041  F003         	movff	washThree@tempo+2,___fladd@b+2
  4472  000F82  C042  F004         	movff	washThree@tempo+3,___fladd@b+3
  4473  000F86  0E00               	movlw	0
  4474  000F88  6E05               	movwf	___fladd@a^0,c
  4475  000F8A  0E00               	movlw	0
  4476  000F8C  6E06               	movwf	(___fladd@a+1)^0,c
  4477  000F8E  0E80               	movlw	128
  4478  000F90  6E07               	movwf	(___fladd@a+2)^0,c
  4479  000F92  0E3F               	movlw	63
  4480  000F94  6E08               	movwf	(___fladd@a+3)^0,c
  4481  000F96  EC04  F00E         	call	___fladd	;wreg free
  4482  000F9A  C001  F03F         	movff	?___fladd,washThree@tempo
  4483  000F9E  C002  F040         	movff	?___fladd+1,washThree@tempo+1
  4484  000FA2  C003  F041         	movff	?___fladd+2,washThree@tempo+2
  4485  000FA6  C004  F042         	movff	?___fladd+3,washThree@tempo+3
  4486  000FAA  C03F  F001         	movff	washThree@tempo,___flge@ff1
  4487  000FAE  C040  F002         	movff	washThree@tempo+1,___flge@ff1+1
  4488  000FB2  C041  F003         	movff	washThree@tempo+2,___flge@ff1+2
  4489  000FB6  C042  F004         	movff	washThree@tempo+3,___flge@ff1+3
  4490  000FBA  0E00               	movlw	0
  4491  000FBC  6E05               	movwf	___flge@ff2^0,c
  4492  000FBE  0E00               	movlw	0
  4493  000FC0  6E06               	movwf	(___flge@ff2+1)^0,c
  4494  000FC2  0E80               	movlw	128
  4495  000FC4  6E07               	movwf	(___flge@ff2+2)^0,c
  4496  000FC6  0E40               	movlw	64
  4497  000FC8  6E08               	movwf	(___flge@ff2+3)^0,c
  4498  000FCA  ECCF  F017         	call	___flge	;wreg free
  4499  000FCE  A0D8               	btfss	status,0,c
  4500  000FD0  EFEC  F007         	goto	u3581
  4501  000FD4  EFEE  F007         	goto	u3580
  4502  000FD8                     u3581:
  4503  000FD8  EF9F  F007         	goto	l3609
  4504  000FDC                     u3580:
  4505  000FDC                     l3623:
  4506                           
  4507                           ;washes.c: 313:         delayAux(2);
  4508  000FDC  0E00               	movlw	0
  4509  000FDE  6E02               	movwf	(delayAux@i+1)^0,c
  4510  000FE0  0E02               	movlw	2
  4511  000FE2  6E01               	movwf	delayAux@i^0,c
  4512  000FE4  ECA2  F01D         	call	_delayAux	;wreg free
  4513                           
  4514                           ;washes.c: 314:         ssdDigit(((cont / 1000) % 10), 1);
  4515  000FE8  0E01               	movlw	1
  4516  000FEA  6E19               	movwf	ssdDigit@pos^0,c
  4517  000FEC  0EE8               	movlw	232
  4518  000FEE  6E05               	movwf	___aldiv@divisor^0,c
  4519  000FF0  0E03               	movlw	3
  4520  000FF2  6E06               	movwf	(___aldiv@divisor+1)^0,c
  4521  000FF4  0E00               	movlw	0
  4522  000FF6  6E07               	movwf	(___aldiv@divisor+2)^0,c
  4523  000FF8  0E00               	movlw	0
  4524  000FFA  6E08               	movwf	(___aldiv@divisor+3)^0,c
  4525  000FFC  C043  F001         	movff	washThree@cont,___aldiv@dividend
  4526  001000  C044  F002         	movff	washThree@cont+1,___aldiv@dividend+1
  4527  001004  C045  F003         	movff	washThree@cont+2,___aldiv@dividend+2
  4528  001008  C046  F004         	movff	washThree@cont+3,___aldiv@dividend+3
  4529  00100C  ECC5  F016         	call	___aldiv	;wreg free
  4530  001010  C001  F00F         	movff	?___aldiv,___almod@dividend
  4531  001014  C002  F010         	movff	?___aldiv+1,___almod@dividend+1
  4532  001018  C003  F011         	movff	?___aldiv+2,___almod@dividend+2
  4533  00101C  C004  F012         	movff	?___aldiv+3,___almod@dividend+3
  4534  001020  0E0A               	movlw	10
  4535  001022  6E13               	movwf	___almod@divisor^0,c
  4536  001024  0E00               	movlw	0
  4537  001026  6E14               	movwf	(___almod@divisor+1)^0,c
  4538  001028  0E00               	movlw	0
  4539  00102A  6E15               	movwf	(___almod@divisor+2)^0,c
  4540  00102C  0E00               	movlw	0
  4541  00102E  6E16               	movwf	(___almod@divisor+3)^0,c
  4542  001030  EC49  F019         	call	___almod	;wreg free
  4543  001034  500F               	movf	?___almod^0,w,c
  4544  001036  ECC4  F01C         	call	_ssdDigit
  4545                           
  4546                           ;washes.c: 315:         delayAux(2);
  4547  00103A  0E00               	movlw	0
  4548  00103C  6E02               	movwf	(delayAux@i+1)^0,c
  4549  00103E  0E02               	movlw	2
  4550  001040  6E01               	movwf	delayAux@i^0,c
  4551  001042  ECA2  F01D         	call	_delayAux	;wreg free
  4552                           
  4553                           ;washes.c: 316:         ssdDigit(((cont / 10000) % 10), 0);
  4554  001046  0E00               	movlw	0
  4555  001048  6E19               	movwf	ssdDigit@pos^0,c
  4556  00104A  0E10               	movlw	16
  4557  00104C  6E05               	movwf	___aldiv@divisor^0,c
  4558  00104E  0E27               	movlw	39
  4559  001050  6E06               	movwf	(___aldiv@divisor+1)^0,c
  4560  001052  0E00               	movlw	0
  4561  001054  6E07               	movwf	(___aldiv@divisor+2)^0,c
  4562  001056  0E00               	movlw	0
  4563  001058  6E08               	movwf	(___aldiv@divisor+3)^0,c
  4564  00105A  C043  F001         	movff	washThree@cont,___aldiv@dividend
  4565  00105E  C044  F002         	movff	washThree@cont+1,___aldiv@dividend+1
  4566  001062  C045  F003         	movff	washThree@cont+2,___aldiv@dividend+2
  4567  001066  C046  F004         	movff	washThree@cont+3,___aldiv@dividend+3
  4568  00106A  ECC5  F016         	call	___aldiv	;wreg free
  4569  00106E  C001  F00F         	movff	?___aldiv,___almod@dividend
  4570  001072  C002  F010         	movff	?___aldiv+1,___almod@dividend+1
  4571  001076  C003  F011         	movff	?___aldiv+2,___almod@dividend+2
  4572  00107A  C004  F012         	movff	?___aldiv+3,___almod@dividend+3
  4573  00107E  0E0A               	movlw	10
  4574  001080  6E13               	movwf	___almod@divisor^0,c
  4575  001082  0E00               	movlw	0
  4576  001084  6E14               	movwf	(___almod@divisor+1)^0,c
  4577  001086  0E00               	movlw	0
  4578  001088  6E15               	movwf	(___almod@divisor+2)^0,c
  4579  00108A  0E00               	movlw	0
  4580  00108C  6E16               	movwf	(___almod@divisor+3)^0,c
  4581  00108E  EC49  F019         	call	___almod	;wreg free
  4582  001092  500F               	movf	?___almod^0,w,c
  4583  001094  ECC4  F01C         	call	_ssdDigit
  4584                           
  4585                           ;washes.c: 317:         delayAux(2);
  4586  001098  0E00               	movlw	0
  4587  00109A  6E02               	movwf	(delayAux@i+1)^0,c
  4588  00109C  0E02               	movlw	2
  4589  00109E  6E01               	movwf	delayAux@i^0,c
  4590  0010A0  ECA2  F01D         	call	_delayAux	;wreg free
  4591  0010A4                     
  4592                           ;washes.c: 318:         ssdUpdate();
  4593  0010A4  EC1D  F016         	call	_ssdUpdate	;wreg free
  4594  0010A8                     
  4595                           ;washes.c: 319:         delayAux(2);
  4596  0010A8  0E00               	movlw	0
  4597  0010AA  6E02               	movwf	(delayAux@i+1)^0,c
  4598  0010AC  0E02               	movlw	2
  4599  0010AE  6E01               	movwf	delayAux@i^0,c
  4600  0010B0  ECA2  F01D         	call	_delayAux	;wreg free
  4601  0010B4                     
  4602                           ;washes.c: 320:         c--;
  4603  0010B4  063B               	decf	washThree@c^0,f,c
  4604  0010B6  A0D8               	btfss	status,0,c
  4605  0010B8  063C               	decf	(washThree@c+1)^0,f,c
  4606  0010BA                     l3631:
  4607                           
  4608                           ;washes.c: 268:     while (cont >= 0) {
  4609  0010BA  BE46               	btfsc	(washThree@cont+3)^0,7,c
  4610  0010BC  EF64  F008         	goto	u3590
  4611  0010C0  EF62  F008         	goto	u3591
  4612  0010C4                     u3591:
  4613  0010C4  EF04  F006         	goto	l3555
  4614  0010C8                     u3590:
  4615  0010C8                     
  4616                           ;washes.c: 323:     PORTA = 0x00;
  4617  0010C8  0E00               	movlw	0
  4618  0010CA  6E80               	movwf	128,c	;volatile
  4619  0010CC                     
  4620                           ;washes.c: 324:     pwmSet1(0);
  4621  0010CC  0E00               	movlw	0
  4622  0010CE  ECF2  F01B         	call	_pwmSet1
  4623  0010D2                     
  4624                           ;washes.c: 326:     printf("Finalizada!", 10);
  4625  0010D2  0E12               	movlw	low STR_1
  4626  0010D4  6E09               	movwf	printf@msg^0,c
  4627  0010D6  0E06               	movlw	high STR_1
  4628  0010D8  6E0A               	movwf	(printf@msg+1)^0,c
  4629  0010DA  0E00               	movlw	0
  4630  0010DC  6E0C               	movwf	(printf@j+1)^0,c
  4631  0010DE  0E0A               	movlw	10
  4632  0010E0  6E0B               	movwf	printf@j^0,c
  4633  0010E2  ECBF  F019         	call	_printf	;wreg free
  4634  0010E6                     
  4635                           ;washes.c: 328:     buzzer();
  4636  0010E6  EC5E  F01C         	call	_buzzer	;wreg free
  4637  0010EA                     
  4638                           ;washes.c: 330:     PORTB = 0x00;
  4639  0010EA  0E00               	movlw	0
  4640  0010EC  6E81               	movwf	129,c	;volatile
  4641  0010EE                     
  4642                           ;washes.c: 331:     PORTD = 0x00;
  4643  0010EE  0E00               	movlw	0
  4644  0010F0  6E83               	movwf	131,c	;volatile
  4645  0010F2                     
  4646                           ;washes.c: 332:     delay(3000);
  4647  0010F2  0E0B               	movlw	11
  4648  0010F4  6E02               	movwf	(delay@temp+1)^0,c
  4649  0010F6  0EB8               	movlw	184
  4650  0010F8  6E01               	movwf	delay@temp^0,c
  4651  0010FA  EC92  F01C         	call	_delay	;wreg free
  4652  0010FE                     
  4653                           ;washes.c: 335:     printf(msg5, 64);
  4654  0010FE  0EB0               	movlw	low _msg5
  4655  001100  6E09               	movwf	printf@msg^0,c
  4656  001102  0E03               	movlw	high _msg5
  4657  001104  6E0A               	movwf	(printf@msg+1)^0,c
  4658  001106  0E00               	movlw	0
  4659  001108  6E0C               	movwf	(printf@j+1)^0,c
  4660  00110A  0E40               	movlw	64
  4661  00110C  6E0B               	movwf	printf@j^0,c
  4662  00110E  ECBF  F019         	call	_printf	;wreg free
  4663  001112  0012               	return		;funcret
  4664  001114                     __end_of_washThree:
  4665                           	callstack 0
  4666                           
  4667 ;; *************** function _washOne *****************
  4668 ;; Defined at:
  4669 ;;		line 79 in file "washes.c"
  4670 ;; Parameters:    Size  Location     Type
  4671 ;;		None
  4672 ;; Auto vars:     Size  Location     Type
  4673 ;;  msg            32   26[COMRAM] unsigned char [32]
  4674 ;;  cont            4   66[COMRAM] long 
  4675 ;;  tempo           4   62[COMRAM] float 
  4676 ;;  i               2   60[COMRAM] int 
  4677 ;;  c               2   58[COMRAM] int 
  4678 ;; Return value:  Size  Location     Type
  4679 ;;                  1    wreg      void 
  4680 ;; Registers used:
  4681 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4682 ;; Tracked objects:
  4683 ;;		On entry : 0/0
  4684 ;;		On exit  : 0/0
  4685 ;;		Unchanged: 0/0
  4686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4687 ;;      Params:         0       0       0       0       0       0       0
  4688 ;;      Locals:        44       0       0       0       0       0       0
  4689 ;;      Temps:          0       0       0       0       0       0       0
  4690 ;;      Totals:        44       0       0       0       0       0       0
  4691 ;;Total ram usage:       44 bytes
  4692 ;; Hardware stack levels used: 1
  4693 ;; Hardware stack levels required when called: 4
  4694 ;; This function calls:
  4695 ;;		___aldiv
  4696 ;;		___almod
  4697 ;;		___fladd
  4698 ;;		___flge
  4699 ;;		_buzzer
  4700 ;;		_delay
  4701 ;;		_delayAux
  4702 ;;		_lcdCommand
  4703 ;;		_lcdPosition
  4704 ;;		_printf
  4705 ;;		_pwmSet1
  4706 ;;		_ssdDigit
  4707 ;;		_ssdUpdate
  4708 ;; This function is called by:
  4709 ;;		_kpOptions2
  4710 ;; This function uses a non-reentrant model
  4711 ;;
  4712                           
  4713                           	psect	text11
  4714  001114                     __ptext11:
  4715                           	callstack 0
  4716  001114                     _washOne:
  4717                           	callstack 23
  4718  001114                     
  4719                           ;washes.c: 80:     float tempo;;washes.c: 81:     int c, i;;washes.c: 82:     long int c
      +                          ont = 12000;
  4720  001114  0EE0               	movlw	224
  4721  001116  6E43               	movwf	washOne@cont^0,c
  4722  001118  0E2E               	movlw	46
  4723  00111A  6E44               	movwf	(washOne@cont+1)^0,c
  4724  00111C  0E00               	movlw	0
  4725  00111E  6E45               	movwf	(washOne@cont+2)^0,c
  4726  001120  0E00               	movlw	0
  4727  001122  6E46               	movwf	(washOne@cont+3)^0,c
  4728  001124                     
  4729                           ;washes.c: 83:     char msg[32] = "Iniciando       Lavagem pesada";
  4730  001124  EE22  F020         	lfsr	2,washOne@F2411
  4731  001128  EE10  F01B         	lfsr	1,washOne@msg
  4732  00112C  0E1F               	movlw	31
  4733  00112E                     u3241:
  4734  00112E  CFDB FFE3          	movff	plusw2,plusw1
  4735  001132  06E8               	decf	wreg,f,c
  4736  001134  E2FC               	bc	u3241
  4737  001136                     
  4738                           ;washes.c: 85:     printf(msg, 32);
  4739  001136  0E1B               	movlw	low washOne@msg
  4740  001138  6E09               	movwf	printf@msg^0,c
  4741  00113A  0E00               	movlw	high washOne@msg
  4742  00113C  6E0A               	movwf	(printf@msg+1)^0,c
  4743  00113E  0E00               	movlw	0
  4744  001140  6E0C               	movwf	(printf@j+1)^0,c
  4745  001142  0E20               	movlw	32
  4746  001144  6E0B               	movwf	printf@j^0,c
  4747  001146  ECBF  F019         	call	_printf	;wreg free
  4748  00114A                     
  4749                           ;washes.c: 86:     delay(2000);
  4750  00114A  0E07               	movlw	7
  4751  00114C  6E02               	movwf	(delay@temp+1)^0,c
  4752  00114E  0ED0               	movlw	208
  4753  001150  6E01               	movwf	delay@temp^0,c
  4754  001152  EC92  F01C         	call	_delay	;wreg free
  4755  001156                     
  4756                           ;washes.c: 88:     printf(msg1, 32);
  4757  001156  0EE0               	movlw	low _msg1
  4758  001158  6E09               	movwf	printf@msg^0,c
  4759  00115A  0E01               	movlw	high _msg1
  4760  00115C  6E0A               	movwf	(printf@msg+1)^0,c
  4761  00115E  0E00               	movlw	0
  4762  001160  6E0C               	movwf	(printf@j+1)^0,c
  4763  001162  0E20               	movlw	32
  4764  001164  6E0B               	movwf	printf@j^0,c
  4765  001166  ECBF  F019         	call	_printf	;wreg free
  4766  00116A                     
  4767                           ;washes.c: 89:     lcdPosition(0, 15);
  4768  00116A  0E0F               	movlw	15
  4769  00116C  6E09               	movwf	lcdPosition@col^0,c
  4770  00116E  0E00               	movlw	0
  4771  001170  EC85  F01D         	call	_lcdPosition
  4772  001174                     
  4773                           ;washes.c: 90:     lcdCommand(0x0F);
  4774  001174  0E0F               	movlw	15
  4775  001176  EC3D  F01B         	call	_lcdCommand
  4776  00117A                     
  4777                           ;washes.c: 92:     PORTC = 0x01;
  4778  00117A  0E01               	movlw	1
  4779  00117C  6E82               	movwf	130,c	;volatile
  4780                           
  4781                           ;washes.c: 94:     while (cont >= 0) {
  4782  00117E  EF1A  F00B         	goto	l3411
  4783  001182                     l3335:
  4784                           
  4785                           ;washes.c: 95:         if (c == 0) {
  4786  001182  503B               	movf	washOne@c^0,w,c
  4787  001184  103C               	iorwf	(washOne@c+1)^0,w,c
  4788  001186  A4D8               	btfss	status,2,c
  4789  001188  EFC8  F008         	goto	u3251
  4790  00118C  EFCA  F008         	goto	u3250
  4791  001190                     u3251:
  4792  001190  EFD6  F008         	goto	l3341
  4793  001194                     u3250:
  4794  001194                     
  4795                           ;washes.c: 96:             cont--;
  4796  001194  0EFF               	movlw	255
  4797  001196  2643               	addwf	washOne@cont^0,f,c
  4798  001198  0EFF               	movlw	255
  4799  00119A  2244               	addwfc	(washOne@cont+1)^0,f,c
  4800  00119C  0EFF               	movlw	255
  4801  00119E  2245               	addwfc	(washOne@cont+2)^0,f,c
  4802  0011A0  0EFF               	movlw	255
  4803  0011A2  2246               	addwfc	(washOne@cont+3)^0,f,c
  4804  0011A4                     
  4805                           ;washes.c: 97:             c = 12;
  4806  0011A4  0E00               	movlw	0
  4807  0011A6  6E3C               	movwf	(washOne@c+1)^0,c
  4808  0011A8  0E0C               	movlw	12
  4809  0011AA  6E3B               	movwf	washOne@c^0,c
  4810  0011AC                     l3341:
  4811                           
  4812                           ;washes.c: 100:         if (cont == 9000) {
  4813  0011AC  0E28               	movlw	40
  4814  0011AE  1843               	xorwf	washOne@cont^0,w,c
  4815  0011B0  E109               	bnz	u3261
  4816  0011B2  0E23               	movlw	35
  4817  0011B4  1844               	xorwf	(washOne@cont+1)^0,w,c
  4818  0011B6  1045               	iorwf	(washOne@cont+2)^0,w,c
  4819  0011B8  1046               	iorwf	(washOne@cont+3)^0,w,c
  4820  0011BA  A4D8               	btfss	status,2,c
  4821  0011BC  EFE2  F008         	goto	u3261
  4822  0011C0  EFE4  F008         	goto	u3260
  4823  0011C4                     u3261:
  4824  0011C4  EFFB  F008         	goto	l3353
  4825  0011C8                     u3260:
  4826  0011C8                     
  4827                           ;washes.c: 101:             pwmSet1(100);
  4828  0011C8  0E64               	movlw	100
  4829  0011CA  ECF2  F01B         	call	_pwmSet1
  4830  0011CE                     
  4831                           ;washes.c: 102:             PORTC = 0x00;
  4832  0011CE  0E00               	movlw	0
  4833  0011D0  6E82               	movwf	130,c	;volatile
  4834  0011D2                     
  4835                           ;washes.c: 103:             printf(msg2, 32);
  4836  0011D2  0EC0               	movlw	low _msg2
  4837  0011D4  6E09               	movwf	printf@msg^0,c
  4838  0011D6  0E01               	movlw	high _msg2
  4839  0011D8  6E0A               	movwf	(printf@msg+1)^0,c
  4840  0011DA  0E00               	movlw	0
  4841  0011DC  6E0C               	movwf	(printf@j+1)^0,c
  4842  0011DE  0E20               	movlw	32
  4843  0011E0  6E0B               	movwf	printf@j^0,c
  4844  0011E2  ECBF  F019         	call	_printf	;wreg free
  4845  0011E6                     
  4846                           ;washes.c: 104:             lcdPosition(0, 10);
  4847  0011E6  0E0A               	movlw	10
  4848  0011E8  6E09               	movwf	lcdPosition@col^0,c
  4849  0011EA  0E00               	movlw	0
  4850  0011EC  EC85  F01D         	call	_lcdPosition
  4851  0011F0                     
  4852                           ;washes.c: 105:             lcdCommand(0x0F);
  4853  0011F0  0E0F               	movlw	15
  4854  0011F2  EC3D  F01B         	call	_lcdCommand
  4855  0011F6                     l3353:
  4856                           
  4857                           ;washes.c: 108:         if (cont == 6000) {
  4858  0011F6  0E70               	movlw	112
  4859  0011F8  1843               	xorwf	washOne@cont^0,w,c
  4860  0011FA  E109               	bnz	u3271
  4861  0011FC  0E17               	movlw	23
  4862  0011FE  1844               	xorwf	(washOne@cont+1)^0,w,c
  4863  001200  1045               	iorwf	(washOne@cont+2)^0,w,c
  4864  001202  1046               	iorwf	(washOne@cont+3)^0,w,c
  4865  001204  A4D8               	btfss	status,2,c
  4866  001206  EF07  F009         	goto	u3271
  4867  00120A  EF09  F009         	goto	u3270
  4868  00120E                     u3271:
  4869  00120E  EF20  F009         	goto	l3365
  4870  001212                     u3270:
  4871  001212                     
  4872                           ;washes.c: 109:             pwmSet1(0);
  4873  001212  0E00               	movlw	0
  4874  001214  ECF2  F01B         	call	_pwmSet1
  4875  001218                     
  4876                           ;washes.c: 110:             PORTE = 0x01;
  4877  001218  0E01               	movlw	1
  4878  00121A  6E84               	movwf	132,c	;volatile
  4879  00121C                     
  4880                           ;washes.c: 111:             printf(msg3, 32);
  4881  00121C  0EE0               	movlw	low _msg3
  4882  00121E  6E09               	movwf	printf@msg^0,c
  4883  001220  0E02               	movlw	high _msg3
  4884  001222  6E0A               	movwf	(printf@msg+1)^0,c
  4885  001224  0E00               	movlw	0
  4886  001226  6E0C               	movwf	(printf@j+1)^0,c
  4887  001228  0E20               	movlw	32
  4888  00122A  6E0B               	movwf	printf@j^0,c
  4889  00122C  ECBF  F019         	call	_printf	;wreg free
  4890  001230                     
  4891                           ;washes.c: 112:             lcdPosition(0, 13);
  4892  001230  0E0D               	movlw	13
  4893  001232  6E09               	movwf	lcdPosition@col^0,c
  4894  001234  0E00               	movlw	0
  4895  001236  EC85  F01D         	call	_lcdPosition
  4896  00123A                     
  4897                           ;washes.c: 113:             lcdCommand(0x0F);
  4898  00123A  0E0F               	movlw	15
  4899  00123C  EC3D  F01B         	call	_lcdCommand
  4900  001240                     l3365:
  4901                           
  4902                           ;washes.c: 116:         if (cont == 3000) {
  4903  001240  0EB8               	movlw	184
  4904  001242  1843               	xorwf	washOne@cont^0,w,c
  4905  001244  E109               	bnz	u3281
  4906  001246  0E0B               	movlw	11
  4907  001248  1844               	xorwf	(washOne@cont+1)^0,w,c
  4908  00124A  1045               	iorwf	(washOne@cont+2)^0,w,c
  4909  00124C  1046               	iorwf	(washOne@cont+3)^0,w,c
  4910  00124E  A4D8               	btfss	status,2,c
  4911  001250  EF2C  F009         	goto	u3281
  4912  001254  EF2E  F009         	goto	u3280
  4913  001258                     u3281:
  4914  001258  EF45  F009         	goto	l3377
  4915  00125C                     u3280:
  4916  00125C                     
  4917                           ;washes.c: 117:             PORTE = 0x00;
  4918  00125C  0E00               	movlw	0
  4919  00125E  6E84               	movwf	132,c	;volatile
  4920  001260                     
  4921                           ;washes.c: 118:             pwmSet1(100);
  4922  001260  0E64               	movlw	100
  4923  001262  ECF2  F01B         	call	_pwmSet1
  4924  001266                     
  4925                           ;washes.c: 119:             printf(msg4, 32);
  4926  001266  0EC0               	movlw	low _msg4
  4927  001268  6E09               	movwf	printf@msg^0,c
  4928  00126A  0E02               	movlw	high _msg4
  4929  00126C  6E0A               	movwf	(printf@msg+1)^0,c
  4930  00126E  0E00               	movlw	0
  4931  001270  6E0C               	movwf	(printf@j+1)^0,c
  4932  001272  0E20               	movlw	32
  4933  001274  6E0B               	movwf	printf@j^0,c
  4934  001276  ECBF  F019         	call	_printf	;wreg free
  4935  00127A                     
  4936                           ;washes.c: 120:             lcdPosition(0, 10);
  4937  00127A  0E0A               	movlw	10
  4938  00127C  6E09               	movwf	lcdPosition@col^0,c
  4939  00127E  0E00               	movlw	0
  4940  001280  EC85  F01D         	call	_lcdPosition
  4941  001284                     
  4942                           ;washes.c: 121:             lcdCommand(0x0F);
  4943  001284  0E0F               	movlw	15
  4944  001286  EC3D  F01B         	call	_lcdCommand
  4945  00128A                     l3377:
  4946                           
  4947                           ;washes.c: 124:         if ((cont / 100) % 10 < 6) {
  4948  00128A  0E64               	movlw	100
  4949  00128C  6E05               	movwf	___aldiv@divisor^0,c
  4950  00128E  0E00               	movlw	0
  4951  001290  6E06               	movwf	(___aldiv@divisor+1)^0,c
  4952  001292  0E00               	movlw	0
  4953  001294  6E07               	movwf	(___aldiv@divisor+2)^0,c
  4954  001296  0E00               	movlw	0
  4955  001298  6E08               	movwf	(___aldiv@divisor+3)^0,c
  4956  00129A  C043  F001         	movff	washOne@cont,___aldiv@dividend
  4957  00129E  C044  F002         	movff	washOne@cont+1,___aldiv@dividend+1
  4958  0012A2  C045  F003         	movff	washOne@cont+2,___aldiv@dividend+2
  4959  0012A6  C046  F004         	movff	washOne@cont+3,___aldiv@dividend+3
  4960  0012AA  ECC5  F016         	call	___aldiv	;wreg free
  4961  0012AE  C001  F00F         	movff	?___aldiv,___almod@dividend
  4962  0012B2  C002  F010         	movff	?___aldiv+1,___almod@dividend+1
  4963  0012B6  C003  F011         	movff	?___aldiv+2,___almod@dividend+2
  4964  0012BA  C004  F012         	movff	?___aldiv+3,___almod@dividend+3
  4965  0012BE  0E0A               	movlw	10
  4966  0012C0  6E13               	movwf	___almod@divisor^0,c
  4967  0012C2  0E00               	movlw	0
  4968  0012C4  6E14               	movwf	(___almod@divisor+1)^0,c
  4969  0012C6  0E00               	movlw	0
  4970  0012C8  6E15               	movwf	(___almod@divisor+2)^0,c
  4971  0012CA  0E00               	movlw	0
  4972  0012CC  6E16               	movwf	(___almod@divisor+3)^0,c
  4973  0012CE  EC49  F019         	call	___almod	;wreg free
  4974  0012D2  BE12               	btfsc	(?___almod+3)^0,7,c
  4975  0012D4  EF79  F009         	goto	u3290
  4976  0012D8  5012               	movf	(?___almod+3)^0,w,c
  4977  0012DA  1011               	iorwf	(?___almod+2)^0,w,c
  4978  0012DC  1010               	iorwf	(?___almod+1)^0,w,c
  4979  0012DE  E107               	bnz	u3291
  4980  0012E0  0E06               	movlw	6
  4981  0012E2  5C0F               	subwf	?___almod^0,w,c
  4982  0012E4  B0D8               	btfsc	status,0,c
  4983  0012E6  EF77  F009         	goto	u3291
  4984  0012EA  EF79  F009         	goto	u3290
  4985  0012EE                     u3291:
  4986  0012EE  EFA2  F009         	goto	l277
  4987  0012F2                     u3290:
  4988  0012F2                     
  4989                           ;washes.c: 125:             ssdDigit(((cont / 10) % 10), 3);
  4990  0012F2  0E03               	movlw	3
  4991  0012F4  6E19               	movwf	ssdDigit@pos^0,c
  4992  0012F6  0E0A               	movlw	10
  4993  0012F8  6E05               	movwf	___aldiv@divisor^0,c
  4994  0012FA  0E00               	movlw	0
  4995  0012FC  6E06               	movwf	(___aldiv@divisor+1)^0,c
  4996  0012FE  0E00               	movlw	0
  4997  001300  6E07               	movwf	(___aldiv@divisor+2)^0,c
  4998  001302  0E00               	movlw	0
  4999  001304  6E08               	movwf	(___aldiv@divisor+3)^0,c
  5000  001306  C043  F001         	movff	washOne@cont,___aldiv@dividend
  5001  00130A  C044  F002         	movff	washOne@cont+1,___aldiv@dividend+1
  5002  00130E  C045  F003         	movff	washOne@cont+2,___aldiv@dividend+2
  5003  001312  C046  F004         	movff	washOne@cont+3,___aldiv@dividend+3
  5004  001316  ECC5  F016         	call	___aldiv	;wreg free
  5005  00131A  C001  F00F         	movff	?___aldiv,___almod@dividend
  5006  00131E  C002  F010         	movff	?___aldiv+1,___almod@dividend+1
  5007  001322  C003  F011         	movff	?___aldiv+2,___almod@dividend+2
  5008  001326  C004  F012         	movff	?___aldiv+3,___almod@dividend+3
  5009  00132A  0E0A               	movlw	10
  5010  00132C  6E13               	movwf	___almod@divisor^0,c
  5011  00132E  0E00               	movlw	0
  5012  001330  6E14               	movwf	(___almod@divisor+1)^0,c
  5013  001332  0E00               	movlw	0
  5014  001334  6E15               	movwf	(___almod@divisor+2)^0,c
  5015  001336  0E00               	movlw	0
  5016  001338  6E16               	movwf	(___almod@divisor+3)^0,c
  5017  00133A  EC49  F019         	call	___almod	;wreg free
  5018  00133E  500F               	movf	?___almod^0,w,c
  5019  001340  ECC4  F01C         	call	_ssdDigit
  5020  001344                     l277:
  5021                           
  5022                           ;washes.c: 127:         delayAux(2);
  5023  001344  0E00               	movlw	0
  5024  001346  6E02               	movwf	(delayAux@i+1)^0,c
  5025  001348  0E02               	movlw	2
  5026  00134A  6E01               	movwf	delayAux@i^0,c
  5027  00134C  ECA2  F01D         	call	_delayAux	;wreg free
  5028                           
  5029                           ;washes.c: 128:         if ((cont / 100) % 10 < 6) {
  5030  001350  0E64               	movlw	100
  5031  001352  6E05               	movwf	___aldiv@divisor^0,c
  5032  001354  0E00               	movlw	0
  5033  001356  6E06               	movwf	(___aldiv@divisor+1)^0,c
  5034  001358  0E00               	movlw	0
  5035  00135A  6E07               	movwf	(___aldiv@divisor+2)^0,c
  5036  00135C  0E00               	movlw	0
  5037  00135E  6E08               	movwf	(___aldiv@divisor+3)^0,c
  5038  001360  C043  F001         	movff	washOne@cont,___aldiv@dividend
  5039  001364  C044  F002         	movff	washOne@cont+1,___aldiv@dividend+1
  5040  001368  C045  F003         	movff	washOne@cont+2,___aldiv@dividend+2
  5041  00136C  C046  F004         	movff	washOne@cont+3,___aldiv@dividend+3
  5042  001370  ECC5  F016         	call	___aldiv	;wreg free
  5043  001374  C001  F00F         	movff	?___aldiv,___almod@dividend
  5044  001378  C002  F010         	movff	?___aldiv+1,___almod@dividend+1
  5045  00137C  C003  F011         	movff	?___aldiv+2,___almod@dividend+2
  5046  001380  C004  F012         	movff	?___aldiv+3,___almod@dividend+3
  5047  001384  0E0A               	movlw	10
  5048  001386  6E13               	movwf	___almod@divisor^0,c
  5049  001388  0E00               	movlw	0
  5050  00138A  6E14               	movwf	(___almod@divisor+1)^0,c
  5051  00138C  0E00               	movlw	0
  5052  00138E  6E15               	movwf	(___almod@divisor+2)^0,c
  5053  001390  0E00               	movlw	0
  5054  001392  6E16               	movwf	(___almod@divisor+3)^0,c
  5055  001394  EC49  F019         	call	___almod	;wreg free
  5056  001398  BE12               	btfsc	(?___almod+3)^0,7,c
  5057  00139A  EFDC  F009         	goto	u3300
  5058  00139E  5012               	movf	(?___almod+3)^0,w,c
  5059  0013A0  1011               	iorwf	(?___almod+2)^0,w,c
  5060  0013A2  1010               	iorwf	(?___almod+1)^0,w,c
  5061  0013A4  E107               	bnz	u3301
  5062  0013A6  0E06               	movlw	6
  5063  0013A8  5C0F               	subwf	?___almod^0,w,c
  5064  0013AA  B0D8               	btfsc	status,0,c
  5065  0013AC  EFDA  F009         	goto	u3301
  5066  0013B0  EFDC  F009         	goto	u3300
  5067  0013B4                     u3301:
  5068  0013B4  EF05  F00A         	goto	l278
  5069  0013B8                     u3300:
  5070  0013B8                     
  5071                           ;washes.c: 129:             ssdDigit(((cont / 100) % 10), 2);
  5072  0013B8  0E02               	movlw	2
  5073  0013BA  6E19               	movwf	ssdDigit@pos^0,c
  5074  0013BC  0E64               	movlw	100
  5075  0013BE  6E05               	movwf	___aldiv@divisor^0,c
  5076  0013C0  0E00               	movlw	0
  5077  0013C2  6E06               	movwf	(___aldiv@divisor+1)^0,c
  5078  0013C4  0E00               	movlw	0
  5079  0013C6  6E07               	movwf	(___aldiv@divisor+2)^0,c
  5080  0013C8  0E00               	movlw	0
  5081  0013CA  6E08               	movwf	(___aldiv@divisor+3)^0,c
  5082  0013CC  C043  F001         	movff	washOne@cont,___aldiv@dividend
  5083  0013D0  C044  F002         	movff	washOne@cont+1,___aldiv@dividend+1
  5084  0013D4  C045  F003         	movff	washOne@cont+2,___aldiv@dividend+2
  5085  0013D8  C046  F004         	movff	washOne@cont+3,___aldiv@dividend+3
  5086  0013DC  ECC5  F016         	call	___aldiv	;wreg free
  5087  0013E0  C001  F00F         	movff	?___aldiv,___almod@dividend
  5088  0013E4  C002  F010         	movff	?___aldiv+1,___almod@dividend+1
  5089  0013E8  C003  F011         	movff	?___aldiv+2,___almod@dividend+2
  5090  0013EC  C004  F012         	movff	?___aldiv+3,___almod@dividend+3
  5091  0013F0  0E0A               	movlw	10
  5092  0013F2  6E13               	movwf	___almod@divisor^0,c
  5093  0013F4  0E00               	movlw	0
  5094  0013F6  6E14               	movwf	(___almod@divisor+1)^0,c
  5095  0013F8  0E00               	movlw	0
  5096  0013FA  6E15               	movwf	(___almod@divisor+2)^0,c
  5097  0013FC  0E00               	movlw	0
  5098  0013FE  6E16               	movwf	(___almod@divisor+3)^0,c
  5099  001400  EC49  F019         	call	___almod	;wreg free
  5100  001404  500F               	movf	?___almod^0,w,c
  5101  001406  ECC4  F01C         	call	_ssdDigit
  5102  00140A                     l278:
  5103                           
  5104                           ;washes.c: 131:         if ((cont / 100) % 10 >= 6) {
  5105  00140A  0E64               	movlw	100
  5106  00140C  6E05               	movwf	___aldiv@divisor^0,c
  5107  00140E  0E00               	movlw	0
  5108  001410  6E06               	movwf	(___aldiv@divisor+1)^0,c
  5109  001412  0E00               	movlw	0
  5110  001414  6E07               	movwf	(___aldiv@divisor+2)^0,c
  5111  001416  0E00               	movlw	0
  5112  001418  6E08               	movwf	(___aldiv@divisor+3)^0,c
  5113  00141A  C043  F001         	movff	washOne@cont,___aldiv@dividend
  5114  00141E  C044  F002         	movff	washOne@cont+1,___aldiv@dividend+1
  5115  001422  C045  F003         	movff	washOne@cont+2,___aldiv@dividend+2
  5116  001426  C046  F004         	movff	washOne@cont+3,___aldiv@dividend+3
  5117  00142A  ECC5  F016         	call	___aldiv	;wreg free
  5118  00142E  C001  F00F         	movff	?___aldiv,___almod@dividend
  5119  001432  C002  F010         	movff	?___aldiv+1,___almod@dividend+1
  5120  001436  C003  F011         	movff	?___aldiv+2,___almod@dividend+2
  5121  00143A  C004  F012         	movff	?___aldiv+3,___almod@dividend+3
  5122  00143E  0E0A               	movlw	10
  5123  001440  6E13               	movwf	___almod@divisor^0,c
  5124  001442  0E00               	movlw	0
  5125  001444  6E14               	movwf	(___almod@divisor+1)^0,c
  5126  001446  0E00               	movlw	0
  5127  001448  6E15               	movwf	(___almod@divisor+2)^0,c
  5128  00144A  0E00               	movlw	0
  5129  00144C  6E16               	movwf	(___almod@divisor+3)^0,c
  5130  00144E  EC49  F019         	call	___almod	;wreg free
  5131  001452  BE12               	btfsc	(?___almod+3)^0,7,c
  5132  001454  EF37  F00A         	goto	u3311
  5133  001458  5012               	movf	(?___almod+3)^0,w,c
  5134  00145A  1011               	iorwf	(?___almod+2)^0,w,c
  5135  00145C  1010               	iorwf	(?___almod+1)^0,w,c
  5136  00145E  E109               	bnz	u3310
  5137  001460  0E06               	movlw	6
  5138  001462  5C0F               	subwf	?___almod^0,w,c
  5139  001464  A0D8               	btfss	status,0,c
  5140  001466  EF37  F00A         	goto	u3311
  5141  00146A  EF39  F00A         	goto	u3310
  5142  00146E                     u3311:
  5143  00146E  EFAB  F00A         	goto	l3403
  5144  001472                     u3310:
  5145  001472                     
  5146                           ;washes.c: 132:             for (tempo = 0; tempo < 4; tempo++) {
  5147  001472  0E00               	movlw	0
  5148  001474  6E3F               	movwf	washOne@tempo^0,c
  5149  001476  0E00               	movlw	0
  5150  001478  6E40               	movwf	(washOne@tempo+1)^0,c
  5151  00147A  0E00               	movlw	0
  5152  00147C  6E41               	movwf	(washOne@tempo+2)^0,c
  5153  00147E  0E00               	movlw	0
  5154  001480  6E42               	movwf	(washOne@tempo+3)^0,c
  5155  001482  C03F  F001         	movff	washOne@tempo,___flge@ff1
  5156  001486  C040  F002         	movff	washOne@tempo+1,___flge@ff1+1
  5157  00148A  C041  F003         	movff	washOne@tempo+2,___flge@ff1+2
  5158  00148E  C042  F004         	movff	washOne@tempo+3,___flge@ff1+3
  5159  001492  0E00               	movlw	0
  5160  001494  6E05               	movwf	___flge@ff2^0,c
  5161  001496  0E00               	movlw	0
  5162  001498  6E06               	movwf	(___flge@ff2+1)^0,c
  5163  00149A  0E80               	movlw	128
  5164  00149C  6E07               	movwf	(___flge@ff2+2)^0,c
  5165  00149E  0E40               	movlw	64
  5166  0014A0  6E08               	movwf	(___flge@ff2+3)^0,c
  5167  0014A2  ECCF  F017         	call	___flge	;wreg free
  5168  0014A6  A0D8               	btfss	status,0,c
  5169  0014A8  EF58  F00A         	goto	u3321
  5170  0014AC  EF5A  F00A         	goto	u3320
  5171  0014B0                     u3321:
  5172  0014B0  EF5C  F00A         	goto	l3389
  5173  0014B4                     u3320:
  5174  0014B4  EFAB  F00A         	goto	l3403
  5175  0014B8                     l3389:
  5176                           
  5177                           ;washes.c: 133:                 for (i = 0; i < 10; i++) {
  5178  0014B8  0E00               	movlw	0
  5179  0014BA  6E3E               	movwf	(washOne@i+1)^0,c
  5180  0014BC  0E00               	movlw	0
  5181  0014BE  6E3D               	movwf	washOne@i^0,c
  5182  0014C0                     l3395:
  5183                           
  5184                           ;washes.c: 134:                     cont--;
  5185  0014C0  0EFF               	movlw	255
  5186  0014C2  2643               	addwf	washOne@cont^0,f,c
  5187  0014C4  0EFF               	movlw	255
  5188  0014C6  2244               	addwfc	(washOne@cont+1)^0,f,c
  5189  0014C8  0EFF               	movlw	255
  5190  0014CA  2245               	addwfc	(washOne@cont+2)^0,f,c
  5191  0014CC  0EFF               	movlw	255
  5192  0014CE  2246               	addwfc	(washOne@cont+3)^0,f,c
  5193  0014D0                     
  5194                           ;washes.c: 135:                 }
  5195  0014D0  4A3D               	infsnz	washOne@i^0,f,c
  5196  0014D2  2A3E               	incf	(washOne@i+1)^0,f,c
  5197  0014D4  BE3E               	btfsc	(washOne@i+1)^0,7,c
  5198  0014D6  EF76  F00A         	goto	u3331
  5199  0014DA  503E               	movf	(washOne@i+1)^0,w,c
  5200  0014DC  E109               	bnz	u3330
  5201  0014DE  0E0A               	movlw	10
  5202  0014E0  5C3D               	subwf	washOne@i^0,w,c
  5203  0014E2  A0D8               	btfss	status,0,c
  5204  0014E4  EF76  F00A         	goto	u3331
  5205  0014E8  EF78  F00A         	goto	u3330
  5206  0014EC                     u3331:
  5207  0014EC  EF60  F00A         	goto	l3395
  5208  0014F0                     u3330:
  5209  0014F0                     
  5210                           ;washes.c: 136:             }
  5211  0014F0  C03F  F001         	movff	washOne@tempo,___fladd@b
  5212  0014F4  C040  F002         	movff	washOne@tempo+1,___fladd@b+1
  5213  0014F8  C041  F003         	movff	washOne@tempo+2,___fladd@b+2
  5214  0014FC  C042  F004         	movff	washOne@tempo+3,___fladd@b+3
  5215  001500  0E00               	movlw	0
  5216  001502  6E05               	movwf	___fladd@a^0,c
  5217  001504  0E00               	movlw	0
  5218  001506  6E06               	movwf	(___fladd@a+1)^0,c
  5219  001508  0E80               	movlw	128
  5220  00150A  6E07               	movwf	(___fladd@a+2)^0,c
  5221  00150C  0E3F               	movlw	63
  5222  00150E  6E08               	movwf	(___fladd@a+3)^0,c
  5223  001510  EC04  F00E         	call	___fladd	;wreg free
  5224  001514  C001  F03F         	movff	?___fladd,washOne@tempo
  5225  001518  C002  F040         	movff	?___fladd+1,washOne@tempo+1
  5226  00151C  C003  F041         	movff	?___fladd+2,washOne@tempo+2
  5227  001520  C004  F042         	movff	?___fladd+3,washOne@tempo+3
  5228  001524  C03F  F001         	movff	washOne@tempo,___flge@ff1
  5229  001528  C040  F002         	movff	washOne@tempo+1,___flge@ff1+1
  5230  00152C  C041  F003         	movff	washOne@tempo+2,___flge@ff1+2
  5231  001530  C042  F004         	movff	washOne@tempo+3,___flge@ff1+3
  5232  001534  0E00               	movlw	0
  5233  001536  6E05               	movwf	___flge@ff2^0,c
  5234  001538  0E00               	movlw	0
  5235  00153A  6E06               	movwf	(___flge@ff2+1)^0,c
  5236  00153C  0E80               	movlw	128
  5237  00153E  6E07               	movwf	(___flge@ff2+2)^0,c
  5238  001540  0E40               	movlw	64
  5239  001542  6E08               	movwf	(___flge@ff2+3)^0,c
  5240  001544  ECCF  F017         	call	___flge	;wreg free
  5241  001548  A0D8               	btfss	status,0,c
  5242  00154A  EFA9  F00A         	goto	u3341
  5243  00154E  EFAB  F00A         	goto	u3340
  5244  001552                     u3341:
  5245  001552  EF5C  F00A         	goto	l3389
  5246  001556                     u3340:
  5247  001556                     l3403:
  5248                           
  5249                           ;washes.c: 139:         delayAux(2);
  5250  001556  0E00               	movlw	0
  5251  001558  6E02               	movwf	(delayAux@i+1)^0,c
  5252  00155A  0E02               	movlw	2
  5253  00155C  6E01               	movwf	delayAux@i^0,c
  5254  00155E  ECA2  F01D         	call	_delayAux	;wreg free
  5255                           
  5256                           ;washes.c: 140:         ssdDigit(((cont / 1000) % 10), 1);
  5257  001562  0E01               	movlw	1
  5258  001564  6E19               	movwf	ssdDigit@pos^0,c
  5259  001566  0EE8               	movlw	232
  5260  001568  6E05               	movwf	___aldiv@divisor^0,c
  5261  00156A  0E03               	movlw	3
  5262  00156C  6E06               	movwf	(___aldiv@divisor+1)^0,c
  5263  00156E  0E00               	movlw	0
  5264  001570  6E07               	movwf	(___aldiv@divisor+2)^0,c
  5265  001572  0E00               	movlw	0
  5266  001574  6E08               	movwf	(___aldiv@divisor+3)^0,c
  5267  001576  C043  F001         	movff	washOne@cont,___aldiv@dividend
  5268  00157A  C044  F002         	movff	washOne@cont+1,___aldiv@dividend+1
  5269  00157E  C045  F003         	movff	washOne@cont+2,___aldiv@dividend+2
  5270  001582  C046  F004         	movff	washOne@cont+3,___aldiv@dividend+3
  5271  001586  ECC5  F016         	call	___aldiv	;wreg free
  5272  00158A  C001  F00F         	movff	?___aldiv,___almod@dividend
  5273  00158E  C002  F010         	movff	?___aldiv+1,___almod@dividend+1
  5274  001592  C003  F011         	movff	?___aldiv+2,___almod@dividend+2
  5275  001596  C004  F012         	movff	?___aldiv+3,___almod@dividend+3
  5276  00159A  0E0A               	movlw	10
  5277  00159C  6E13               	movwf	___almod@divisor^0,c
  5278  00159E  0E00               	movlw	0
  5279  0015A0  6E14               	movwf	(___almod@divisor+1)^0,c
  5280  0015A2  0E00               	movlw	0
  5281  0015A4  6E15               	movwf	(___almod@divisor+2)^0,c
  5282  0015A6  0E00               	movlw	0
  5283  0015A8  6E16               	movwf	(___almod@divisor+3)^0,c
  5284  0015AA  EC49  F019         	call	___almod	;wreg free
  5285  0015AE  500F               	movf	?___almod^0,w,c
  5286  0015B0  ECC4  F01C         	call	_ssdDigit
  5287                           
  5288                           ;washes.c: 141:         delayAux(2);
  5289  0015B4  0E00               	movlw	0
  5290  0015B6  6E02               	movwf	(delayAux@i+1)^0,c
  5291  0015B8  0E02               	movlw	2
  5292  0015BA  6E01               	movwf	delayAux@i^0,c
  5293  0015BC  ECA2  F01D         	call	_delayAux	;wreg free
  5294                           
  5295                           ;washes.c: 142:         ssdDigit(((cont / 10000) % 10), 0);
  5296  0015C0  0E00               	movlw	0
  5297  0015C2  6E19               	movwf	ssdDigit@pos^0,c
  5298  0015C4  0E10               	movlw	16
  5299  0015C6  6E05               	movwf	___aldiv@divisor^0,c
  5300  0015C8  0E27               	movlw	39
  5301  0015CA  6E06               	movwf	(___aldiv@divisor+1)^0,c
  5302  0015CC  0E00               	movlw	0
  5303  0015CE  6E07               	movwf	(___aldiv@divisor+2)^0,c
  5304  0015D0  0E00               	movlw	0
  5305  0015D2  6E08               	movwf	(___aldiv@divisor+3)^0,c
  5306  0015D4  C043  F001         	movff	washOne@cont,___aldiv@dividend
  5307  0015D8  C044  F002         	movff	washOne@cont+1,___aldiv@dividend+1
  5308  0015DC  C045  F003         	movff	washOne@cont+2,___aldiv@dividend+2
  5309  0015E0  C046  F004         	movff	washOne@cont+3,___aldiv@dividend+3
  5310  0015E4  ECC5  F016         	call	___aldiv	;wreg free
  5311  0015E8  C001  F00F         	movff	?___aldiv,___almod@dividend
  5312  0015EC  C002  F010         	movff	?___aldiv+1,___almod@dividend+1
  5313  0015F0  C003  F011         	movff	?___aldiv+2,___almod@dividend+2
  5314  0015F4  C004  F012         	movff	?___aldiv+3,___almod@dividend+3
  5315  0015F8  0E0A               	movlw	10
  5316  0015FA  6E13               	movwf	___almod@divisor^0,c
  5317  0015FC  0E00               	movlw	0
  5318  0015FE  6E14               	movwf	(___almod@divisor+1)^0,c
  5319  001600  0E00               	movlw	0
  5320  001602  6E15               	movwf	(___almod@divisor+2)^0,c
  5321  001604  0E00               	movlw	0
  5322  001606  6E16               	movwf	(___almod@divisor+3)^0,c
  5323  001608  EC49  F019         	call	___almod	;wreg free
  5324  00160C  500F               	movf	?___almod^0,w,c
  5325  00160E  ECC4  F01C         	call	_ssdDigit
  5326                           
  5327                           ;washes.c: 143:         delayAux(2);
  5328  001612  0E00               	movlw	0
  5329  001614  6E02               	movwf	(delayAux@i+1)^0,c
  5330  001616  0E02               	movlw	2
  5331  001618  6E01               	movwf	delayAux@i^0,c
  5332  00161A  ECA2  F01D         	call	_delayAux	;wreg free
  5333  00161E                     
  5334                           ;washes.c: 144:         ssdUpdate();
  5335  00161E  EC1D  F016         	call	_ssdUpdate	;wreg free
  5336  001622                     
  5337                           ;washes.c: 145:         delayAux(2);
  5338  001622  0E00               	movlw	0
  5339  001624  6E02               	movwf	(delayAux@i+1)^0,c
  5340  001626  0E02               	movlw	2
  5341  001628  6E01               	movwf	delayAux@i^0,c
  5342  00162A  ECA2  F01D         	call	_delayAux	;wreg free
  5343  00162E                     
  5344                           ;washes.c: 146:         c--;
  5345  00162E  063B               	decf	washOne@c^0,f,c
  5346  001630  A0D8               	btfss	status,0,c
  5347  001632  063C               	decf	(washOne@c+1)^0,f,c
  5348  001634                     l3411:
  5349                           
  5350                           ;washes.c: 94:     while (cont >= 0) {
  5351  001634  BE46               	btfsc	(washOne@cont+3)^0,7,c
  5352  001636  EF21  F00B         	goto	u3350
  5353  00163A  EF1F  F00B         	goto	u3351
  5354  00163E                     u3351:
  5355  00163E  EFC1  F008         	goto	l3335
  5356  001642                     u3350:
  5357  001642                     
  5358                           ;washes.c: 151:     PORTA = 0x00;
  5359  001642  0E00               	movlw	0
  5360  001644  6E80               	movwf	128,c	;volatile
  5361  001646                     
  5362                           ;washes.c: 152:     pwmSet1(0);
  5363  001646  0E00               	movlw	0
  5364  001648  ECF2  F01B         	call	_pwmSet1
  5365  00164C                     
  5366                           ;washes.c: 153:     printf("Finalizada!", 10);
  5367  00164C  0E12               	movlw	low STR_1
  5368  00164E  6E09               	movwf	printf@msg^0,c
  5369  001650  0E06               	movlw	high STR_1
  5370  001652  6E0A               	movwf	(printf@msg+1)^0,c
  5371  001654  0E00               	movlw	0
  5372  001656  6E0C               	movwf	(printf@j+1)^0,c
  5373  001658  0E0A               	movlw	10
  5374  00165A  6E0B               	movwf	printf@j^0,c
  5375  00165C  ECBF  F019         	call	_printf	;wreg free
  5376  001660                     
  5377                           ;washes.c: 156:     buzzer();
  5378  001660  EC5E  F01C         	call	_buzzer	;wreg free
  5379  001664                     
  5380                           ;washes.c: 158:     PORTB = 0x00;
  5381  001664  0E00               	movlw	0
  5382  001666  6E81               	movwf	129,c	;volatile
  5383  001668                     
  5384                           ;washes.c: 159:     PORTA = 0x00;
  5385  001668  0E00               	movlw	0
  5386  00166A  6E80               	movwf	128,c	;volatile
  5387  00166C                     
  5388                           ;washes.c: 160:     delay(3000);
  5389  00166C  0E0B               	movlw	11
  5390  00166E  6E02               	movwf	(delay@temp+1)^0,c
  5391  001670  0EB8               	movlw	184
  5392  001672  6E01               	movwf	delay@temp^0,c
  5393  001674  EC92  F01C         	call	_delay	;wreg free
  5394  001678                     
  5395                           ;washes.c: 162:     printf(msg5, 64);
  5396  001678  0EB0               	movlw	low _msg5
  5397  00167A  6E09               	movwf	printf@msg^0,c
  5398  00167C  0E03               	movlw	high _msg5
  5399  00167E  6E0A               	movwf	(printf@msg+1)^0,c
  5400  001680  0E00               	movlw	0
  5401  001682  6E0C               	movwf	(printf@j+1)^0,c
  5402  001684  0E40               	movlw	64
  5403  001686  6E0B               	movwf	printf@j^0,c
  5404  001688  ECBF  F019         	call	_printf	;wreg free
  5405  00168C  0012               	return		;funcret
  5406  00168E                     __end_of_washOne:
  5407                           	callstack 0
  5408                           
  5409 ;; *************** function _washFour *****************
  5410 ;; Defined at:
  5411 ;;		line 338 in file "washes.c"
  5412 ;; Parameters:    Size  Location     Type
  5413 ;;		None
  5414 ;; Auto vars:     Size  Location     Type
  5415 ;;  msg            48   26[COMRAM] unsigned char [48]
  5416 ;;  cont            4   82[COMRAM] long 
  5417 ;;  tempo           4   78[COMRAM] float 
  5418 ;;  i               2   76[COMRAM] int 
  5419 ;;  c               2   74[COMRAM] int 
  5420 ;; Return value:  Size  Location     Type
  5421 ;;                  1    wreg      void 
  5422 ;; Registers used:
  5423 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5424 ;; Tracked objects:
  5425 ;;		On entry : 0/0
  5426 ;;		On exit  : 0/0
  5427 ;;		Unchanged: 0/0
  5428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5429 ;;      Params:         0       0       0       0       0       0       0
  5430 ;;      Locals:        60       0       0       0       0       0       0
  5431 ;;      Temps:          0       0       0       0       0       0       0
  5432 ;;      Totals:        60       0       0       0       0       0       0
  5433 ;;Total ram usage:       60 bytes
  5434 ;; Hardware stack levels used: 1
  5435 ;; Hardware stack levels required when called: 4
  5436 ;; This function calls:
  5437 ;;		___aldiv
  5438 ;;		___almod
  5439 ;;		___fladd
  5440 ;;		___flge
  5441 ;;		_buzzer
  5442 ;;		_delay
  5443 ;;		_delayAux
  5444 ;;		_lcdCommand
  5445 ;;		_lcdPosition
  5446 ;;		_printf
  5447 ;;		_pwmSet1
  5448 ;;		_ssdDigit
  5449 ;;		_ssdUpdate
  5450 ;; This function is called by:
  5451 ;;		_kpOptions2
  5452 ;; This function uses a non-reentrant model
  5453 ;;
  5454                           
  5455                           	psect	text12
  5456  00168E                     __ptext12:
  5457                           	callstack 0
  5458  00168E                     _washFour:
  5459                           	callstack 23
  5460  00168E                     
  5461                           ;washes.c: 339:     float tempo;;washes.c: 340:     int c, i;;washes.c: 341:     long in
      +                          t cont = 5000;
  5462  00168E  0E88               	movlw	136
  5463  001690  6E53               	movwf	washFour@cont^0,c
  5464  001692  0E13               	movlw	19
  5465  001694  6E54               	movwf	(washFour@cont+1)^0,c
  5466  001696  0E00               	movlw	0
  5467  001698  6E55               	movwf	(washFour@cont+2)^0,c
  5468  00169A  0E00               	movlw	0
  5469  00169C  6E56               	movwf	(washFour@cont+3)^0,c
  5470  00169E                     
  5471                           ;washes.c: 343:     char msg[48] = "Iniciando       Lavagem economica";
  5472  00169E  EE23  F040         	lfsr	2,washFour@F2432
  5473  0016A2  EE10  F01B         	lfsr	1,washFour@msg
  5474  0016A6  0E2F               	movlw	47
  5475  0016A8                     u3601:
  5476  0016A8  CFDB FFE3          	movff	plusw2,plusw1
  5477  0016AC  06E8               	decf	wreg,f,c
  5478  0016AE  E2FC               	bc	u3601
  5479  0016B0                     
  5480                           ;washes.c: 345:     printf(msg, 32);
  5481  0016B0  0E1B               	movlw	low washFour@msg
  5482  0016B2  6E09               	movwf	printf@msg^0,c
  5483  0016B4  0E00               	movlw	high washFour@msg
  5484  0016B6  6E0A               	movwf	(printf@msg+1)^0,c
  5485  0016B8  0E00               	movlw	0
  5486  0016BA  6E0C               	movwf	(printf@j+1)^0,c
  5487  0016BC  0E20               	movlw	32
  5488  0016BE  6E0B               	movwf	printf@j^0,c
  5489  0016C0  ECBF  F019         	call	_printf	;wreg free
  5490  0016C4                     
  5491                           ;washes.c: 346:     delay(2000);
  5492  0016C4  0E07               	movlw	7
  5493  0016C6  6E02               	movwf	(delay@temp+1)^0,c
  5494  0016C8  0ED0               	movlw	208
  5495  0016CA  6E01               	movwf	delay@temp^0,c
  5496  0016CC  EC92  F01C         	call	_delay	;wreg free
  5497  0016D0                     
  5498                           ;washes.c: 348:     printf(msg1, 32);
  5499  0016D0  0EE0               	movlw	low _msg1
  5500  0016D2  6E09               	movwf	printf@msg^0,c
  5501  0016D4  0E01               	movlw	high _msg1
  5502  0016D6  6E0A               	movwf	(printf@msg+1)^0,c
  5503  0016D8  0E00               	movlw	0
  5504  0016DA  6E0C               	movwf	(printf@j+1)^0,c
  5505  0016DC  0E20               	movlw	32
  5506  0016DE  6E0B               	movwf	printf@j^0,c
  5507  0016E0  ECBF  F019         	call	_printf	;wreg free
  5508  0016E4                     
  5509                           ;washes.c: 349:     lcdPosition(0, 15);
  5510  0016E4  0E0F               	movlw	15
  5511  0016E6  6E09               	movwf	lcdPosition@col^0,c
  5512  0016E8  0E00               	movlw	0
  5513  0016EA  EC85  F01D         	call	_lcdPosition
  5514  0016EE                     
  5515                           ;washes.c: 350:     lcdCommand(0x0F);
  5516  0016EE  0E0F               	movlw	15
  5517  0016F0  EC3D  F01B         	call	_lcdCommand
  5518  0016F4                     
  5519                           ;washes.c: 352:     PORTC = 0x01;
  5520  0016F4  0E01               	movlw	1
  5521  0016F6  6E82               	movwf	130,c	;volatile
  5522                           
  5523                           ;washes.c: 353:     while (cont >= 0) {
  5524  0016F8  EFD7  F00D         	goto	l3741
  5525  0016FC                     l3665:
  5526                           
  5527                           ;washes.c: 354:         if (c == 0) {
  5528  0016FC  504B               	movf	washFour@c^0,w,c
  5529  0016FE  104C               	iorwf	(washFour@c+1)^0,w,c
  5530  001700  A4D8               	btfss	status,2,c
  5531  001702  EF85  F00B         	goto	u3611
  5532  001706  EF87  F00B         	goto	u3610
  5533  00170A                     u3611:
  5534  00170A  EF93  F00B         	goto	l3671
  5535  00170E                     u3610:
  5536  00170E                     
  5537                           ;washes.c: 355:             cont--;
  5538  00170E  0EFF               	movlw	255
  5539  001710  2653               	addwf	washFour@cont^0,f,c
  5540  001712  0EFF               	movlw	255
  5541  001714  2254               	addwfc	(washFour@cont+1)^0,f,c
  5542  001716  0EFF               	movlw	255
  5543  001718  2255               	addwfc	(washFour@cont+2)^0,f,c
  5544  00171A  0EFF               	movlw	255
  5545  00171C  2256               	addwfc	(washFour@cont+3)^0,f,c
  5546  00171E                     
  5547                           ;washes.c: 356:             c = 12;
  5548  00171E  0E00               	movlw	0
  5549  001720  6E4C               	movwf	(washFour@c+1)^0,c
  5550  001722  0E0C               	movlw	12
  5551  001724  6E4B               	movwf	washFour@c^0,c
  5552  001726                     l3671:
  5553                           
  5554                           ;washes.c: 359:         if (cont == 4000) {
  5555  001726  0EA0               	movlw	160
  5556  001728  1853               	xorwf	washFour@cont^0,w,c
  5557  00172A  E109               	bnz	u3621
  5558  00172C  0E0F               	movlw	15
  5559  00172E  1854               	xorwf	(washFour@cont+1)^0,w,c
  5560  001730  1055               	iorwf	(washFour@cont+2)^0,w,c
  5561  001732  1056               	iorwf	(washFour@cont+3)^0,w,c
  5562  001734  A4D8               	btfss	status,2,c
  5563  001736  EF9F  F00B         	goto	u3621
  5564  00173A  EFA1  F00B         	goto	u3620
  5565  00173E                     u3621:
  5566  00173E  EFB8  F00B         	goto	l3683
  5567  001742                     u3620:
  5568  001742                     
  5569                           ;washes.c: 360:             pwmSet1(25);
  5570  001742  0E19               	movlw	25
  5571  001744  ECF2  F01B         	call	_pwmSet1
  5572  001748                     
  5573                           ;washes.c: 361:             PORTC = 0x00;
  5574  001748  0E00               	movlw	0
  5575  00174A  6E82               	movwf	130,c	;volatile
  5576  00174C                     
  5577                           ;washes.c: 362:             printf(msg2, 32);
  5578  00174C  0EC0               	movlw	low _msg2
  5579  00174E  6E09               	movwf	printf@msg^0,c
  5580  001750  0E01               	movlw	high _msg2
  5581  001752  6E0A               	movwf	(printf@msg+1)^0,c
  5582  001754  0E00               	movlw	0
  5583  001756  6E0C               	movwf	(printf@j+1)^0,c
  5584  001758  0E20               	movlw	32
  5585  00175A  6E0B               	movwf	printf@j^0,c
  5586  00175C  ECBF  F019         	call	_printf	;wreg free
  5587  001760                     
  5588                           ;washes.c: 363:             lcdPosition(0, 10);
  5589  001760  0E0A               	movlw	10
  5590  001762  6E09               	movwf	lcdPosition@col^0,c
  5591  001764  0E00               	movlw	0
  5592  001766  EC85  F01D         	call	_lcdPosition
  5593  00176A                     
  5594                           ;washes.c: 364:             lcdCommand(0x0F);
  5595  00176A  0E0F               	movlw	15
  5596  00176C  EC3D  F01B         	call	_lcdCommand
  5597  001770                     l3683:
  5598                           
  5599                           ;washes.c: 367:         if (cont == 2000) {
  5600  001770  0ED0               	movlw	208
  5601  001772  1853               	xorwf	washFour@cont^0,w,c
  5602  001774  E109               	bnz	u3631
  5603  001776  0E07               	movlw	7
  5604  001778  1854               	xorwf	(washFour@cont+1)^0,w,c
  5605  00177A  1055               	iorwf	(washFour@cont+2)^0,w,c
  5606  00177C  1056               	iorwf	(washFour@cont+3)^0,w,c
  5607  00177E  A4D8               	btfss	status,2,c
  5608  001780  EFC4  F00B         	goto	u3631
  5609  001784  EFC6  F00B         	goto	u3630
  5610  001788                     u3631:
  5611  001788  EFDD  F00B         	goto	l3695
  5612  00178C                     u3630:
  5613  00178C                     
  5614                           ;washes.c: 368:             pwmSet1(0);
  5615  00178C  0E00               	movlw	0
  5616  00178E  ECF2  F01B         	call	_pwmSet1
  5617  001792                     
  5618                           ;washes.c: 369:             PORTE = 0x01;
  5619  001792  0E01               	movlw	1
  5620  001794  6E84               	movwf	132,c	;volatile
  5621  001796                     
  5622                           ;washes.c: 370:             printf(msg3, 32);
  5623  001796  0EE0               	movlw	low _msg3
  5624  001798  6E09               	movwf	printf@msg^0,c
  5625  00179A  0E02               	movlw	high _msg3
  5626  00179C  6E0A               	movwf	(printf@msg+1)^0,c
  5627  00179E  0E00               	movlw	0
  5628  0017A0  6E0C               	movwf	(printf@j+1)^0,c
  5629  0017A2  0E20               	movlw	32
  5630  0017A4  6E0B               	movwf	printf@j^0,c
  5631  0017A6  ECBF  F019         	call	_printf	;wreg free
  5632  0017AA                     
  5633                           ;washes.c: 371:             lcdPosition(0, 13);
  5634  0017AA  0E0D               	movlw	13
  5635  0017AC  6E09               	movwf	lcdPosition@col^0,c
  5636  0017AE  0E00               	movlw	0
  5637  0017B0  EC85  F01D         	call	_lcdPosition
  5638  0017B4                     
  5639                           ;washes.c: 372:             lcdCommand(0x0F);
  5640  0017B4  0E0F               	movlw	15
  5641  0017B6  EC3D  F01B         	call	_lcdCommand
  5642  0017BA                     l3695:
  5643                           
  5644                           ;washes.c: 375:         if (cont == 1000) {
  5645  0017BA  0EE8               	movlw	232
  5646  0017BC  1853               	xorwf	washFour@cont^0,w,c
  5647  0017BE  E109               	bnz	u3641
  5648  0017C0  0E03               	movlw	3
  5649  0017C2  1854               	xorwf	(washFour@cont+1)^0,w,c
  5650  0017C4  1055               	iorwf	(washFour@cont+2)^0,w,c
  5651  0017C6  1056               	iorwf	(washFour@cont+3)^0,w,c
  5652  0017C8  A4D8               	btfss	status,2,c
  5653  0017CA  EFE9  F00B         	goto	u3641
  5654  0017CE  EFEB  F00B         	goto	u3640
  5655  0017D2                     u3641:
  5656  0017D2  EF02  F00C         	goto	l3707
  5657  0017D6                     u3640:
  5658  0017D6                     
  5659                           ;washes.c: 376:             PORTE = 0x00;
  5660  0017D6  0E00               	movlw	0
  5661  0017D8  6E84               	movwf	132,c	;volatile
  5662  0017DA                     
  5663                           ;washes.c: 377:             pwmSet1(25);
  5664  0017DA  0E19               	movlw	25
  5665  0017DC  ECF2  F01B         	call	_pwmSet1
  5666  0017E0                     
  5667                           ;washes.c: 378:             printf(msg4, 32);
  5668  0017E0  0EC0               	movlw	low _msg4
  5669  0017E2  6E09               	movwf	printf@msg^0,c
  5670  0017E4  0E02               	movlw	high _msg4
  5671  0017E6  6E0A               	movwf	(printf@msg+1)^0,c
  5672  0017E8  0E00               	movlw	0
  5673  0017EA  6E0C               	movwf	(printf@j+1)^0,c
  5674  0017EC  0E20               	movlw	32
  5675  0017EE  6E0B               	movwf	printf@j^0,c
  5676  0017F0  ECBF  F019         	call	_printf	;wreg free
  5677  0017F4                     
  5678                           ;washes.c: 379:             lcdPosition(0, 10);
  5679  0017F4  0E0A               	movlw	10
  5680  0017F6  6E09               	movwf	lcdPosition@col^0,c
  5681  0017F8  0E00               	movlw	0
  5682  0017FA  EC85  F01D         	call	_lcdPosition
  5683  0017FE                     
  5684                           ;washes.c: 380:             lcdCommand(0x0F);
  5685  0017FE  0E0F               	movlw	15
  5686  001800  EC3D  F01B         	call	_lcdCommand
  5687  001804                     l3707:
  5688                           
  5689                           ;washes.c: 383:         if ((cont / 100) % 10 < 6) {
  5690  001804  0E64               	movlw	100
  5691  001806  6E05               	movwf	___aldiv@divisor^0,c
  5692  001808  0E00               	movlw	0
  5693  00180A  6E06               	movwf	(___aldiv@divisor+1)^0,c
  5694  00180C  0E00               	movlw	0
  5695  00180E  6E07               	movwf	(___aldiv@divisor+2)^0,c
  5696  001810  0E00               	movlw	0
  5697  001812  6E08               	movwf	(___aldiv@divisor+3)^0,c
  5698  001814  C053  F001         	movff	washFour@cont,___aldiv@dividend
  5699  001818  C054  F002         	movff	washFour@cont+1,___aldiv@dividend+1
  5700  00181C  C055  F003         	movff	washFour@cont+2,___aldiv@dividend+2
  5701  001820  C056  F004         	movff	washFour@cont+3,___aldiv@dividend+3
  5702  001824  ECC5  F016         	call	___aldiv	;wreg free
  5703  001828  C001  F00F         	movff	?___aldiv,___almod@dividend
  5704  00182C  C002  F010         	movff	?___aldiv+1,___almod@dividend+1
  5705  001830  C003  F011         	movff	?___aldiv+2,___almod@dividend+2
  5706  001834  C004  F012         	movff	?___aldiv+3,___almod@dividend+3
  5707  001838  0E0A               	movlw	10
  5708  00183A  6E13               	movwf	___almod@divisor^0,c
  5709  00183C  0E00               	movlw	0
  5710  00183E  6E14               	movwf	(___almod@divisor+1)^0,c
  5711  001840  0E00               	movlw	0
  5712  001842  6E15               	movwf	(___almod@divisor+2)^0,c
  5713  001844  0E00               	movlw	0
  5714  001846  6E16               	movwf	(___almod@divisor+3)^0,c
  5715  001848  EC49  F019         	call	___almod	;wreg free
  5716  00184C  BE12               	btfsc	(?___almod+3)^0,7,c
  5717  00184E  EF36  F00C         	goto	u3650
  5718  001852  5012               	movf	(?___almod+3)^0,w,c
  5719  001854  1011               	iorwf	(?___almod+2)^0,w,c
  5720  001856  1010               	iorwf	(?___almod+1)^0,w,c
  5721  001858  E107               	bnz	u3651
  5722  00185A  0E06               	movlw	6
  5723  00185C  5C0F               	subwf	?___almod^0,w,c
  5724  00185E  B0D8               	btfsc	status,0,c
  5725  001860  EF34  F00C         	goto	u3651
  5726  001864  EF36  F00C         	goto	u3650
  5727  001868                     u3651:
  5728  001868  EF5F  F00C         	goto	l334
  5729  00186C                     u3650:
  5730  00186C                     
  5731                           ;washes.c: 384:             ssdDigit(((cont / 10) % 10), 3);
  5732  00186C  0E03               	movlw	3
  5733  00186E  6E19               	movwf	ssdDigit@pos^0,c
  5734  001870  0E0A               	movlw	10
  5735  001872  6E05               	movwf	___aldiv@divisor^0,c
  5736  001874  0E00               	movlw	0
  5737  001876  6E06               	movwf	(___aldiv@divisor+1)^0,c
  5738  001878  0E00               	movlw	0
  5739  00187A  6E07               	movwf	(___aldiv@divisor+2)^0,c
  5740  00187C  0E00               	movlw	0
  5741  00187E  6E08               	movwf	(___aldiv@divisor+3)^0,c
  5742  001880  C053  F001         	movff	washFour@cont,___aldiv@dividend
  5743  001884  C054  F002         	movff	washFour@cont+1,___aldiv@dividend+1
  5744  001888  C055  F003         	movff	washFour@cont+2,___aldiv@dividend+2
  5745  00188C  C056  F004         	movff	washFour@cont+3,___aldiv@dividend+3
  5746  001890  ECC5  F016         	call	___aldiv	;wreg free
  5747  001894  C001  F00F         	movff	?___aldiv,___almod@dividend
  5748  001898  C002  F010         	movff	?___aldiv+1,___almod@dividend+1
  5749  00189C  C003  F011         	movff	?___aldiv+2,___almod@dividend+2
  5750  0018A0  C004  F012         	movff	?___aldiv+3,___almod@dividend+3
  5751  0018A4  0E0A               	movlw	10
  5752  0018A6  6E13               	movwf	___almod@divisor^0,c
  5753  0018A8  0E00               	movlw	0
  5754  0018AA  6E14               	movwf	(___almod@divisor+1)^0,c
  5755  0018AC  0E00               	movlw	0
  5756  0018AE  6E15               	movwf	(___almod@divisor+2)^0,c
  5757  0018B0  0E00               	movlw	0
  5758  0018B2  6E16               	movwf	(___almod@divisor+3)^0,c
  5759  0018B4  EC49  F019         	call	___almod	;wreg free
  5760  0018B8  500F               	movf	?___almod^0,w,c
  5761  0018BA  ECC4  F01C         	call	_ssdDigit
  5762  0018BE                     l334:
  5763                           
  5764                           ;washes.c: 386:         delayAux(2);
  5765  0018BE  0E00               	movlw	0
  5766  0018C0  6E02               	movwf	(delayAux@i+1)^0,c
  5767  0018C2  0E02               	movlw	2
  5768  0018C4  6E01               	movwf	delayAux@i^0,c
  5769  0018C6  ECA2  F01D         	call	_delayAux	;wreg free
  5770                           
  5771                           ;washes.c: 387:         if ((cont / 100) % 10 < 6) {
  5772  0018CA  0E64               	movlw	100
  5773  0018CC  6E05               	movwf	___aldiv@divisor^0,c
  5774  0018CE  0E00               	movlw	0
  5775  0018D0  6E06               	movwf	(___aldiv@divisor+1)^0,c
  5776  0018D2  0E00               	movlw	0
  5777  0018D4  6E07               	movwf	(___aldiv@divisor+2)^0,c
  5778  0018D6  0E00               	movlw	0
  5779  0018D8  6E08               	movwf	(___aldiv@divisor+3)^0,c
  5780  0018DA  C053  F001         	movff	washFour@cont,___aldiv@dividend
  5781  0018DE  C054  F002         	movff	washFour@cont+1,___aldiv@dividend+1
  5782  0018E2  C055  F003         	movff	washFour@cont+2,___aldiv@dividend+2
  5783  0018E6  C056  F004         	movff	washFour@cont+3,___aldiv@dividend+3
  5784  0018EA  ECC5  F016         	call	___aldiv	;wreg free
  5785  0018EE  C001  F00F         	movff	?___aldiv,___almod@dividend
  5786  0018F2  C002  F010         	movff	?___aldiv+1,___almod@dividend+1
  5787  0018F6  C003  F011         	movff	?___aldiv+2,___almod@dividend+2
  5788  0018FA  C004  F012         	movff	?___aldiv+3,___almod@dividend+3
  5789  0018FE  0E0A               	movlw	10
  5790  001900  6E13               	movwf	___almod@divisor^0,c
  5791  001902  0E00               	movlw	0
  5792  001904  6E14               	movwf	(___almod@divisor+1)^0,c
  5793  001906  0E00               	movlw	0
  5794  001908  6E15               	movwf	(___almod@divisor+2)^0,c
  5795  00190A  0E00               	movlw	0
  5796  00190C  6E16               	movwf	(___almod@divisor+3)^0,c
  5797  00190E  EC49  F019         	call	___almod	;wreg free
  5798  001912  BE12               	btfsc	(?___almod+3)^0,7,c
  5799  001914  EF99  F00C         	goto	u3660
  5800  001918  5012               	movf	(?___almod+3)^0,w,c
  5801  00191A  1011               	iorwf	(?___almod+2)^0,w,c
  5802  00191C  1010               	iorwf	(?___almod+1)^0,w,c
  5803  00191E  E107               	bnz	u3661
  5804  001920  0E06               	movlw	6
  5805  001922  5C0F               	subwf	?___almod^0,w,c
  5806  001924  B0D8               	btfsc	status,0,c
  5807  001926  EF97  F00C         	goto	u3661
  5808  00192A  EF99  F00C         	goto	u3660
  5809  00192E                     u3661:
  5810  00192E  EFC2  F00C         	goto	l335
  5811  001932                     u3660:
  5812  001932                     
  5813                           ;washes.c: 388:             ssdDigit(((cont / 100) % 10), 2);
  5814  001932  0E02               	movlw	2
  5815  001934  6E19               	movwf	ssdDigit@pos^0,c
  5816  001936  0E64               	movlw	100
  5817  001938  6E05               	movwf	___aldiv@divisor^0,c
  5818  00193A  0E00               	movlw	0
  5819  00193C  6E06               	movwf	(___aldiv@divisor+1)^0,c
  5820  00193E  0E00               	movlw	0
  5821  001940  6E07               	movwf	(___aldiv@divisor+2)^0,c
  5822  001942  0E00               	movlw	0
  5823  001944  6E08               	movwf	(___aldiv@divisor+3)^0,c
  5824  001946  C053  F001         	movff	washFour@cont,___aldiv@dividend
  5825  00194A  C054  F002         	movff	washFour@cont+1,___aldiv@dividend+1
  5826  00194E  C055  F003         	movff	washFour@cont+2,___aldiv@dividend+2
  5827  001952  C056  F004         	movff	washFour@cont+3,___aldiv@dividend+3
  5828  001956  ECC5  F016         	call	___aldiv	;wreg free
  5829  00195A  C001  F00F         	movff	?___aldiv,___almod@dividend
  5830  00195E  C002  F010         	movff	?___aldiv+1,___almod@dividend+1
  5831  001962  C003  F011         	movff	?___aldiv+2,___almod@dividend+2
  5832  001966  C004  F012         	movff	?___aldiv+3,___almod@dividend+3
  5833  00196A  0E0A               	movlw	10
  5834  00196C  6E13               	movwf	___almod@divisor^0,c
  5835  00196E  0E00               	movlw	0
  5836  001970  6E14               	movwf	(___almod@divisor+1)^0,c
  5837  001972  0E00               	movlw	0
  5838  001974  6E15               	movwf	(___almod@divisor+2)^0,c
  5839  001976  0E00               	movlw	0
  5840  001978  6E16               	movwf	(___almod@divisor+3)^0,c
  5841  00197A  EC49  F019         	call	___almod	;wreg free
  5842  00197E  500F               	movf	?___almod^0,w,c
  5843  001980  ECC4  F01C         	call	_ssdDigit
  5844  001984                     l335:
  5845                           
  5846                           ;washes.c: 390:         if ((cont / 100) % 10 >= 6) {
  5847  001984  0E64               	movlw	100
  5848  001986  6E05               	movwf	___aldiv@divisor^0,c
  5849  001988  0E00               	movlw	0
  5850  00198A  6E06               	movwf	(___aldiv@divisor+1)^0,c
  5851  00198C  0E00               	movlw	0
  5852  00198E  6E07               	movwf	(___aldiv@divisor+2)^0,c
  5853  001990  0E00               	movlw	0
  5854  001992  6E08               	movwf	(___aldiv@divisor+3)^0,c
  5855  001994  C053  F001         	movff	washFour@cont,___aldiv@dividend
  5856  001998  C054  F002         	movff	washFour@cont+1,___aldiv@dividend+1
  5857  00199C  C055  F003         	movff	washFour@cont+2,___aldiv@dividend+2
  5858  0019A0  C056  F004         	movff	washFour@cont+3,___aldiv@dividend+3
  5859  0019A4  ECC5  F016         	call	___aldiv	;wreg free
  5860  0019A8  C001  F00F         	movff	?___aldiv,___almod@dividend
  5861  0019AC  C002  F010         	movff	?___aldiv+1,___almod@dividend+1
  5862  0019B0  C003  F011         	movff	?___aldiv+2,___almod@dividend+2
  5863  0019B4  C004  F012         	movff	?___aldiv+3,___almod@dividend+3
  5864  0019B8  0E0A               	movlw	10
  5865  0019BA  6E13               	movwf	___almod@divisor^0,c
  5866  0019BC  0E00               	movlw	0
  5867  0019BE  6E14               	movwf	(___almod@divisor+1)^0,c
  5868  0019C0  0E00               	movlw	0
  5869  0019C2  6E15               	movwf	(___almod@divisor+2)^0,c
  5870  0019C4  0E00               	movlw	0
  5871  0019C6  6E16               	movwf	(___almod@divisor+3)^0,c
  5872  0019C8  EC49  F019         	call	___almod	;wreg free
  5873  0019CC  BE12               	btfsc	(?___almod+3)^0,7,c
  5874  0019CE  EFF4  F00C         	goto	u3671
  5875  0019D2  5012               	movf	(?___almod+3)^0,w,c
  5876  0019D4  1011               	iorwf	(?___almod+2)^0,w,c
  5877  0019D6  1010               	iorwf	(?___almod+1)^0,w,c
  5878  0019D8  E109               	bnz	u3670
  5879  0019DA  0E06               	movlw	6
  5880  0019DC  5C0F               	subwf	?___almod^0,w,c
  5881  0019DE  A0D8               	btfss	status,0,c
  5882  0019E0  EFF4  F00C         	goto	u3671
  5883  0019E4  EFF6  F00C         	goto	u3670
  5884  0019E8                     u3671:
  5885  0019E8  EF68  F00D         	goto	l3733
  5886  0019EC                     u3670:
  5887  0019EC                     
  5888                           ;washes.c: 391:             for (tempo = 0; tempo < 4; tempo++) {
  5889  0019EC  0E00               	movlw	0
  5890  0019EE  6E4F               	movwf	washFour@tempo^0,c
  5891  0019F0  0E00               	movlw	0
  5892  0019F2  6E50               	movwf	(washFour@tempo+1)^0,c
  5893  0019F4  0E00               	movlw	0
  5894  0019F6  6E51               	movwf	(washFour@tempo+2)^0,c
  5895  0019F8  0E00               	movlw	0
  5896  0019FA  6E52               	movwf	(washFour@tempo+3)^0,c
  5897  0019FC  C04F  F001         	movff	washFour@tempo,___flge@ff1
  5898  001A00  C050  F002         	movff	washFour@tempo+1,___flge@ff1+1
  5899  001A04  C051  F003         	movff	washFour@tempo+2,___flge@ff1+2
  5900  001A08  C052  F004         	movff	washFour@tempo+3,___flge@ff1+3
  5901  001A0C  0E00               	movlw	0
  5902  001A0E  6E05               	movwf	___flge@ff2^0,c
  5903  001A10  0E00               	movlw	0
  5904  001A12  6E06               	movwf	(___flge@ff2+1)^0,c
  5905  001A14  0E80               	movlw	128
  5906  001A16  6E07               	movwf	(___flge@ff2+2)^0,c
  5907  001A18  0E40               	movlw	64
  5908  001A1A  6E08               	movwf	(___flge@ff2+3)^0,c
  5909  001A1C  ECCF  F017         	call	___flge	;wreg free
  5910  001A20  A0D8               	btfss	status,0,c
  5911  001A22  EF15  F00D         	goto	u3681
  5912  001A26  EF17  F00D         	goto	u3680
  5913  001A2A                     u3681:
  5914  001A2A  EF19  F00D         	goto	l3719
  5915  001A2E                     u3680:
  5916  001A2E  EF68  F00D         	goto	l3733
  5917  001A32                     l3719:
  5918                           
  5919                           ;washes.c: 392:                 for (i = 0; i < 10; i++) {
  5920  001A32  0E00               	movlw	0
  5921  001A34  6E4E               	movwf	(washFour@i+1)^0,c
  5922  001A36  0E00               	movlw	0
  5923  001A38  6E4D               	movwf	washFour@i^0,c
  5924  001A3A                     l3725:
  5925                           
  5926                           ;washes.c: 393:                     cont--;
  5927  001A3A  0EFF               	movlw	255
  5928  001A3C  2653               	addwf	washFour@cont^0,f,c
  5929  001A3E  0EFF               	movlw	255
  5930  001A40  2254               	addwfc	(washFour@cont+1)^0,f,c
  5931  001A42  0EFF               	movlw	255
  5932  001A44  2255               	addwfc	(washFour@cont+2)^0,f,c
  5933  001A46  0EFF               	movlw	255
  5934  001A48  2256               	addwfc	(washFour@cont+3)^0,f,c
  5935  001A4A                     
  5936                           ;washes.c: 394:                 }
  5937  001A4A  4A4D               	infsnz	washFour@i^0,f,c
  5938  001A4C  2A4E               	incf	(washFour@i+1)^0,f,c
  5939  001A4E  BE4E               	btfsc	(washFour@i+1)^0,7,c
  5940  001A50  EF33  F00D         	goto	u3691
  5941  001A54  504E               	movf	(washFour@i+1)^0,w,c
  5942  001A56  E109               	bnz	u3690
  5943  001A58  0E0A               	movlw	10
  5944  001A5A  5C4D               	subwf	washFour@i^0,w,c
  5945  001A5C  A0D8               	btfss	status,0,c
  5946  001A5E  EF33  F00D         	goto	u3691
  5947  001A62  EF35  F00D         	goto	u3690
  5948  001A66                     u3691:
  5949  001A66  EF1D  F00D         	goto	l3725
  5950  001A6A                     u3690:
  5951  001A6A                     
  5952                           ;washes.c: 395:             }
  5953  001A6A  C04F  F001         	movff	washFour@tempo,___fladd@b
  5954  001A6E  C050  F002         	movff	washFour@tempo+1,___fladd@b+1
  5955  001A72  C051  F003         	movff	washFour@tempo+2,___fladd@b+2
  5956  001A76  C052  F004         	movff	washFour@tempo+3,___fladd@b+3
  5957  001A7A  0E00               	movlw	0
  5958  001A7C  6E05               	movwf	___fladd@a^0,c
  5959  001A7E  0E00               	movlw	0
  5960  001A80  6E06               	movwf	(___fladd@a+1)^0,c
  5961  001A82  0E80               	movlw	128
  5962  001A84  6E07               	movwf	(___fladd@a+2)^0,c
  5963  001A86  0E3F               	movlw	63
  5964  001A88  6E08               	movwf	(___fladd@a+3)^0,c
  5965  001A8A  EC04  F00E         	call	___fladd	;wreg free
  5966  001A8E  C001  F04F         	movff	?___fladd,washFour@tempo
  5967  001A92  C002  F050         	movff	?___fladd+1,washFour@tempo+1
  5968  001A96  C003  F051         	movff	?___fladd+2,washFour@tempo+2
  5969  001A9A  C004  F052         	movff	?___fladd+3,washFour@tempo+3
  5970  001A9E  C04F  F001         	movff	washFour@tempo,___flge@ff1
  5971  001AA2  C050  F002         	movff	washFour@tempo+1,___flge@ff1+1
  5972  001AA6  C051  F003         	movff	washFour@tempo+2,___flge@ff1+2
  5973  001AAA  C052  F004         	movff	washFour@tempo+3,___flge@ff1+3
  5974  001AAE  0E00               	movlw	0
  5975  001AB0  6E05               	movwf	___flge@ff2^0,c
  5976  001AB2  0E00               	movlw	0
  5977  001AB4  6E06               	movwf	(___flge@ff2+1)^0,c
  5978  001AB6  0E80               	movlw	128
  5979  001AB8  6E07               	movwf	(___flge@ff2+2)^0,c
  5980  001ABA  0E40               	movlw	64
  5981  001ABC  6E08               	movwf	(___flge@ff2+3)^0,c
  5982  001ABE  ECCF  F017         	call	___flge	;wreg free
  5983  001AC2  A0D8               	btfss	status,0,c
  5984  001AC4  EF66  F00D         	goto	u3701
  5985  001AC8  EF68  F00D         	goto	u3700
  5986  001ACC                     u3701:
  5987  001ACC  EF19  F00D         	goto	l3719
  5988  001AD0                     u3700:
  5989  001AD0                     l3733:
  5990                           
  5991                           ;washes.c: 398:         delayAux(2);
  5992  001AD0  0E00               	movlw	0
  5993  001AD2  6E02               	movwf	(delayAux@i+1)^0,c
  5994  001AD4  0E02               	movlw	2
  5995  001AD6  6E01               	movwf	delayAux@i^0,c
  5996  001AD8  ECA2  F01D         	call	_delayAux	;wreg free
  5997                           
  5998                           ;washes.c: 399:         ssdDigit(((cont / 1000) % 10), 1);
  5999  001ADC  0E01               	movlw	1
  6000  001ADE  6E19               	movwf	ssdDigit@pos^0,c
  6001  001AE0  0EE8               	movlw	232
  6002  001AE2  6E05               	movwf	___aldiv@divisor^0,c
  6003  001AE4  0E03               	movlw	3
  6004  001AE6  6E06               	movwf	(___aldiv@divisor+1)^0,c
  6005  001AE8  0E00               	movlw	0
  6006  001AEA  6E07               	movwf	(___aldiv@divisor+2)^0,c
  6007  001AEC  0E00               	movlw	0
  6008  001AEE  6E08               	movwf	(___aldiv@divisor+3)^0,c
  6009  001AF0  C053  F001         	movff	washFour@cont,___aldiv@dividend
  6010  001AF4  C054  F002         	movff	washFour@cont+1,___aldiv@dividend+1
  6011  001AF8  C055  F003         	movff	washFour@cont+2,___aldiv@dividend+2
  6012  001AFC  C056  F004         	movff	washFour@cont+3,___aldiv@dividend+3
  6013  001B00  ECC5  F016         	call	___aldiv	;wreg free
  6014  001B04  C001  F00F         	movff	?___aldiv,___almod@dividend
  6015  001B08  C002  F010         	movff	?___aldiv+1,___almod@dividend+1
  6016  001B0C  C003  F011         	movff	?___aldiv+2,___almod@dividend+2
  6017  001B10  C004  F012         	movff	?___aldiv+3,___almod@dividend+3
  6018  001B14  0E0A               	movlw	10
  6019  001B16  6E13               	movwf	___almod@divisor^0,c
  6020  001B18  0E00               	movlw	0
  6021  001B1A  6E14               	movwf	(___almod@divisor+1)^0,c
  6022  001B1C  0E00               	movlw	0
  6023  001B1E  6E15               	movwf	(___almod@divisor+2)^0,c
  6024  001B20  0E00               	movlw	0
  6025  001B22  6E16               	movwf	(___almod@divisor+3)^0,c
  6026  001B24  EC49  F019         	call	___almod	;wreg free
  6027  001B28  500F               	movf	?___almod^0,w,c
  6028  001B2A  ECC4  F01C         	call	_ssdDigit
  6029                           
  6030                           ;washes.c: 400:         delayAux(2);
  6031  001B2E  0E00               	movlw	0
  6032  001B30  6E02               	movwf	(delayAux@i+1)^0,c
  6033  001B32  0E02               	movlw	2
  6034  001B34  6E01               	movwf	delayAux@i^0,c
  6035  001B36  ECA2  F01D         	call	_delayAux	;wreg free
  6036                           
  6037                           ;washes.c: 401:         ssdDigit(((cont / 10000) % 10), 0);
  6038  001B3A  0E00               	movlw	0
  6039  001B3C  6E19               	movwf	ssdDigit@pos^0,c
  6040  001B3E  0E10               	movlw	16
  6041  001B40  6E05               	movwf	___aldiv@divisor^0,c
  6042  001B42  0E27               	movlw	39
  6043  001B44  6E06               	movwf	(___aldiv@divisor+1)^0,c
  6044  001B46  0E00               	movlw	0
  6045  001B48  6E07               	movwf	(___aldiv@divisor+2)^0,c
  6046  001B4A  0E00               	movlw	0
  6047  001B4C  6E08               	movwf	(___aldiv@divisor+3)^0,c
  6048  001B4E  C053  F001         	movff	washFour@cont,___aldiv@dividend
  6049  001B52  C054  F002         	movff	washFour@cont+1,___aldiv@dividend+1
  6050  001B56  C055  F003         	movff	washFour@cont+2,___aldiv@dividend+2
  6051  001B5A  C056  F004         	movff	washFour@cont+3,___aldiv@dividend+3
  6052  001B5E  ECC5  F016         	call	___aldiv	;wreg free
  6053  001B62  C001  F00F         	movff	?___aldiv,___almod@dividend
  6054  001B66  C002  F010         	movff	?___aldiv+1,___almod@dividend+1
  6055  001B6A  C003  F011         	movff	?___aldiv+2,___almod@dividend+2
  6056  001B6E  C004  F012         	movff	?___aldiv+3,___almod@dividend+3
  6057  001B72  0E0A               	movlw	10
  6058  001B74  6E13               	movwf	___almod@divisor^0,c
  6059  001B76  0E00               	movlw	0
  6060  001B78  6E14               	movwf	(___almod@divisor+1)^0,c
  6061  001B7A  0E00               	movlw	0
  6062  001B7C  6E15               	movwf	(___almod@divisor+2)^0,c
  6063  001B7E  0E00               	movlw	0
  6064  001B80  6E16               	movwf	(___almod@divisor+3)^0,c
  6065  001B82  EC49  F019         	call	___almod	;wreg free
  6066  001B86  500F               	movf	?___almod^0,w,c
  6067  001B88  ECC4  F01C         	call	_ssdDigit
  6068                           
  6069                           ;washes.c: 402:         delayAux(2);
  6070  001B8C  0E00               	movlw	0
  6071  001B8E  6E02               	movwf	(delayAux@i+1)^0,c
  6072  001B90  0E02               	movlw	2
  6073  001B92  6E01               	movwf	delayAux@i^0,c
  6074  001B94  ECA2  F01D         	call	_delayAux	;wreg free
  6075  001B98                     
  6076                           ;washes.c: 403:         ssdUpdate();
  6077  001B98  EC1D  F016         	call	_ssdUpdate	;wreg free
  6078  001B9C                     
  6079                           ;washes.c: 404:         delayAux(2);
  6080  001B9C  0E00               	movlw	0
  6081  001B9E  6E02               	movwf	(delayAux@i+1)^0,c
  6082  001BA0  0E02               	movlw	2
  6083  001BA2  6E01               	movwf	delayAux@i^0,c
  6084  001BA4  ECA2  F01D         	call	_delayAux	;wreg free
  6085  001BA8                     
  6086                           ;washes.c: 405:         c--;
  6087  001BA8  064B               	decf	washFour@c^0,f,c
  6088  001BAA  A0D8               	btfss	status,0,c
  6089  001BAC  064C               	decf	(washFour@c+1)^0,f,c
  6090  001BAE                     l3741:
  6091                           
  6092                           ;washes.c: 353:     while (cont >= 0) {
  6093  001BAE  BE56               	btfsc	(washFour@cont+3)^0,7,c
  6094  001BB0  EFDE  F00D         	goto	u3710
  6095  001BB4  EFDC  F00D         	goto	u3711
  6096  001BB8                     u3711:
  6097  001BB8  EF7E  F00B         	goto	l3665
  6098  001BBC                     u3710:
  6099  001BBC                     
  6100                           ;washes.c: 409:     PORTA = 0x00;
  6101  001BBC  0E00               	movlw	0
  6102  001BBE  6E80               	movwf	128,c	;volatile
  6103  001BC0                     
  6104                           ;washes.c: 410:     pwmSet1(0);
  6105  001BC0  0E00               	movlw	0
  6106  001BC2  ECF2  F01B         	call	_pwmSet1
  6107  001BC6                     
  6108                           ;washes.c: 413:     printf("Finalizada!", 10);
  6109  001BC6  0E12               	movlw	low STR_1
  6110  001BC8  6E09               	movwf	printf@msg^0,c
  6111  001BCA  0E06               	movlw	high STR_1
  6112  001BCC  6E0A               	movwf	(printf@msg+1)^0,c
  6113  001BCE  0E00               	movlw	0
  6114  001BD0  6E0C               	movwf	(printf@j+1)^0,c
  6115  001BD2  0E0A               	movlw	10
  6116  001BD4  6E0B               	movwf	printf@j^0,c
  6117  001BD6  ECBF  F019         	call	_printf	;wreg free
  6118  001BDA                     
  6119                           ;washes.c: 414:     buzzer();
  6120  001BDA  EC5E  F01C         	call	_buzzer	;wreg free
  6121  001BDE                     
  6122                           ;washes.c: 416:     PORTB = 0x00;
  6123  001BDE  0E00               	movlw	0
  6124  001BE0  6E81               	movwf	129,c	;volatile
  6125  001BE2                     
  6126                           ;washes.c: 417:     PORTD = 0x00;
  6127  001BE2  0E00               	movlw	0
  6128  001BE4  6E83               	movwf	131,c	;volatile
  6129  001BE6                     
  6130                           ;washes.c: 419:     delay(3000);
  6131  001BE6  0E0B               	movlw	11
  6132  001BE8  6E02               	movwf	(delay@temp+1)^0,c
  6133  001BEA  0EB8               	movlw	184
  6134  001BEC  6E01               	movwf	delay@temp^0,c
  6135  001BEE  EC92  F01C         	call	_delay	;wreg free
  6136  001BF2                     
  6137                           ;washes.c: 421:     printf(msg5, 64);
  6138  001BF2  0EB0               	movlw	low _msg5
  6139  001BF4  6E09               	movwf	printf@msg^0,c
  6140  001BF6  0E03               	movlw	high _msg5
  6141  001BF8  6E0A               	movwf	(printf@msg+1)^0,c
  6142  001BFA  0E00               	movlw	0
  6143  001BFC  6E0C               	movwf	(printf@j+1)^0,c
  6144  001BFE  0E40               	movlw	64
  6145  001C00  6E0B               	movwf	printf@j^0,c
  6146  001C02  ECBF  F019         	call	_printf	;wreg free
  6147  001C06  0012               	return		;funcret
  6148  001C08                     __end_of_washFour:
  6149                           	callstack 0
  6150                           
  6151 ;; *************** function _ssdUpdate *****************
  6152 ;; Defined at:
  6153 ;;		line 55 in file "ssd.c"
  6154 ;; Parameters:    Size  Location     Type
  6155 ;;		None
  6156 ;; Auto vars:     Size  Location     Type
  6157 ;;		None
  6158 ;; Return value:  Size  Location     Type
  6159 ;;                  1    wreg      void 
  6160 ;; Registers used:
  6161 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6162 ;; Tracked objects:
  6163 ;;		On entry : 0/0
  6164 ;;		On exit  : 0/0
  6165 ;;		Unchanged: 0/0
  6166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6167 ;;      Params:         0       0       0       0       0       0       0
  6168 ;;      Locals:         0       0       0       0       0       0       0
  6169 ;;      Temps:          2       0       0       0       0       0       0
  6170 ;;      Totals:         2       0       0       0       0       0       0
  6171 ;;Total ram usage:        2 bytes
  6172 ;; Hardware stack levels used: 1
  6173 ;; Hardware stack levels required when called: 1
  6174 ;; This function calls:
  6175 ;;		_digitalWrite
  6176 ;; This function is called by:
  6177 ;;		_washOne
  6178 ;;		_washTwo
  6179 ;;		_washThree
  6180 ;;		_washFour
  6181 ;;		_ssdTimer
  6182 ;; This function uses a non-reentrant model
  6183 ;;
  6184                           
  6185                           	psect	text13
  6186  002C3A                     __ptext13:
  6187                           	callstack 0
  6188  002C3A                     _ssdUpdate:
  6189                           	callstack 26
  6190  002C3A                     
  6191                           ;ssd.c: 59:     TRISD= 0x00;
  6192  002C3A  0E00               	movlw	0
  6193  002C3C  6E95               	movwf	149,c	;volatile
  6194  002C3E                     
  6195                           ;ssd.c: 61:     digitalWrite(PIN_A2,0);
  6196  002C3E  0E00               	movlw	0
  6197  002C40  6E02               	movwf	(digitalWrite@pin+1)^0,c
  6198  002C42  0E02               	movlw	2
  6199  002C44  6E01               	movwf	digitalWrite@pin^0,c
  6200  002C46  0E00               	movlw	0
  6201  002C48  6E04               	movwf	(digitalWrite@value+1)^0,c
  6202  002C4A  0E00               	movlw	0
  6203  002C4C  6E03               	movwf	digitalWrite@value^0,c
  6204  002C4E  EC7F  F013         	call	_digitalWrite	;wreg free
  6205  002C52                     
  6206                           ;ssd.c: 62:     digitalWrite(PIN_A3,0);
  6207  002C52  0E00               	movlw	0
  6208  002C54  6E02               	movwf	(digitalWrite@pin+1)^0,c
  6209  002C56  0E03               	movlw	3
  6210  002C58  6E01               	movwf	digitalWrite@pin^0,c
  6211  002C5A  0E00               	movlw	0
  6212  002C5C  6E04               	movwf	(digitalWrite@value+1)^0,c
  6213  002C5E  0E00               	movlw	0
  6214  002C60  6E03               	movwf	digitalWrite@value^0,c
  6215  002C62  EC7F  F013         	call	_digitalWrite	;wreg free
  6216  002C66                     
  6217                           ;ssd.c: 63:     digitalWrite(PIN_A4,0);
  6218  002C66  0E00               	movlw	0
  6219  002C68  6E02               	movwf	(digitalWrite@pin+1)^0,c
  6220  002C6A  0E04               	movlw	4
  6221  002C6C  6E01               	movwf	digitalWrite@pin^0,c
  6222  002C6E  0E00               	movlw	0
  6223  002C70  6E04               	movwf	(digitalWrite@value+1)^0,c
  6224  002C72  0E00               	movlw	0
  6225  002C74  6E03               	movwf	digitalWrite@value^0,c
  6226  002C76  EC7F  F013         	call	_digitalWrite	;wreg free
  6227  002C7A                     
  6228                           ;ssd.c: 64:     digitalWrite(PIN_A5,0);
  6229  002C7A  0E00               	movlw	0
  6230  002C7C  6E02               	movwf	(digitalWrite@pin+1)^0,c
  6231  002C7E  0E05               	movlw	5
  6232  002C80  6E01               	movwf	digitalWrite@pin^0,c
  6233  002C82  0E00               	movlw	0
  6234  002C84  6E04               	movwf	(digitalWrite@value+1)^0,c
  6235  002C86  0E00               	movlw	0
  6236  002C88  6E03               	movwf	digitalWrite@value^0,c
  6237  002C8A  EC7F  F013         	call	_digitalWrite	;wreg free
  6238                           
  6239                           ;ssd.c: 67:     PORTD = 0x00;
  6240  002C8E  0E00               	movlw	0
  6241  002C90  6E83               	movwf	131,c	;volatile
  6242                           
  6243                           ;ssd.c: 70:     switch (display)
  6244  002C92  EFA7  F016         	goto	l2971
  6245  002C96                     l2943:
  6246                           
  6247                           ;ssd.c: 73:             PORTD = valor[v0];
  6248  002C96  0E01               	movlw	low _valor@ssd$F340
  6249  002C98  2462               	addwf	_v0^0,w,c
  6250  002C9A  6EF6               	movwf	tblptrl,c
  6251  002C9C  6AF7               	clrf	tblptrh,c
  6252  002C9E  0E06               	movlw	high _valor@ssd$F340
  6253  002CA0  22F7               	addwfc	tblptrh,f,c
  6254  002CA2                     	if	0	;There are less than 3 active tblptr bytes
  6255  002CA2                     	endif
  6256  002CA2  0008               	tblrd		*
  6257  002CA4  CFF5 FF83          	movff	tablat,3971	;volatile
  6258  002CA8                     
  6259                           ;ssd.c: 74:             digitalWrite(PIN_A2,1);
  6260  002CA8  0E00               	movlw	0
  6261  002CAA  6E02               	movwf	(digitalWrite@pin+1)^0,c
  6262  002CAC  0E02               	movlw	2
  6263  002CAE  6E01               	movwf	digitalWrite@pin^0,c
  6264  002CB0  0E00               	movlw	0
  6265  002CB2  6E04               	movwf	(digitalWrite@value+1)^0,c
  6266  002CB4  0E01               	movlw	1
  6267  002CB6  6E03               	movwf	digitalWrite@value^0,c
  6268  002CB8  EC7F  F013         	call	_digitalWrite	;wreg free
  6269  002CBC                     
  6270                           ;ssd.c: 75:             display = 1;
  6271  002CBC  0E01               	movlw	1
  6272  002CBE  6E63               	movwf	_display^0,c
  6273                           
  6274                           ;ssd.c: 76:             break;
  6275  002CC0  EFC4  F016         	goto	l410
  6276  002CC4                     l2949:
  6277                           
  6278                           ;ssd.c: 79:             PORTD = valor[v1];
  6279  002CC4  0E01               	movlw	low _valor@ssd$F340
  6280  002CC6  2461               	addwf	_v1^0,w,c
  6281  002CC8  6EF6               	movwf	tblptrl,c
  6282  002CCA  6AF7               	clrf	tblptrh,c
  6283  002CCC  0E06               	movlw	high _valor@ssd$F340
  6284  002CCE  22F7               	addwfc	tblptrh,f,c
  6285  002CD0                     	if	0	;There are less than 3 active tblptr bytes
  6286  002CD0                     	endif
  6287  002CD0  0008               	tblrd		*
  6288  002CD2  CFF5 FF83          	movff	tablat,3971	;volatile
  6289  002CD6                     
  6290                           ;ssd.c: 80:             digitalWrite(PIN_A3,1);
  6291  002CD6  0E00               	movlw	0
  6292  002CD8  6E02               	movwf	(digitalWrite@pin+1)^0,c
  6293  002CDA  0E03               	movlw	3
  6294  002CDC  6E01               	movwf	digitalWrite@pin^0,c
  6295  002CDE  0E00               	movlw	0
  6296  002CE0  6E04               	movwf	(digitalWrite@value+1)^0,c
  6297  002CE2  0E01               	movlw	1
  6298  002CE4  6E03               	movwf	digitalWrite@value^0,c
  6299  002CE6  EC7F  F013         	call	_digitalWrite	;wreg free
  6300  002CEA                     
  6301                           ;ssd.c: 81:             display = 2;
  6302  002CEA  0E02               	movlw	2
  6303  002CEC  6E63               	movwf	_display^0,c
  6304                           
  6305                           ;ssd.c: 82:             break;
  6306  002CEE  EFC4  F016         	goto	l410
  6307  002CF2                     l2955:
  6308                           
  6309                           ;ssd.c: 85:             PORTD = valor[v2];
  6310  002CF2  0E01               	movlw	low _valor@ssd$F340
  6311  002CF4  2460               	addwf	_v2^0,w,c
  6312  002CF6  6EF6               	movwf	tblptrl,c
  6313  002CF8  6AF7               	clrf	tblptrh,c
  6314  002CFA  0E06               	movlw	high _valor@ssd$F340
  6315  002CFC  22F7               	addwfc	tblptrh,f,c
  6316  002CFE                     	if	0	;There are less than 3 active tblptr bytes
  6317  002CFE                     	endif
  6318  002CFE  0008               	tblrd		*
  6319  002D00  CFF5 FF83          	movff	tablat,3971	;volatile
  6320  002D04                     
  6321                           ;ssd.c: 86:             digitalWrite(PIN_A4,1);
  6322  002D04  0E00               	movlw	0
  6323  002D06  6E02               	movwf	(digitalWrite@pin+1)^0,c
  6324  002D08  0E04               	movlw	4
  6325  002D0A  6E01               	movwf	digitalWrite@pin^0,c
  6326  002D0C  0E00               	movlw	0
  6327  002D0E  6E04               	movwf	(digitalWrite@value+1)^0,c
  6328  002D10  0E01               	movlw	1
  6329  002D12  6E03               	movwf	digitalWrite@value^0,c
  6330  002D14  EC7F  F013         	call	_digitalWrite	;wreg free
  6331  002D18                     
  6332                           ;ssd.c: 87:             display = 3;
  6333  002D18  0E03               	movlw	3
  6334  002D1A  6E63               	movwf	_display^0,c
  6335                           
  6336                           ;ssd.c: 88:             break;
  6337  002D1C  EFC4  F016         	goto	l410
  6338  002D20                     l2961:
  6339                           
  6340                           ;ssd.c: 91:             PORTD = valor[v3];
  6341  002D20  0E01               	movlw	low _valor@ssd$F340
  6342  002D22  245F               	addwf	_v3^0,w,c
  6343  002D24  6EF6               	movwf	tblptrl,c
  6344  002D26  6AF7               	clrf	tblptrh,c
  6345  002D28  0E06               	movlw	high _valor@ssd$F340
  6346  002D2A  22F7               	addwfc	tblptrh,f,c
  6347  002D2C                     	if	0	;There are less than 3 active tblptr bytes
  6348  002D2C                     	endif
  6349  002D2C  0008               	tblrd		*
  6350  002D2E  CFF5 FF83          	movff	tablat,3971	;volatile
  6351  002D32                     
  6352                           ;ssd.c: 92:             digitalWrite(PIN_A5,1);
  6353  002D32  0E00               	movlw	0
  6354  002D34  6E02               	movwf	(digitalWrite@pin+1)^0,c
  6355  002D36  0E05               	movlw	5
  6356  002D38  6E01               	movwf	digitalWrite@pin^0,c
  6357  002D3A  0E00               	movlw	0
  6358  002D3C  6E04               	movwf	(digitalWrite@value+1)^0,c
  6359  002D3E  0E01               	movlw	1
  6360  002D40  6E03               	movwf	digitalWrite@value^0,c
  6361  002D42  EC7F  F013         	call	_digitalWrite	;wreg free
  6362  002D46                     l2965:
  6363                           
  6364                           ;ssd.c: 93:             display = 0;
  6365  002D46  0E00               	movlw	0
  6366  002D48  6E63               	movwf	_display^0,c
  6367                           
  6368                           ;ssd.c: 94:             break;
  6369  002D4A  EFC4  F016         	goto	l410
  6370  002D4E                     l2971:
  6371  002D4E  5063               	movf	_display^0,w,c
  6372  002D50  6E07               	movwf	??_ssdUpdate^0,c
  6373  002D52  6A08               	clrf	(??_ssdUpdate+1)^0,c
  6374                           
  6375                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6376                           ; Switch size 1, requested type "simple"
  6377                           ; Number of cases is 1, Range of values is 0 to 0
  6378                           ; switch strategies available:
  6379                           ; Name         Instructions Cycles
  6380                           ; simple_byte            4     3 (average)
  6381                           ;	Chosen strategy is simple_byte
  6382  002D54  5008               	movf	(??_ssdUpdate+1)^0,w,c
  6383  002D56  0A00               	xorlw	0	; case 0
  6384  002D58  B4D8               	btfsc	status,2,c
  6385  002D5A  EFB1  F016         	goto	l4103
  6386  002D5E  EFA3  F016         	goto	l2965
  6387  002D62                     l4103:
  6388                           
  6389                           ; Switch size 1, requested type "simple"
  6390                           ; Number of cases is 4, Range of values is 0 to 3
  6391                           ; switch strategies available:
  6392                           ; Name         Instructions Cycles
  6393                           ; simple_byte           13     7 (average)
  6394                           ;	Chosen strategy is simple_byte
  6395  002D62  5007               	movf	??_ssdUpdate^0,w,c
  6396  002D64  0A00               	xorlw	0	; case 0
  6397  002D66  B4D8               	btfsc	status,2,c
  6398  002D68  EF4B  F016         	goto	l2943
  6399  002D6C  0A01               	xorlw	1	; case 1
  6400  002D6E  B4D8               	btfsc	status,2,c
  6401  002D70  EF62  F016         	goto	l2949
  6402  002D74  0A03               	xorlw	3	; case 2
  6403  002D76  B4D8               	btfsc	status,2,c
  6404  002D78  EF79  F016         	goto	l2955
  6405  002D7C  0A01               	xorlw	1	; case 3
  6406  002D7E  B4D8               	btfsc	status,2,c
  6407  002D80  EF90  F016         	goto	l2961
  6408  002D84  EFA3  F016         	goto	l2965
  6409  002D88                     l410:
  6410  002D88  0012               	return		;funcret
  6411  002D8A                     __end_of_ssdUpdate:
  6412                           	callstack 0
  6413                           
  6414 ;; *************** function _ssdDigit *****************
  6415 ;; Defined at:
  6416 ;;		line 39 in file "ssd.c"
  6417 ;; Parameters:    Size  Location     Type
  6418 ;;  val             1    wreg     unsigned char 
  6419 ;;  pos             1   24[COMRAM] unsigned char 
  6420 ;; Auto vars:     Size  Location     Type
  6421 ;;  val             1   25[COMRAM] unsigned char 
  6422 ;; Return value:  Size  Location     Type
  6423 ;;                  1    wreg      void 
  6424 ;; Registers used:
  6425 ;;		wreg, status,2, status,0
  6426 ;; Tracked objects:
  6427 ;;		On entry : 0/0
  6428 ;;		On exit  : 0/0
  6429 ;;		Unchanged: 0/0
  6430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6431 ;;      Params:         1       0       0       0       0       0       0
  6432 ;;      Locals:         1       0       0       0       0       0       0
  6433 ;;      Temps:          0       0       0       0       0       0       0
  6434 ;;      Totals:         2       0       0       0       0       0       0
  6435 ;;Total ram usage:        2 bytes
  6436 ;; Hardware stack levels used: 1
  6437 ;; This function calls:
  6438 ;;		Nothing
  6439 ;; This function is called by:
  6440 ;;		_washOne
  6441 ;;		_washTwo
  6442 ;;		_washThree
  6443 ;;		_washFour
  6444 ;;		_ssdTimer
  6445 ;; This function uses a non-reentrant model
  6446 ;;
  6447                           
  6448                           	psect	text14
  6449  003988                     __ptext14:
  6450                           	callstack 0
  6451  003988                     _ssdDigit:
  6452                           	callstack 27
  6453                           
  6454                           ;incstack = 0
  6455                           ;ssdDigit@val stored from wreg
  6456  003988  6E1A               	movwf	ssdDigit@val^0,c
  6457  00398A                     
  6458                           ;ssd.c: 40:     if (pos == 0) {
  6459  00398A  5019               	movf	ssdDigit@pos^0,w,c
  6460  00398C  A4D8               	btfss	status,2,c
  6461  00398E  EFCB  F01C         	goto	u2561
  6462  003992  EFCD  F01C         	goto	u2560
  6463  003996                     u2561:
  6464  003996  EFCF  F01C         	goto	l2915
  6465  00399A                     u2560:
  6466  00399A                     
  6467                           ;ssd.c: 41:         v0 = val;
  6468  00399A  C01A  F062         	movff	ssdDigit@val,_v0
  6469  00399E                     l2915:
  6470                           
  6471                           ;ssd.c: 43:     if (pos == 1) {
  6472  00399E  0419               	decf	ssdDigit@pos^0,w,c
  6473  0039A0  A4D8               	btfss	status,2,c
  6474  0039A2  EFD5  F01C         	goto	u2571
  6475  0039A6  EFD7  F01C         	goto	u2570
  6476  0039AA                     u2571:
  6477  0039AA  EFD9  F01C         	goto	l2919
  6478  0039AE                     u2570:
  6479  0039AE                     
  6480                           ;ssd.c: 44:         v1 = val;
  6481  0039AE  C01A  F061         	movff	ssdDigit@val,_v1
  6482  0039B2                     l2919:
  6483                           
  6484                           ;ssd.c: 46:     if (pos == 2) {
  6485  0039B2  0E02               	movlw	2
  6486  0039B4  1819               	xorwf	ssdDigit@pos^0,w,c
  6487  0039B6  A4D8               	btfss	status,2,c
  6488  0039B8  EFE0  F01C         	goto	u2581
  6489  0039BC  EFE2  F01C         	goto	u2580
  6490  0039C0                     u2581:
  6491  0039C0  EFE4  F01C         	goto	l2923
  6492  0039C4                     u2580:
  6493  0039C4                     
  6494                           ;ssd.c: 47:         v2 = val;
  6495  0039C4  C01A  F060         	movff	ssdDigit@val,_v2
  6496  0039C8                     l2923:
  6497                           
  6498                           ;ssd.c: 49:     if (pos == 3) {
  6499  0039C8  0E03               	movlw	3
  6500  0039CA  1819               	xorwf	ssdDigit@pos^0,w,c
  6501  0039CC  A4D8               	btfss	status,2,c
  6502  0039CE  EFEB  F01C         	goto	u2591
  6503  0039D2  EFED  F01C         	goto	u2590
  6504  0039D6                     u2591:
  6505  0039D6  EFEF  F01C         	goto	l400
  6506  0039DA                     u2590:
  6507  0039DA                     
  6508                           ;ssd.c: 50:         v3 = val;
  6509  0039DA  C01A  F05F         	movff	ssdDigit@val,_v3
  6510  0039DE                     l400:
  6511  0039DE  0012               	return		;funcret
  6512  0039E0                     __end_of_ssdDigit:
  6513                           	callstack 0
  6514                           
  6515 ;; *************** function _pwmSet1 *****************
  6516 ;; Defined at:
  6517 ;;		line 25 in file "pwm.c"
  6518 ;; Parameters:    Size  Location     Type
  6519 ;;  porcento        1    wreg     unsigned char 
  6520 ;; Auto vars:     Size  Location     Type
  6521 ;;  porcento        1    9[COMRAM] unsigned char 
  6522 ;;  val             2   10[COMRAM] unsigned int 
  6523 ;; Return value:  Size  Location     Type
  6524 ;;                  1    wreg      void 
  6525 ;; Registers used:
  6526 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6527 ;; Tracked objects:
  6528 ;;		On entry : 0/0
  6529 ;;		On exit  : 0/0
  6530 ;;		Unchanged: 0/0
  6531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6532 ;;      Params:         0       0       0       0       0       0       0
  6533 ;;      Locals:         3       0       0       0       0       0       0
  6534 ;;      Temps:          2       0       0       0       0       0       0
  6535 ;;      Totals:         5       0       0       0       0       0       0
  6536 ;;Total ram usage:        5 bytes
  6537 ;; Hardware stack levels used: 1
  6538 ;; Hardware stack levels required when called: 1
  6539 ;; This function calls:
  6540 ;;		___lwdiv
  6541 ;;		___wmul
  6542 ;; This function is called by:
  6543 ;;		_preWash
  6544 ;;		_washOne
  6545 ;;		_washTwo
  6546 ;;		_washThree
  6547 ;;		_washFour
  6548 ;; This function uses a non-reentrant model
  6549 ;;
  6550                           
  6551                           	psect	text15
  6552  0037E4                     __ptext15:
  6553                           	callstack 0
  6554  0037E4                     _pwmSet1:
  6555                           	callstack 27
  6556                           
  6557                           ;incstack = 0
  6558                           ;pwmSet1@porcento stored from wreg
  6559  0037E4  6E0A               	movwf	pwmSet1@porcento^0,c
  6560  0037E6                     
  6561                           ;pwm.c: 31:  unsigned int val = ((unsigned int)porcento) *(PR2+1);
  6562  0037E6  0E01               	movlw	1
  6563  0037E8  24CB               	addwf	203,w,c	;volatile
  6564  0037EA  6E01               	movwf	___wmul@multiplier^0,c
  6565  0037EC  6A02               	clrf	(___wmul@multiplier+1)^0,c
  6566  0037EE  0E00               	movlw	0
  6567  0037F0  2202               	addwfc	(___wmul@multiplier+1)^0,f,c
  6568  0037F2  C00A  F003         	movff	pwmSet1@porcento,___wmul@multiplicand
  6569  0037F6  6A04               	clrf	(___wmul@multiplicand+1)^0,c
  6570  0037F8  ECBA  F01D         	call	___wmul	;wreg free
  6571  0037FC  C001  F00B         	movff	?___wmul,pwmSet1@val
  6572  003800  C002  F00C         	movff	?___wmul+1,pwmSet1@val+1
  6573  003804                     
  6574                           ;pwm.c: 32:  val = val / 25;
  6575  003804  C00B  F001         	movff	pwmSet1@val,___lwdiv@dividend
  6576  003808  C00C  F002         	movff	pwmSet1@val+1,___lwdiv@dividend+1
  6577  00380C  0E00               	movlw	0
  6578  00380E  6E04               	movwf	(___lwdiv@divisor+1)^0,c
  6579  003810  0E19               	movlw	25
  6580  003812  6E03               	movwf	___lwdiv@divisor^0,c
  6581  003814  ECB8  F01B         	call	___lwdiv	;wreg free
  6582  003818  C001  F00B         	movff	?___lwdiv,pwmSet1@val
  6583  00381C  C002  F00C         	movff	?___lwdiv+1,pwmSet1@val+1
  6584  003820                     
  6585                           ;pwm.c: 34:  val &= 0x03ff;
  6586  003820  0EFF               	movlw	255
  6587  003822  160B               	andwf	pwmSet1@val^0,f,c
  6588  003824  0E03               	movlw	3
  6589  003826  160C               	andwf	(pwmSet1@val+1)^0,f,c
  6590  003828                     
  6591                           ;pwm.c: 36:  CCPR1L = val >> 2;
  6592  003828  C00B  F008         	movff	pwmSet1@val,??_pwmSet1
  6593  00382C  C00C  F009         	movff	pwmSet1@val+1,??_pwmSet1+1
  6594  003830  90D8               	bcf	status,0,c
  6595  003832  3209               	rrcf	(??_pwmSet1+1)^0,f,c
  6596  003834  3208               	rrcf	??_pwmSet1^0,f,c
  6597  003836  90D8               	bcf	status,0,c
  6598  003838  3209               	rrcf	(??_pwmSet1+1)^0,f,c
  6599  00383A  3208               	rrcf	??_pwmSet1^0,f,c
  6600  00383C  5008               	movf	??_pwmSet1^0,w,c
  6601  00383E  6EBE               	movwf	190,c	;volatile
  6602  003840                     
  6603                           ;pwm.c: 38:  CCP1CON |= (val & 0x0003) << 4;
  6604  003840  C00B  F008         	movff	pwmSet1@val,??_pwmSet1	;volatile
  6605  003844  0E03               	movlw	3
  6606  003846  1608               	andwf	??_pwmSet1^0,f,c
  6607  003848  3808               	swapf	??_pwmSet1^0,w,c
  6608  00384A  0BF0               	andlw	240
  6609  00384C  12BD               	iorwf	189,f,c	;volatile
  6610  00384E  0012               	return		;funcret
  6611  003850                     __end_of_pwmSet1:
  6612                           	callstack 0
  6613                           
  6614 ;; *************** function _printf *****************
  6615 ;; Defined at:
  6616 ;;		line 7 in file "lcdMsg.c"
  6617 ;; Parameters:    Size  Location     Type
  6618 ;;  msg             2    8[COMRAM] PTR unsigned char 
  6619 ;;		 -> main@msg1(64), main@msg(32), STR_4(12), washFour@msg(48), 
  6620 ;;		 -> STR_3(12), washThree@msg(32), STR_2(12), washTwo@msg(32), 
  6621 ;;		 -> msg5(64), STR_1(12), msg4(32), msg3(32), 
  6622 ;;		 -> msg2(32), msg1(32), washOne@msg(32), preWash@msgem2(32), 
  6623 ;;		 -> preWash@msgem1(32), preWash@msgem(32), kpOptions2@msg3(64), kpOptions2@msg2(32), 
  6624 ;;  j               2   10[COMRAM] int 
  6625 ;; Auto vars:     Size  Location     Type
  6626 ;;  i               2   14[COMRAM] int 
  6627 ;; Return value:  Size  Location     Type
  6628 ;;                  1    wreg      void 
  6629 ;; Registers used:
  6630 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6631 ;; Tracked objects:
  6632 ;;		On entry : 0/0
  6633 ;;		On exit  : 0/0
  6634 ;;		Unchanged: 0/0
  6635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6636 ;;      Params:         4       0       0       0       0       0       0
  6637 ;;      Locals:         2       0       0       0       0       0       0
  6638 ;;      Temps:          2       0       0       0       0       0       0
  6639 ;;      Totals:         8       0       0       0       0       0       0
  6640 ;;Total ram usage:        8 bytes
  6641 ;; Hardware stack levels used: 1
  6642 ;; Hardware stack levels required when called: 3
  6643 ;; This function calls:
  6644 ;;		_lcdCommand
  6645 ;;		_lcdData
  6646 ;; This function is called by:
  6647 ;;		_kpOptions2
  6648 ;;		_preWash
  6649 ;;		_washOne
  6650 ;;		_washTwo
  6651 ;;		_washThree
  6652 ;;		_washFour
  6653 ;;		_main
  6654 ;; This function uses a non-reentrant model
  6655 ;;
  6656                           
  6657                           	psect	text16
  6658  00337E                     __ptext16:
  6659                           	callstack 0
  6660  00337E                     _printf:
  6661                           	callstack 27
  6662  00337E                     
  6663                           ;lcdMsg.c: 9:     lcdCommand(0x01);
  6664  00337E  0E01               	movlw	1
  6665  003380  EC3D  F01B         	call	_lcdCommand
  6666  003384                     
  6667                           ;lcdMsg.c: 10:     lcdCommand(0x80);
  6668  003384  0E80               	movlw	128
  6669  003386  EC3D  F01B         	call	_lcdCommand
  6670                           
  6671                           ;lcdMsg.c: 11:     for (i = 0; i < j; i++) {
  6672  00338A  0E00               	movlw	0
  6673  00338C  6E10               	movwf	(printf@i+1)^0,c
  6674  00338E  0E00               	movlw	0
  6675  003390  6E0F               	movwf	printf@i^0,c
  6676  003392  EF10  F01A         	goto	l2889
  6677  003396                     l2873:
  6678                           
  6679                           ;lcdMsg.c: 12:         if (i == 16) {
  6680  003396  0E10               	movlw	16
  6681  003398  180F               	xorwf	printf@i^0,w,c
  6682  00339A  1010               	iorwf	(printf@i+1)^0,w,c
  6683  00339C  A4D8               	btfss	status,2,c
  6684  00339E  EFD3  F019         	goto	u2491
  6685  0033A2  EFD5  F019         	goto	u2490
  6686  0033A6                     u2491:
  6687  0033A6  EFDA  F019         	goto	l2877
  6688  0033AA                     u2490:
  6689  0033AA                     
  6690                           ;lcdMsg.c: 13:             lcdCommand(0xC0);
  6691  0033AA  0EC0               	movlw	192
  6692  0033AC  EC3D  F01B         	call	_lcdCommand
  6693                           
  6694                           ;lcdMsg.c: 14:         } else if (i == 32) {
  6695  0033B0  EFF6  F019         	goto	l2885
  6696  0033B4                     l2877:
  6697  0033B4  0E20               	movlw	32
  6698  0033B6  180F               	xorwf	printf@i^0,w,c
  6699  0033B8  1010               	iorwf	(printf@i+1)^0,w,c
  6700  0033BA  A4D8               	btfss	status,2,c
  6701  0033BC  EFE2  F019         	goto	u2501
  6702  0033C0  EFE4  F019         	goto	u2500
  6703  0033C4                     u2501:
  6704  0033C4  EFE9  F019         	goto	l2881
  6705  0033C8                     u2500:
  6706  0033C8                     
  6707                           ;lcdMsg.c: 15:             lcdCommand(0x90);
  6708  0033C8  0E90               	movlw	144
  6709  0033CA  EC3D  F01B         	call	_lcdCommand
  6710                           
  6711                           ;lcdMsg.c: 16:         } else if (i == 48) {
  6712  0033CE  EFF6  F019         	goto	l2885
  6713  0033D2                     l2881:
  6714  0033D2  0E30               	movlw	48
  6715  0033D4  180F               	xorwf	printf@i^0,w,c
  6716  0033D6  1010               	iorwf	(printf@i+1)^0,w,c
  6717  0033D8  A4D8               	btfss	status,2,c
  6718  0033DA  EFF1  F019         	goto	u2511
  6719  0033DE  EFF3  F019         	goto	u2510
  6720  0033E2                     u2511:
  6721  0033E2  EFF6  F019         	goto	l2885
  6722  0033E6                     u2510:
  6723  0033E6                     
  6724                           ;lcdMsg.c: 17:             lcdCommand(0xD0);
  6725  0033E6  0ED0               	movlw	208
  6726  0033E8  EC3D  F01B         	call	_lcdCommand
  6727  0033EC                     l2885:
  6728                           
  6729                           ;lcdMsg.c: 20:         lcdData(msg[i]);
  6730  0033EC  500F               	movf	printf@i^0,w,c
  6731  0033EE  2409               	addwf	printf@msg^0,w,c
  6732  0033F0  6E0D               	movwf	??_printf^0,c
  6733  0033F2  5010               	movf	(printf@i+1)^0,w,c
  6734  0033F4  200A               	addwfc	(printf@msg+1)^0,w,c
  6735  0033F6  6E0E               	movwf	(??_printf+1)^0,c
  6736  0033F8  C00D  FFF6         	movff	??_printf,tblptrl
  6737  0033FC  C00E  FFF7         	movff	??_printf+1,tblptrh
  6738  003400  6AF8               	clrf	tblptru,c
  6739  003402  0E05               	movlw	(high __ramtop+-1)
  6740  003404  64F7               	cpfsgt	tblptrh,c
  6741  003406  D003               	bra	u2527
  6742  003408  0008               	tblrd		*
  6743  00340A  50F5               	movf	tablat,w,c
  6744  00340C  D005               	bra	u2520
  6745  00340E                     u2527:
  6746  00340E  CFF6 FFE9          	movff	tblptrl,fsr0l
  6747  003412  CFF7 FFEA          	movff	tblptrh,fsr0h
  6748  003416  50EF               	movf	indf0,w,c
  6749  003418                     u2520:
  6750  003418  EC1B  F01D         	call	_lcdData
  6751  00341C                     
  6752                           ;lcdMsg.c: 21:     }
  6753  00341C  4A0F               	infsnz	printf@i^0,f,c
  6754  00341E  2A10               	incf	(printf@i+1)^0,f,c
  6755  003420                     l2889:
  6756  003420  500B               	movf	printf@j^0,w,c
  6757  003422  5C0F               	subwf	printf@i^0,w,c
  6758  003424  5010               	movf	(printf@i+1)^0,w,c
  6759  003426  0A80               	xorlw	128
  6760  003428  6E0D               	movwf	??_printf^0,c
  6761  00342A  500C               	movf	(printf@j+1)^0,w,c
  6762  00342C  0A80               	xorlw	128
  6763  00342E  580D               	subwfb	??_printf^0,w,c
  6764  003430  A0D8               	btfss	status,0,c
  6765  003432  EF1D  F01A         	goto	u2531
  6766  003436  EF1F  F01A         	goto	u2530
  6767  00343A                     u2531:
  6768  00343A  EFCB  F019         	goto	l2873
  6769  00343E                     u2530:
  6770  00343E  0012               	return		;funcret
  6771  003440                     __end_of_printf:
  6772                           	callstack 0
  6773                           
  6774 ;; *************** function _lcdData *****************
  6775 ;; Defined at:
  6776 ;;		line 79 in file "lcd.c"
  6777 ;; Parameters:    Size  Location     Type
  6778 ;;  valor           1    wreg     unsigned char 
  6779 ;; Auto vars:     Size  Location     Type
  6780 ;;  valor           1    6[COMRAM] unsigned char 
  6781 ;;  old_D           1    7[COMRAM] unsigned char 
  6782 ;; Return value:  Size  Location     Type
  6783 ;;                  1    wreg      void 
  6784 ;; Registers used:
  6785 ;;		wreg, status,2, status,0, cstack
  6786 ;; Tracked objects:
  6787 ;;		On entry : 0/0
  6788 ;;		On exit  : 0/0
  6789 ;;		Unchanged: 0/0
  6790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6791 ;;      Params:         0       0       0       0       0       0       0
  6792 ;;      Locals:         2       0       0       0       0       0       0
  6793 ;;      Temps:          0       0       0       0       0       0       0
  6794 ;;      Totals:         2       0       0       0       0       0       0
  6795 ;;Total ram usage:        2 bytes
  6796 ;; Hardware stack levels used: 1
  6797 ;; Hardware stack levels required when called: 1
  6798 ;; This function calls:
  6799 ;;		_Delay40us
  6800 ;;		_digitalWrite
  6801 ;; This function is called by:
  6802 ;;		_printf
  6803 ;; This function uses a non-reentrant model
  6804 ;;
  6805                           
  6806                           	psect	text17
  6807  003A36                     __ptext17:
  6808                           	callstack 0
  6809  003A36                     _lcdData:
  6810                           	callstack 28
  6811                           
  6812                           ;incstack = 0
  6813                           ;lcdData@valor stored from wreg
  6814  003A36  6E07               	movwf	lcdData@valor^0,c
  6815  003A38                     
  6816                           ;lcd.c: 79: void lcdData(unsigned char valor);lcd.c: 80: {;lcd.c: 82:     unsigned char 
      +                          old_D;;lcd.c: 83:     old_D = PORTD;
  6817  003A38  CF83 F008          	movff	3971,lcdData@old_D	;volatile
  6818  003A3C                     
  6819                           ;lcd.c: 85:     TRISD = 0x00;
  6820  003A3C  0E00               	movlw	0
  6821  003A3E  6E95               	movwf	149,c	;volatile
  6822  003A40                     
  6823                           ;lcd.c: 86:  digitalWrite(PIN_E2, 1);
  6824  003A40  0E00               	movlw	0
  6825  003A42  6E02               	movwf	(digitalWrite@pin+1)^0,c
  6826  003A44  0E22               	movlw	34
  6827  003A46  6E01               	movwf	digitalWrite@pin^0,c
  6828  003A48  0E00               	movlw	0
  6829  003A4A  6E04               	movwf	(digitalWrite@value+1)^0,c
  6830  003A4C  0E01               	movlw	1
  6831  003A4E  6E03               	movwf	digitalWrite@value^0,c
  6832  003A50  EC7F  F013         	call	_digitalWrite	;wreg free
  6833  003A54                     
  6834                           ;lcd.c: 88:  PORTD = valor;
  6835  003A54  C007  FF83         	movff	lcdData@valor,3971	;volatile
  6836  003A58                     
  6837                           ;lcd.c: 90:     digitalWrite(PIN_E1, 1);
  6838  003A58  0E00               	movlw	0
  6839  003A5A  6E02               	movwf	(digitalWrite@pin+1)^0,c
  6840  003A5C  0E21               	movlw	33
  6841  003A5E  6E01               	movwf	digitalWrite@pin^0,c
  6842  003A60  0E00               	movlw	0
  6843  003A62  6E04               	movwf	(digitalWrite@value+1)^0,c
  6844  003A64  0E01               	movlw	1
  6845  003A66  6E03               	movwf	digitalWrite@value^0,c
  6846  003A68  EC7F  F013         	call	_digitalWrite	;wreg free
  6847  003A6C                     
  6848                           ;lcd.c: 91:  digitalWrite(PIN_E1, 0);
  6849  003A6C  0E00               	movlw	0
  6850  003A6E  6E02               	movwf	(digitalWrite@pin+1)^0,c
  6851  003A70  0E21               	movlw	33
  6852  003A72  6E01               	movwf	digitalWrite@pin^0,c
  6853  003A74  0E00               	movlw	0
  6854  003A76  6E04               	movwf	(digitalWrite@value+1)^0,c
  6855  003A78  0E00               	movlw	0
  6856  003A7A  6E03               	movwf	digitalWrite@value^0,c
  6857  003A7C  EC7F  F013         	call	_digitalWrite	;wreg free
  6858  003A80                     
  6859                           ;lcd.c: 93:     PORTD= old_D;
  6860  003A80  C008  FF83         	movff	lcdData@old_D,3971	;volatile
  6861  003A84                     
  6862                           ;lcd.c: 95:  Delay40us();
  6863  003A84  ECFC  F01D         	call	_Delay40us	;wreg free
  6864  003A88  0012               	return		;funcret
  6865  003A8A                     __end_of_lcdData:
  6866                           	callstack 0
  6867                           
  6868 ;; *************** function _lcdPosition *****************
  6869 ;; Defined at:
  6870 ;;		line 123 in file "lcd.c"
  6871 ;; Parameters:    Size  Location     Type
  6872 ;;  lin             1    wreg     unsigned char 
  6873 ;;  col             1    8[COMRAM] unsigned char 
  6874 ;; Auto vars:     Size  Location     Type
  6875 ;;  lin             1   10[COMRAM] unsigned char 
  6876 ;;  comand          1    9[COMRAM] unsigned char 
  6877 ;; Return value:  Size  Location     Type
  6878 ;;                  1    wreg      void 
  6879 ;; Registers used:
  6880 ;;		wreg, status,2, status,0, cstack
  6881 ;; Tracked objects:
  6882 ;;		On entry : 0/0
  6883 ;;		On exit  : 0/0
  6884 ;;		Unchanged: 0/0
  6885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6886 ;;      Params:         1       0       0       0       0       0       0
  6887 ;;      Locals:         2       0       0       0       0       0       0
  6888 ;;      Temps:          0       0       0       0       0       0       0
  6889 ;;      Totals:         3       0       0       0       0       0       0
  6890 ;;Total ram usage:        3 bytes
  6891 ;; Hardware stack levels used: 1
  6892 ;; Hardware stack levels required when called: 3
  6893 ;; This function calls:
  6894 ;;		_lcdCommand
  6895 ;; This function is called by:
  6896 ;;		_preWash
  6897 ;;		_washOne
  6898 ;;		_washTwo
  6899 ;;		_washThree
  6900 ;;		_washFour
  6901 ;; This function uses a non-reentrant model
  6902 ;;
  6903                           
  6904                           	psect	text18
  6905  003B0A                     __ptext18:
  6906                           	callstack 0
  6907  003B0A                     _lcdPosition:
  6908                           	callstack 25
  6909                           
  6910                           ;incstack = 0
  6911                           ;lcdPosition@lin stored from wreg
  6912  003B0A  6E0B               	movwf	lcdPosition@lin^0,c
  6913  003B0C                     
  6914                           ;lcd.c: 124:     char comand = 0;
  6915  003B0C  0E00               	movlw	0
  6916  003B0E  6E0A               	movwf	lcdPosition@comand^0,c
  6917  003B10                     
  6918                           ;lcd.c: 126:     if(lin == 0) comand = 0x80 + col;
  6919  003B10  500B               	movf	lcdPosition@lin^0,w,c
  6920  003B12  A4D8               	btfss	status,2,c
  6921  003B14  EF8E  F01D         	goto	u2541
  6922  003B18  EF90  F01D         	goto	u2540
  6923  003B1C                     u2541:
  6924  003B1C  EF93  F01D         	goto	l49
  6925  003B20                     u2540:
  6926  003B20  5009               	movf	lcdPosition@col^0,w,c
  6927  003B22  0F80               	addlw	128
  6928  003B24  6E0A               	movwf	lcdPosition@comand^0,c
  6929  003B26                     l49:
  6930                           
  6931                           ;lcd.c: 127:     if(lin == 1) comand = 0xC0 + col;
  6932  003B26  040B               	decf	lcdPosition@lin^0,w,c
  6933  003B28  A4D8               	btfss	status,2,c
  6934  003B2A  EF99  F01D         	goto	u2551
  6935  003B2E  EF9B  F01D         	goto	u2550
  6936  003B32                     u2551:
  6937  003B32  EF9E  F01D         	goto	l2899
  6938  003B36                     u2550:
  6939  003B36  5009               	movf	lcdPosition@col^0,w,c
  6940  003B38  0FC0               	addlw	192
  6941  003B3A  6E0A               	movwf	lcdPosition@comand^0,c
  6942  003B3C                     l2899:
  6943                           
  6944                           ;lcd.c: 129:     lcdCommand(comand);
  6945  003B3C  500A               	movf	lcdPosition@comand^0,w,c
  6946  003B3E  EC3D  F01B         	call	_lcdCommand
  6947  003B42  0012               	return		;funcret
  6948  003B44                     __end_of_lcdPosition:
  6949                           	callstack 0
  6950                           
  6951 ;; *************** function _lcdCommand *****************
  6952 ;; Defined at:
  6953 ;;		line 53 in file "lcd.c"
  6954 ;; Parameters:    Size  Location     Type
  6955 ;;  cmd             1    wreg     unsigned char 
  6956 ;; Auto vars:     Size  Location     Type
  6957 ;;  cmd             1    7[COMRAM] unsigned char 
  6958 ;;  old_D           1    6[COMRAM] unsigned char 
  6959 ;; Return value:  Size  Location     Type
  6960 ;;                  1    wreg      void 
  6961 ;; Registers used:
  6962 ;;		wreg, status,2, status,0, cstack
  6963 ;; Tracked objects:
  6964 ;;		On entry : 0/0
  6965 ;;		On exit  : 0/0
  6966 ;;		Unchanged: 0/0
  6967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6968 ;;      Params:         0       0       0       0       0       0       0
  6969 ;;      Locals:         2       0       0       0       0       0       0
  6970 ;;      Temps:          0       0       0       0       0       0       0
  6971 ;;      Totals:         2       0       0       0       0       0       0
  6972 ;;Total ram usage:        2 bytes
  6973 ;; Hardware stack levels used: 1
  6974 ;; Hardware stack levels required when called: 2
  6975 ;; This function calls:
  6976 ;;		_Delay2ms
  6977 ;;		_Delay40us
  6978 ;;		_digitalWrite
  6979 ;; This function is called by:
  6980 ;;		_printf
  6981 ;;		_lcdInit
  6982 ;;		_lcdPosition
  6983 ;;		_kpOptions1
  6984 ;;		_kpOptions2
  6985 ;;		_preWash
  6986 ;;		_washOne
  6987 ;;		_washTwo
  6988 ;;		_washThree
  6989 ;;		_washFour
  6990 ;; This function uses a non-reentrant model
  6991 ;;
  6992                           
  6993                           	psect	text19
  6994  00367A                     __ptext19:
  6995                           	callstack 0
  6996  00367A                     _lcdCommand:
  6997                           	callstack 27
  6998                           
  6999                           ;incstack = 0
  7000                           ;lcdCommand@cmd stored from wreg
  7001  00367A  6E08               	movwf	lcdCommand@cmd^0,c
  7002  00367C                     
  7003                           ;lcd.c: 53: void lcdCommand(unsigned char cmd);lcd.c: 54: {;lcd.c: 55:     unsigned char
      +                           old_D;;lcd.c: 56:     old_D = PORTD;
  7004  00367C  CF83 F007          	movff	3971,lcdCommand@old_D	;volatile
  7005  003680                     
  7006                           ;lcd.c: 59:     TRISD = 0x00;
  7007  003680  0E00               	movlw	0
  7008  003682  6E95               	movwf	149,c	;volatile
  7009  003684                     
  7010                           ;lcd.c: 61:  digitalWrite(PIN_E2, 0);
  7011  003684  0E00               	movlw	0
  7012  003686  6E02               	movwf	(digitalWrite@pin+1)^0,c
  7013  003688  0E22               	movlw	34
  7014  00368A  6E01               	movwf	digitalWrite@pin^0,c
  7015  00368C  0E00               	movlw	0
  7016  00368E  6E04               	movwf	(digitalWrite@value+1)^0,c
  7017  003690  0E00               	movlw	0
  7018  003692  6E03               	movwf	digitalWrite@value^0,c
  7019  003694  EC7F  F013         	call	_digitalWrite	;wreg free
  7020  003698                     
  7021                           ;lcd.c: 62:  PORTD = cmd;
  7022  003698  C008  FF83         	movff	lcdCommand@cmd,3971	;volatile
  7023  00369C                     
  7024                           ;lcd.c: 64:     digitalWrite(PIN_E1, 1);
  7025  00369C  0E00               	movlw	0
  7026  00369E  6E02               	movwf	(digitalWrite@pin+1)^0,c
  7027  0036A0  0E21               	movlw	33
  7028  0036A2  6E01               	movwf	digitalWrite@pin^0,c
  7029  0036A4  0E00               	movlw	0
  7030  0036A6  6E04               	movwf	(digitalWrite@value+1)^0,c
  7031  0036A8  0E01               	movlw	1
  7032  0036AA  6E03               	movwf	digitalWrite@value^0,c
  7033  0036AC  EC7F  F013         	call	_digitalWrite	;wreg free
  7034  0036B0                     
  7035                           ;lcd.c: 65:  digitalWrite(PIN_E1, 0);
  7036  0036B0  0E00               	movlw	0
  7037  0036B2  6E02               	movwf	(digitalWrite@pin+1)^0,c
  7038  0036B4  0E21               	movlw	33
  7039  0036B6  6E01               	movwf	digitalWrite@pin^0,c
  7040  0036B8  0E00               	movlw	0
  7041  0036BA  6E04               	movwf	(digitalWrite@value+1)^0,c
  7042  0036BC  0E00               	movlw	0
  7043  0036BE  6E03               	movwf	digitalWrite@value^0,c
  7044  0036C0  EC7F  F013         	call	_digitalWrite	;wreg free
  7045  0036C4                     
  7046                           ;lcd.c: 68:     PORTD= old_D;
  7047  0036C4  C007  FF83         	movff	lcdCommand@old_D,3971	;volatile
  7048  0036C8                     
  7049                           ;lcd.c: 70:     if((cmd == 0x02)||(cmd == 0x01)){
  7050  0036C8  0E02               	movlw	2
  7051  0036CA  1808               	xorwf	lcdCommand@cmd^0,w,c
  7052  0036CC  B4D8               	btfsc	status,2,c
  7053  0036CE  EF6B  F01B         	goto	u2441
  7054  0036D2  EF6D  F01B         	goto	u2440
  7055  0036D6                     u2441:
  7056  0036D6  EF75  F01B         	goto	l2809
  7057  0036DA                     u2440:
  7058  0036DA  0408               	decf	lcdCommand@cmd^0,w,c
  7059  0036DC  A4D8               	btfss	status,2,c
  7060  0036DE  EF73  F01B         	goto	u2451
  7061  0036E2  EF75  F01B         	goto	u2450
  7062  0036E6                     u2451:
  7063  0036E6  EF79  F01B         	goto	l2811
  7064  0036EA                     u2450:
  7065  0036EA                     l2809:
  7066                           
  7067                           ;lcd.c: 71:        Delay2ms();
  7068  0036EA  ECEE  F01D         	call	_Delay2ms	;wreg free
  7069                           
  7070                           ;lcd.c: 72:     }else{
  7071  0036EE  EF7B  F01B         	goto	l40
  7072  0036F2                     l2811:
  7073                           
  7074                           ;lcd.c: 73:     Delay40us();
  7075  0036F2  ECFC  F01D         	call	_Delay40us	;wreg free
  7076  0036F6                     l40:
  7077  0036F6  0012               	return		;funcret
  7078  0036F8                     __end_of_lcdCommand:
  7079                           	callstack 0
  7080                           
  7081 ;; *************** function _digitalWrite *****************
  7082 ;; Defined at:
  7083 ;;		line 14 in file "io.c"
  7084 ;; Parameters:    Size  Location     Type
  7085 ;;  pin             2    0[COMRAM] int 
  7086 ;;  value           2    2[COMRAM] int 
  7087 ;; Auto vars:     Size  Location     Type
  7088 ;;		None
  7089 ;; Return value:  Size  Location     Type
  7090 ;;                  1    wreg      void 
  7091 ;; Registers used:
  7092 ;;		wreg, status,2, status,0
  7093 ;; Tracked objects:
  7094 ;;		On entry : 0/0
  7095 ;;		On exit  : 0/0
  7096 ;;		Unchanged: 0/0
  7097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7098 ;;      Params:         4       0       0       0       0       0       0
  7099 ;;      Locals:         0       0       0       0       0       0       0
  7100 ;;      Temps:          2       0       0       0       0       0       0
  7101 ;;      Totals:         6       0       0       0       0       0       0
  7102 ;;Total ram usage:        6 bytes
  7103 ;; Hardware stack levels used: 1
  7104 ;; This function calls:
  7105 ;;		Nothing
  7106 ;; This function is called by:
  7107 ;;		_lcdCommand
  7108 ;;		_lcdData
  7109 ;;		_ssdUpdate
  7110 ;; This function uses a non-reentrant model
  7111 ;;
  7112                           
  7113                           	psect	text20
  7114  0026FE                     __ptext20:
  7115                           	callstack 0
  7116  0026FE                     _digitalWrite:
  7117                           	callstack 28
  7118  0026FE                     
  7119                           ;io.c: 16:     if(pin <8){
  7120  0026FE  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  7121  002700  EF8D  F013         	goto	u2150
  7122  002704  5002               	movf	(digitalWrite@pin+1)^0,w,c
  7123  002706  E107               	bnz	u2151
  7124  002708  0E08               	movlw	8
  7125  00270A  5C01               	subwf	digitalWrite@pin^0,w,c
  7126  00270C  B0D8               	btfsc	status,0,c
  7127  00270E  EF8B  F013         	goto	u2151
  7128  002712  EF8D  F013         	goto	u2150
  7129  002716                     u2151:
  7130  002716  EFB7  F013         	goto	l2687
  7131  00271A                     u2150:
  7132  00271A                     
  7133                           ;io.c: 17:         if (value){ ((PORTA) |= (1<<(pin)));}
  7134  00271A  5003               	movf	digitalWrite@value^0,w,c
  7135  00271C  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  7136  00271E  B4D8               	btfsc	status,2,c
  7137  002720  EF94  F013         	goto	u2161
  7138  002724  EF96  F013         	goto	u2160
  7139  002728                     u2161:
  7140  002728  EFA6  F013         	goto	l2685
  7141  00272C                     u2160:
  7142  00272C  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  7143  002730  0E01               	movlw	1
  7144  002732  6E06               	movwf	(??_digitalWrite+1)^0,c
  7145  002734  2A05               	incf	??_digitalWrite^0,f,c
  7146  002736  EF9F  F013         	goto	u2174
  7147  00273A                     u2175:
  7148  00273A  90D8               	bcf	status,0,c
  7149  00273C  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  7150  00273E                     u2174:
  7151  00273E  2E05               	decfsz	??_digitalWrite^0,f,c
  7152  002740  EF9D  F013         	goto	u2175
  7153  002744  5006               	movf	(??_digitalWrite+1)^0,w,c
  7154  002746  1280               	iorwf	128,f,c	;volatile
  7155  002748  EFA5  F014         	goto	l175
  7156  00274C                     l2685:
  7157  00274C  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  7158  002750  0E01               	movlw	1
  7159  002752  6E06               	movwf	(??_digitalWrite+1)^0,c
  7160  002754  2A05               	incf	??_digitalWrite^0,f,c
  7161  002756  EFAF  F013         	goto	u2184
  7162  00275A                     u2185:
  7163  00275A  90D8               	bcf	status,0,c
  7164  00275C  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  7165  00275E                     u2184:
  7166  00275E  2E05               	decfsz	??_digitalWrite^0,f,c
  7167  002760  EFAD  F013         	goto	u2185
  7168  002764  5006               	movf	(??_digitalWrite+1)^0,w,c
  7169  002766  0AFF               	xorlw	255
  7170  002768  1680               	andwf	128,f,c	;volatile
  7171  00276A  EFA5  F014         	goto	l175
  7172  00276E                     l2687:
  7173  00276E  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  7174  002770  EFC5  F013         	goto	u2190
  7175  002774  5002               	movf	(digitalWrite@pin+1)^0,w,c
  7176  002776  E107               	bnz	u2191
  7177  002778  0E10               	movlw	16
  7178  00277A  5C01               	subwf	digitalWrite@pin^0,w,c
  7179  00277C  B0D8               	btfsc	status,0,c
  7180  00277E  EFC3  F013         	goto	u2191
  7181  002782  EFC5  F013         	goto	u2190
  7182  002786                     u2191:
  7183  002786  EFF3  F013         	goto	l2695
  7184  00278A                     u2190:
  7185  00278A                     
  7186                           ;io.c: 20:         pin -=8;
  7187  00278A  0EF8               	movlw	248
  7188  00278C  2601               	addwf	digitalWrite@pin^0,f,c
  7189  00278E  0EFF               	movlw	255
  7190  002790  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  7191                           
  7192                           ;io.c: 21:         if (value){ ((PORTB) |= (1<<(pin)));}
  7193  002792  5003               	movf	digitalWrite@value^0,w,c
  7194  002794  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  7195  002796  B4D8               	btfsc	status,2,c
  7196  002798  EFD0  F013         	goto	u2201
  7197  00279C  EFD2  F013         	goto	u2200
  7198  0027A0                     u2201:
  7199  0027A0  EFE2  F013         	goto	l2693
  7200  0027A4                     u2200:
  7201  0027A4  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  7202  0027A8  0E01               	movlw	1
  7203  0027AA  6E06               	movwf	(??_digitalWrite+1)^0,c
  7204  0027AC  2A05               	incf	??_digitalWrite^0,f,c
  7205  0027AE  EFDB  F013         	goto	u2214
  7206  0027B2                     u2215:
  7207  0027B2  90D8               	bcf	status,0,c
  7208  0027B4  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  7209  0027B6                     u2214:
  7210  0027B6  2E05               	decfsz	??_digitalWrite^0,f,c
  7211  0027B8  EFD9  F013         	goto	u2215
  7212  0027BC  5006               	movf	(??_digitalWrite+1)^0,w,c
  7213  0027BE  1281               	iorwf	129,f,c	;volatile
  7214  0027C0  EFA5  F014         	goto	l175
  7215  0027C4                     l2693:
  7216  0027C4  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  7217  0027C8  0E01               	movlw	1
  7218  0027CA  6E06               	movwf	(??_digitalWrite+1)^0,c
  7219  0027CC  2A05               	incf	??_digitalWrite^0,f,c
  7220  0027CE  EFEB  F013         	goto	u2224
  7221  0027D2                     u2225:
  7222  0027D2  90D8               	bcf	status,0,c
  7223  0027D4  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  7224  0027D6                     u2224:
  7225  0027D6  2E05               	decfsz	??_digitalWrite^0,f,c
  7226  0027D8  EFE9  F013         	goto	u2225
  7227  0027DC  5006               	movf	(??_digitalWrite+1)^0,w,c
  7228  0027DE  0AFF               	xorlw	255
  7229  0027E0  1681               	andwf	129,f,c	;volatile
  7230  0027E2  EFA5  F014         	goto	l175
  7231  0027E6                     l2695:
  7232  0027E6  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  7233  0027E8  EF01  F014         	goto	u2230
  7234  0027EC  5002               	movf	(digitalWrite@pin+1)^0,w,c
  7235  0027EE  E107               	bnz	u2231
  7236  0027F0  0E18               	movlw	24
  7237  0027F2  5C01               	subwf	digitalWrite@pin^0,w,c
  7238  0027F4  B0D8               	btfsc	status,0,c
  7239  0027F6  EFFF  F013         	goto	u2231
  7240  0027FA  EF01  F014         	goto	u2230
  7241  0027FE                     u2231:
  7242  0027FE  EF2F  F014         	goto	l2703
  7243  002802                     u2230:
  7244  002802                     
  7245                           ;io.c: 24:         pin -=16;
  7246  002802  0EF0               	movlw	240
  7247  002804  2601               	addwf	digitalWrite@pin^0,f,c
  7248  002806  0EFF               	movlw	255
  7249  002808  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  7250                           
  7251                           ;io.c: 25:         if (value){ ((PORTC) |= (1<<(pin)));}
  7252  00280A  5003               	movf	digitalWrite@value^0,w,c
  7253  00280C  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  7254  00280E  B4D8               	btfsc	status,2,c
  7255  002810  EF0C  F014         	goto	u2241
  7256  002814  EF0E  F014         	goto	u2240
  7257  002818                     u2241:
  7258  002818  EF1E  F014         	goto	l2701
  7259  00281C                     u2240:
  7260  00281C  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  7261  002820  0E01               	movlw	1
  7262  002822  6E06               	movwf	(??_digitalWrite+1)^0,c
  7263  002824  2A05               	incf	??_digitalWrite^0,f,c
  7264  002826  EF17  F014         	goto	u2254
  7265  00282A                     u2255:
  7266  00282A  90D8               	bcf	status,0,c
  7267  00282C  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  7268  00282E                     u2254:
  7269  00282E  2E05               	decfsz	??_digitalWrite^0,f,c
  7270  002830  EF15  F014         	goto	u2255
  7271  002834  5006               	movf	(??_digitalWrite+1)^0,w,c
  7272  002836  1282               	iorwf	130,f,c	;volatile
  7273  002838  EFA5  F014         	goto	l175
  7274  00283C                     l2701:
  7275  00283C  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  7276  002840  0E01               	movlw	1
  7277  002842  6E06               	movwf	(??_digitalWrite+1)^0,c
  7278  002844  2A05               	incf	??_digitalWrite^0,f,c
  7279  002846  EF27  F014         	goto	u2264
  7280  00284A                     u2265:
  7281  00284A  90D8               	bcf	status,0,c
  7282  00284C  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  7283  00284E                     u2264:
  7284  00284E  2E05               	decfsz	??_digitalWrite^0,f,c
  7285  002850  EF25  F014         	goto	u2265
  7286  002854  5006               	movf	(??_digitalWrite+1)^0,w,c
  7287  002856  0AFF               	xorlw	255
  7288  002858  1682               	andwf	130,f,c	;volatile
  7289  00285A  EFA5  F014         	goto	l175
  7290  00285E                     l2703:
  7291  00285E  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  7292  002860  EF3D  F014         	goto	u2270
  7293  002864  5002               	movf	(digitalWrite@pin+1)^0,w,c
  7294  002866  E107               	bnz	u2271
  7295  002868  0E20               	movlw	32
  7296  00286A  5C01               	subwf	digitalWrite@pin^0,w,c
  7297  00286C  B0D8               	btfsc	status,0,c
  7298  00286E  EF3B  F014         	goto	u2271
  7299  002872  EF3D  F014         	goto	u2270
  7300  002876                     u2271:
  7301  002876  EF6B  F014         	goto	l2711
  7302  00287A                     u2270:
  7303  00287A                     
  7304                           ;io.c: 28:         pin -=24;
  7305  00287A  0EE8               	movlw	232
  7306  00287C  2601               	addwf	digitalWrite@pin^0,f,c
  7307  00287E  0EFF               	movlw	255
  7308  002880  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  7309                           
  7310                           ;io.c: 29:         if (value){ ((PORTD) |= (1<<(pin)));}
  7311  002882  5003               	movf	digitalWrite@value^0,w,c
  7312  002884  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  7313  002886  B4D8               	btfsc	status,2,c
  7314  002888  EF48  F014         	goto	u2281
  7315  00288C  EF4A  F014         	goto	u2280
  7316  002890                     u2281:
  7317  002890  EF5A  F014         	goto	l2709
  7318  002894                     u2280:
  7319  002894  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  7320  002898  0E01               	movlw	1
  7321  00289A  6E06               	movwf	(??_digitalWrite+1)^0,c
  7322  00289C  2A05               	incf	??_digitalWrite^0,f,c
  7323  00289E  EF53  F014         	goto	u2294
  7324  0028A2                     u2295:
  7325  0028A2  90D8               	bcf	status,0,c
  7326  0028A4  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  7327  0028A6                     u2294:
  7328  0028A6  2E05               	decfsz	??_digitalWrite^0,f,c
  7329  0028A8  EF51  F014         	goto	u2295
  7330  0028AC  5006               	movf	(??_digitalWrite+1)^0,w,c
  7331  0028AE  1283               	iorwf	131,f,c	;volatile
  7332  0028B0  EFA5  F014         	goto	l175
  7333  0028B4                     l2709:
  7334  0028B4  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  7335  0028B8  0E01               	movlw	1
  7336  0028BA  6E06               	movwf	(??_digitalWrite+1)^0,c
  7337  0028BC  2A05               	incf	??_digitalWrite^0,f,c
  7338  0028BE  EF63  F014         	goto	u2304
  7339  0028C2                     u2305:
  7340  0028C2  90D8               	bcf	status,0,c
  7341  0028C4  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  7342  0028C6                     u2304:
  7343  0028C6  2E05               	decfsz	??_digitalWrite^0,f,c
  7344  0028C8  EF61  F014         	goto	u2305
  7345  0028CC  5006               	movf	(??_digitalWrite+1)^0,w,c
  7346  0028CE  0AFF               	xorlw	255
  7347  0028D0  1683               	andwf	131,f,c	;volatile
  7348  0028D2  EFA5  F014         	goto	l175
  7349  0028D6                     l2711:
  7350  0028D6  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  7351  0028D8  EF79  F014         	goto	u2310
  7352  0028DC  5002               	movf	(digitalWrite@pin+1)^0,w,c
  7353  0028DE  E107               	bnz	u2311
  7354  0028E0  0E28               	movlw	40
  7355  0028E2  5C01               	subwf	digitalWrite@pin^0,w,c
  7356  0028E4  B0D8               	btfsc	status,0,c
  7357  0028E6  EF77  F014         	goto	u2311
  7358  0028EA  EF79  F014         	goto	u2310
  7359  0028EE                     u2311:
  7360  0028EE  EFA5  F014         	goto	l175
  7361  0028F2                     u2310:
  7362  0028F2                     
  7363                           ;io.c: 32:         pin -=32;
  7364  0028F2  0EE0               	movlw	224
  7365  0028F4  2601               	addwf	digitalWrite@pin^0,f,c
  7366  0028F6  0EFF               	movlw	255
  7367  0028F8  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  7368                           
  7369                           ;io.c: 33:         if (value){ ((PORTE) |= (1<<(pin)));}
  7370  0028FA  5003               	movf	digitalWrite@value^0,w,c
  7371  0028FC  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  7372  0028FE  B4D8               	btfsc	status,2,c
  7373  002900  EF84  F014         	goto	u2321
  7374  002904  EF86  F014         	goto	u2320
  7375  002908                     u2321:
  7376  002908  EF96  F014         	goto	l2717
  7377  00290C                     u2320:
  7378  00290C  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  7379  002910  0E01               	movlw	1
  7380  002912  6E06               	movwf	(??_digitalWrite+1)^0,c
  7381  002914  2A05               	incf	??_digitalWrite^0,f,c
  7382  002916  EF8F  F014         	goto	u2334
  7383  00291A                     u2335:
  7384  00291A  90D8               	bcf	status,0,c
  7385  00291C  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  7386  00291E                     u2334:
  7387  00291E  2E05               	decfsz	??_digitalWrite^0,f,c
  7388  002920  EF8D  F014         	goto	u2335
  7389  002924  5006               	movf	(??_digitalWrite+1)^0,w,c
  7390  002926  1284               	iorwf	132,f,c	;volatile
  7391  002928  EFA5  F014         	goto	l175
  7392  00292C                     l2717:
  7393  00292C  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  7394  002930  0E01               	movlw	1
  7395  002932  6E06               	movwf	(??_digitalWrite+1)^0,c
  7396  002934  2A05               	incf	??_digitalWrite^0,f,c
  7397  002936  EF9F  F014         	goto	u2344
  7398  00293A                     u2345:
  7399  00293A  90D8               	bcf	status,0,c
  7400  00293C  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  7401  00293E                     u2344:
  7402  00293E  2E05               	decfsz	??_digitalWrite^0,f,c
  7403  002940  EF9D  F014         	goto	u2345
  7404  002944  5006               	movf	(??_digitalWrite+1)^0,w,c
  7405  002946  0AFF               	xorlw	255
  7406  002948  1684               	andwf	132,f,c	;volatile
  7407  00294A                     l175:
  7408  00294A  0012               	return		;funcret
  7409  00294C                     __end_of_digitalWrite:
  7410                           	callstack 0
  7411                           
  7412 ;; *************** function _Delay2ms *****************
  7413 ;; Defined at:
  7414 ;;		line 42 in file "lcd.c"
  7415 ;; Parameters:    Size  Location     Type
  7416 ;;		None
  7417 ;; Auto vars:     Size  Location     Type
  7418 ;;  i               1    1[COMRAM] unsigned char 
  7419 ;; Return value:  Size  Location     Type
  7420 ;;                  1    wreg      void 
  7421 ;; Registers used:
  7422 ;;		wreg, status,2, status,0, cstack
  7423 ;; Tracked objects:
  7424 ;;		On entry : 0/0
  7425 ;;		On exit  : 0/0
  7426 ;;		Unchanged: 0/0
  7427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7428 ;;      Params:         0       0       0       0       0       0       0
  7429 ;;      Locals:         1       0       0       0       0       0       0
  7430 ;;      Temps:          0       0       0       0       0       0       0
  7431 ;;      Totals:         1       0       0       0       0       0       0
  7432 ;;Total ram usage:        1 bytes
  7433 ;; Hardware stack levels used: 1
  7434 ;; Hardware stack levels required when called: 1
  7435 ;; This function calls:
  7436 ;;		_Delay40us
  7437 ;; This function is called by:
  7438 ;;		_lcdCommand
  7439 ;;		_lcdInit
  7440 ;; This function uses a non-reentrant model
  7441 ;;
  7442                           
  7443                           	psect	text21
  7444  003BDC                     __ptext21:
  7445                           	callstack 0
  7446  003BDC                     _Delay2ms:
  7447                           	callstack 27
  7448  003BDC                     
  7449                           ;lcd.c: 44:  unsigned char i;;lcd.c: 45:  for(i=0; i < 50; i++)
  7450  003BDC  0E00               	movlw	0
  7451  003BDE  6E02               	movwf	Delay2ms@i^0,c
  7452  003BE0                     l2673:
  7453                           
  7454                           ;lcd.c: 46:  {;lcd.c: 47:   Delay40us();
  7455  003BE0  ECFC  F01D         	call	_Delay40us	;wreg free
  7456  003BE4                     
  7457                           ;lcd.c: 48:  }
  7458  003BE4  2A02               	incf	Delay2ms@i^0,f,c
  7459  003BE6  0E31               	movlw	49
  7460  003BE8  6402               	cpfsgt	Delay2ms@i^0,c
  7461  003BEA  EFF9  F01D         	goto	u2141
  7462  003BEE  EFFB  F01D         	goto	u2140
  7463  003BF2                     u2141:
  7464  003BF2  EFF0  F01D         	goto	l2673
  7465  003BF6                     u2140:
  7466  003BF6  0012               	return		;funcret
  7467  003BF8                     __end_of_Delay2ms:
  7468                           	callstack 0
  7469                           
  7470 ;; *************** function _Delay40us *****************
  7471 ;; Defined at:
  7472 ;;		line 36 in file "lcd.c"
  7473 ;; Parameters:    Size  Location     Type
  7474 ;;		None
  7475 ;; Auto vars:     Size  Location     Type
  7476 ;;  i               1    0[COMRAM] unsigned char 
  7477 ;; Return value:  Size  Location     Type
  7478 ;;                  1    wreg      void 
  7479 ;; Registers used:
  7480 ;;		wreg, status,2, status,0
  7481 ;; Tracked objects:
  7482 ;;		On entry : 0/0
  7483 ;;		On exit  : 0/0
  7484 ;;		Unchanged: 0/0
  7485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7486 ;;      Params:         0       0       0       0       0       0       0
  7487 ;;      Locals:         1       0       0       0       0       0       0
  7488 ;;      Temps:          0       0       0       0       0       0       0
  7489 ;;      Totals:         1       0       0       0       0       0       0
  7490 ;;Total ram usage:        1 bytes
  7491 ;; Hardware stack levels used: 1
  7492 ;; This function calls:
  7493 ;;		Nothing
  7494 ;; This function is called by:
  7495 ;;		_Delay2ms
  7496 ;;		_lcdCommand
  7497 ;;		_lcdData
  7498 ;; This function uses a non-reentrant model
  7499 ;;
  7500                           
  7501                           	psect	text22
  7502  003BF8                     __ptext22:
  7503                           	callstack 0
  7504  003BF8                     _Delay40us:
  7505                           	callstack 28
  7506  003BF8                     
  7507                           ;lcd.c: 38:  unsigned char i;;lcd.c: 39:  for(i=0; i < 25; i++);
  7508  003BF8  0E00               	movlw	0
  7509  003BFA  6E01               	movwf	Delay40us@i^0,c
  7510  003BFC                     l2663:
  7511  003BFC  2A01               	incf	Delay40us@i^0,f,c
  7512  003BFE  0E18               	movlw	24
  7513  003C00  6401               	cpfsgt	Delay40us@i^0,c
  7514  003C02  EF05  F01E         	goto	u2131
  7515  003C06  EF07  F01E         	goto	u2130
  7516  003C0A                     u2131:
  7517  003C0A  EFFE  F01D         	goto	l2663
  7518  003C0E                     u2130:
  7519  003C0E  0012               	return		;funcret
  7520  003C10                     __end_of_Delay40us:
  7521                           	callstack 0
  7522                           
  7523 ;; *************** function _delayAux *****************
  7524 ;; Defined at:
  7525 ;;		line 14 in file "time.c"
  7526 ;; Parameters:    Size  Location     Type
  7527 ;;  i               2    0[COMRAM] int 
  7528 ;; Auto vars:     Size  Location     Type
  7529 ;;  j               2    3[COMRAM] int 
  7530 ;; Return value:  Size  Location     Type
  7531 ;;                  1    wreg      void 
  7532 ;; Registers used:
  7533 ;;		wreg, status,2, status,0
  7534 ;; Tracked objects:
  7535 ;;		On entry : 0/0
  7536 ;;		On exit  : 0/0
  7537 ;;		Unchanged: 0/0
  7538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7539 ;;      Params:         2       0       0       0       0       0       0
  7540 ;;      Locals:         2       0       0       0       0       0       0
  7541 ;;      Temps:          1       0       0       0       0       0       0
  7542 ;;      Totals:         5       0       0       0       0       0       0
  7543 ;;Total ram usage:        5 bytes
  7544 ;; Hardware stack levels used: 1
  7545 ;; This function calls:
  7546 ;;		Nothing
  7547 ;; This function is called by:
  7548 ;;		_washOne
  7549 ;;		_washTwo
  7550 ;;		_washThree
  7551 ;;		_washFour
  7552 ;;		_ssdTimer
  7553 ;; This function uses a non-reentrant model
  7554 ;;
  7555                           
  7556                           	psect	text23
  7557  003B44                     __ptext23:
  7558                           	callstack 0
  7559  003B44                     _delayAux:
  7560                           	callstack 27
  7561  003B44                     
  7562                           ;time.c: 15:     int j;;time.c: 16:     for (j = 0; j < i; j++);
  7563  003B44  0E00               	movlw	0
  7564  003B46  6E05               	movwf	(delayAux@j+1)^0,c
  7565  003B48  0E00               	movlw	0
  7566  003B4A  6E04               	movwf	delayAux@j^0,c
  7567  003B4C  EFAA  F01D         	goto	l2931
  7568  003B50                     l2929:
  7569  003B50  4A04               	infsnz	delayAux@j^0,f,c
  7570  003B52  2A05               	incf	(delayAux@j+1)^0,f,c
  7571  003B54                     l2931:
  7572  003B54  5001               	movf	delayAux@i^0,w,c
  7573  003B56  5C04               	subwf	delayAux@j^0,w,c
  7574  003B58  5005               	movf	(delayAux@j+1)^0,w,c
  7575  003B5A  0A80               	xorlw	128
  7576  003B5C  6E03               	movwf	??_delayAux^0,c
  7577  003B5E  5002               	movf	(delayAux@i+1)^0,w,c
  7578  003B60  0A80               	xorlw	128
  7579  003B62  5803               	subwfb	??_delayAux^0,w,c
  7580  003B64  A0D8               	btfss	status,0,c
  7581  003B66  EFB7  F01D         	goto	u2601
  7582  003B6A  EFB9  F01D         	goto	u2600
  7583  003B6E                     u2601:
  7584  003B6E  EFA8  F01D         	goto	l2929
  7585  003B72                     u2600:
  7586  003B72  0012               	return		;funcret
  7587  003B74                     __end_of_delayAux:
  7588                           	callstack 0
  7589                           
  7590 ;; *************** function _buzzer *****************
  7591 ;; Defined at:
  7592 ;;		line 71 in file "pwm.c"
  7593 ;; Parameters:    Size  Location     Type
  7594 ;;		None
  7595 ;; Auto vars:     Size  Location     Type
  7596 ;;  i               2   16[COMRAM] int 
  7597 ;; Return value:  Size  Location     Type
  7598 ;;                  1    wreg      void 
  7599 ;; Registers used:
  7600 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7601 ;; Tracked objects:
  7602 ;;		On entry : 0/0
  7603 ;;		On exit  : 0/0
  7604 ;;		Unchanged: 0/0
  7605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7606 ;;      Params:         0       0       0       0       0       0       0
  7607 ;;      Locals:         2       0       0       0       0       0       0
  7608 ;;      Temps:          0       0       0       0       0       0       0
  7609 ;;      Totals:         2       0       0       0       0       0       0
  7610 ;;Total ram usage:        2 bytes
  7611 ;; Hardware stack levels used: 1
  7612 ;; Hardware stack levels required when called: 2
  7613 ;; This function calls:
  7614 ;;		_delay
  7615 ;;		_pwmFrequency
  7616 ;;		_pwmSet2
  7617 ;; This function is called by:
  7618 ;;		_washOne
  7619 ;;		_washTwo
  7620 ;;		_washThree
  7621 ;;		_washFour
  7622 ;; This function uses a non-reentrant model
  7623 ;;
  7624                           
  7625                           	psect	text24
  7626  0038BC                     __ptext24:
  7627                           	callstack 0
  7628  0038BC                     _buzzer:
  7629                           	callstack 24
  7630  0038BC                     
  7631                           ;pwm.c: 72:     for(int i=0; i<16; i++) {
  7632  0038BC  0E00               	movlw	0
  7633  0038BE  6E12               	movwf	(buzzer@i+1)^0,c
  7634  0038C0  0E00               	movlw	0
  7635  0038C2  6E11               	movwf	buzzer@i^0,c
  7636  0038C4                     l460:
  7637                           
  7638                           ;pwm.c: 73:         if(i%2 == 0) {
  7639  0038C4  B011               	btfsc	buzzer@i^0,0,c
  7640  0038C6  EF67  F01C         	goto	u2611
  7641  0038CA  EF69  F01C         	goto	u2610
  7642  0038CE                     u2611:
  7643  0038CE  EF7C  F01C         	goto	l2993
  7644  0038D2                     u2610:
  7645  0038D2                     
  7646                           ;pwm.c: 74:            pwmFrequency(10000);
  7647  0038D2  0E27               	movlw	39
  7648  0038D4  6E10               	movwf	(pwmFrequency@freq+1)^0,c
  7649  0038D6  0E10               	movlw	16
  7650  0038D8  6E0F               	movwf	pwmFrequency@freq^0,c
  7651  0038DA  ECCD  F01D         	call	_pwmFrequency	;wreg free
  7652  0038DE                     
  7653                           ;pwm.c: 75:            pwmSet2(50);
  7654  0038DE  0E32               	movlw	50
  7655  0038E0  EC28  F01C         	call	_pwmSet2
  7656  0038E4                     
  7657                           ;pwm.c: 76:            ((TRISC) |= (1<<(1)));
  7658  0038E4  8294               	bsf	148,1,c	;volatile
  7659  0038E6                     
  7660                           ;pwm.c: 77:            PORTD = 0xFF;
  7661  0038E6  6883               	setf	131,c	;volatile
  7662  0038E8                     l2991:
  7663                           
  7664                           ;pwm.c: 78:            delay(500);
  7665  0038E8  0E01               	movlw	1
  7666  0038EA  6E02               	movwf	(delay@temp+1)^0,c
  7667  0038EC  0EF4               	movlw	244
  7668  0038EE  6E01               	movwf	delay@temp^0,c
  7669  0038F0  EC92  F01C         	call	_delay	;wreg free
  7670                           
  7671                           ;pwm.c: 79:         } else {
  7672  0038F4  EF81  F01C         	goto	l2999
  7673  0038F8                     l2993:
  7674                           
  7675                           ;pwm.c: 80:             ((TRISC) &= ~(1<<(1)));
  7676  0038F8  9294               	bcf	148,1,c	;volatile
  7677  0038FA                     
  7678                           ;pwm.c: 81:             PORTD = 0x00;
  7679  0038FA  0E00               	movlw	0
  7680  0038FC  6E83               	movwf	131,c	;volatile
  7681  0038FE  EF74  F01C         	goto	l2991
  7682  003902                     l2999:
  7683                           
  7684                           ;pwm.c: 84:     }
  7685  003902  4A11               	infsnz	buzzer@i^0,f,c
  7686  003904  2A12               	incf	(buzzer@i+1)^0,f,c
  7687  003906  BE12               	btfsc	(buzzer@i+1)^0,7,c
  7688  003908  EF8F  F01C         	goto	u2621
  7689  00390C  5012               	movf	(buzzer@i+1)^0,w,c
  7690  00390E  E109               	bnz	u2620
  7691  003910  0E10               	movlw	16
  7692  003912  5C11               	subwf	buzzer@i^0,w,c
  7693  003914  A0D8               	btfss	status,0,c
  7694  003916  EF8F  F01C         	goto	u2621
  7695  00391A  EF91  F01C         	goto	u2620
  7696  00391E                     u2621:
  7697  00391E  EF62  F01C         	goto	l460
  7698  003922                     u2620:
  7699  003922  0012               	return		;funcret
  7700  003924                     __end_of_buzzer:
  7701                           	callstack 0
  7702                           
  7703 ;; *************** function _pwmSet2 *****************
  7704 ;; Defined at:
  7705 ;;		line 41 in file "pwm.c"
  7706 ;; Parameters:    Size  Location     Type
  7707 ;;  porcento        1    wreg     unsigned char 
  7708 ;; Auto vars:     Size  Location     Type
  7709 ;;  porcento        1    9[COMRAM] unsigned char 
  7710 ;;  val             2   10[COMRAM] unsigned int 
  7711 ;; Return value:  Size  Location     Type
  7712 ;;                  1    wreg      void 
  7713 ;; Registers used:
  7714 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7715 ;; Tracked objects:
  7716 ;;		On entry : 0/0
  7717 ;;		On exit  : 0/0
  7718 ;;		Unchanged: 0/0
  7719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7720 ;;      Params:         0       0       0       0       0       0       0
  7721 ;;      Locals:         3       0       0       0       0       0       0
  7722 ;;      Temps:          2       0       0       0       0       0       0
  7723 ;;      Totals:         5       0       0       0       0       0       0
  7724 ;;Total ram usage:        5 bytes
  7725 ;; Hardware stack levels used: 1
  7726 ;; Hardware stack levels required when called: 1
  7727 ;; This function calls:
  7728 ;;		___lwdiv
  7729 ;;		___wmul
  7730 ;; This function is called by:
  7731 ;;		_preWash
  7732 ;;		_buzzer
  7733 ;; This function uses a non-reentrant model
  7734 ;;
  7735                           
  7736                           	psect	text25
  7737  003850                     __ptext25:
  7738                           	callstack 0
  7739  003850                     _pwmSet2:
  7740                           	callstack 27
  7741                           
  7742                           ;incstack = 0
  7743                           ;pwmSet2@porcento stored from wreg
  7744  003850  6E0A               	movwf	pwmSet2@porcento^0,c
  7745  003852                     
  7746                           ;pwm.c: 42:  unsigned int val = ((unsigned int)porcento) *(PR2+1);
  7747  003852  0E01               	movlw	1
  7748  003854  24CB               	addwf	203,w,c	;volatile
  7749  003856  6E01               	movwf	___wmul@multiplier^0,c
  7750  003858  6A02               	clrf	(___wmul@multiplier+1)^0,c
  7751  00385A  0E00               	movlw	0
  7752  00385C  2202               	addwfc	(___wmul@multiplier+1)^0,f,c
  7753  00385E  C00A  F003         	movff	pwmSet2@porcento,___wmul@multiplicand
  7754  003862  6A04               	clrf	(___wmul@multiplicand+1)^0,c
  7755  003864  ECBA  F01D         	call	___wmul	;wreg free
  7756  003868  C001  F00B         	movff	?___wmul,pwmSet2@val
  7757  00386C  C002  F00C         	movff	?___wmul+1,pwmSet2@val+1
  7758  003870                     
  7759                           ;pwm.c: 43:  val /= 25;
  7760  003870  C00B  F001         	movff	pwmSet2@val,___lwdiv@dividend
  7761  003874  C00C  F002         	movff	pwmSet2@val+1,___lwdiv@dividend+1
  7762  003878  0E00               	movlw	0
  7763  00387A  6E04               	movwf	(___lwdiv@divisor+1)^0,c
  7764  00387C  0E19               	movlw	25
  7765  00387E  6E03               	movwf	___lwdiv@divisor^0,c
  7766  003880  ECB8  F01B         	call	___lwdiv	;wreg free
  7767  003884  C001  F00B         	movff	?___lwdiv,pwmSet2@val
  7768  003888  C002  F00C         	movff	?___lwdiv+1,pwmSet2@val+1
  7769  00388C                     
  7770                           ;pwm.c: 45:  val &= 0x03ff;
  7771  00388C  0EFF               	movlw	255
  7772  00388E  160B               	andwf	pwmSet2@val^0,f,c
  7773  003890  0E03               	movlw	3
  7774  003892  160C               	andwf	(pwmSet2@val+1)^0,f,c
  7775  003894                     
  7776                           ;pwm.c: 47:  CCPR2L = val >> 2;
  7777  003894  C00B  F008         	movff	pwmSet2@val,??_pwmSet2
  7778  003898  C00C  F009         	movff	pwmSet2@val+1,??_pwmSet2+1
  7779  00389C  90D8               	bcf	status,0,c
  7780  00389E  3209               	rrcf	(??_pwmSet2+1)^0,f,c
  7781  0038A0  3208               	rrcf	??_pwmSet2^0,f,c
  7782  0038A2  90D8               	bcf	status,0,c
  7783  0038A4  3209               	rrcf	(??_pwmSet2+1)^0,f,c
  7784  0038A6  3208               	rrcf	??_pwmSet2^0,f,c
  7785  0038A8  5008               	movf	??_pwmSet2^0,w,c
  7786  0038AA  6EBB               	movwf	187,c	;volatile
  7787  0038AC                     
  7788                           ;pwm.c: 49:  CCP2CON |= (val & 0x0003) << 4;
  7789  0038AC  C00B  F008         	movff	pwmSet2@val,??_pwmSet2	;volatile
  7790  0038B0  0E03               	movlw	3
  7791  0038B2  1608               	andwf	??_pwmSet2^0,f,c
  7792  0038B4  3808               	swapf	??_pwmSet2^0,w,c
  7793  0038B6  0BF0               	andlw	240
  7794  0038B8  12BA               	iorwf	186,f,c	;volatile
  7795  0038BA  0012               	return		;funcret
  7796  0038BC                     __end_of_pwmSet2:
  7797                           	callstack 0
  7798                           
  7799 ;; *************** function ___wmul *****************
  7800 ;; Defined at:
  7801 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\Umul16.c"
  7802 ;; Parameters:    Size  Location     Type
  7803 ;;  multiplier      2    0[COMRAM] unsigned int 
  7804 ;;  multiplicand    2    2[COMRAM] unsigned int 
  7805 ;; Auto vars:     Size  Location     Type
  7806 ;;  product         2    4[COMRAM] unsigned int 
  7807 ;; Return value:  Size  Location     Type
  7808 ;;                  2    0[COMRAM] unsigned int 
  7809 ;; Registers used:
  7810 ;;		wreg, status,2, status,0, prodl, prodh
  7811 ;; Tracked objects:
  7812 ;;		On entry : 0/0
  7813 ;;		On exit  : 0/0
  7814 ;;		Unchanged: 0/0
  7815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7816 ;;      Params:         4       0       0       0       0       0       0
  7817 ;;      Locals:         2       0       0       0       0       0       0
  7818 ;;      Temps:          0       0       0       0       0       0       0
  7819 ;;      Totals:         6       0       0       0       0       0       0
  7820 ;;Total ram usage:        6 bytes
  7821 ;; Hardware stack levels used: 1
  7822 ;; This function calls:
  7823 ;;		Nothing
  7824 ;; This function is called by:
  7825 ;;		_pwmSet1
  7826 ;;		_pwmSet2
  7827 ;; This function uses a non-reentrant model
  7828 ;;
  7829                           
  7830                           	psect	text26
  7831  003B74                     __ptext26:
  7832                           	callstack 0
  7833  003B74                     ___wmul:
  7834                           	callstack 27
  7835  003B74  5001               	movf	___wmul@multiplier^0,w,c
  7836  003B76  0203               	mulwf	___wmul@multiplicand^0,c
  7837  003B78  CFF3 F005          	movff	prodl,___wmul@product
  7838  003B7C  CFF4 F006          	movff	prodh,___wmul@product+1
  7839  003B80  5001               	movf	___wmul@multiplier^0,w,c
  7840  003B82  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  7841  003B84  50F3               	movf	243,w,c
  7842  003B86  2606               	addwf	(___wmul@product+1)^0,f,c
  7843  003B88  5002               	movf	(___wmul@multiplier+1)^0,w,c
  7844  003B8A  0203               	mulwf	___wmul@multiplicand^0,c
  7845  003B8C  50F3               	movf	243,w,c
  7846  003B8E  2606               	addwf	(___wmul@product+1)^0,f,c
  7847  003B90  C005  F001         	movff	___wmul@product,?___wmul
  7848  003B94  C006  F002         	movff	___wmul@product+1,?___wmul+1
  7849  003B98  0012               	return		;funcret
  7850  003B9A                     __end_of___wmul:
  7851                           	callstack 0
  7852                           
  7853 ;; *************** function ___lwdiv *****************
  7854 ;; Defined at:
  7855 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\lwdiv.c"
  7856 ;; Parameters:    Size  Location     Type
  7857 ;;  dividend        2    0[COMRAM] unsigned int 
  7858 ;;  divisor         2    2[COMRAM] unsigned int 
  7859 ;; Auto vars:     Size  Location     Type
  7860 ;;  quotient        2    4[COMRAM] unsigned int 
  7861 ;;  counter         1    6[COMRAM] unsigned char 
  7862 ;; Return value:  Size  Location     Type
  7863 ;;                  2    0[COMRAM] unsigned int 
  7864 ;; Registers used:
  7865 ;;		wreg, status,2, status,0
  7866 ;; Tracked objects:
  7867 ;;		On entry : 0/0
  7868 ;;		On exit  : 0/0
  7869 ;;		Unchanged: 0/0
  7870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7871 ;;      Params:         4       0       0       0       0       0       0
  7872 ;;      Locals:         3       0       0       0       0       0       0
  7873 ;;      Temps:          0       0       0       0       0       0       0
  7874 ;;      Totals:         7       0       0       0       0       0       0
  7875 ;;Total ram usage:        7 bytes
  7876 ;; Hardware stack levels used: 1
  7877 ;; This function calls:
  7878 ;;		Nothing
  7879 ;; This function is called by:
  7880 ;;		_pwmSet1
  7881 ;;		_pwmSet2
  7882 ;; This function uses a non-reentrant model
  7883 ;;
  7884                           
  7885                           	psect	text27
  7886  003770                     __ptext27:
  7887                           	callstack 0
  7888  003770                     ___lwdiv:
  7889                           	callstack 27
  7890  003770  0E00               	movlw	0
  7891  003772  6E06               	movwf	(___lwdiv@quotient+1)^0,c
  7892  003774  0E00               	movlw	0
  7893  003776  6E05               	movwf	___lwdiv@quotient^0,c
  7894  003778  5003               	movf	___lwdiv@divisor^0,w,c
  7895  00377A  1004               	iorwf	(___lwdiv@divisor+1)^0,w,c
  7896  00377C  B4D8               	btfsc	status,2,c
  7897  00377E  EFC3  F01B         	goto	u2411
  7898  003782  EFC5  F01B         	goto	u2410
  7899  003786                     u2411:
  7900  003786  EFED  F01B         	goto	l991
  7901  00378A                     u2410:
  7902  00378A  0E01               	movlw	1
  7903  00378C  6E07               	movwf	___lwdiv@counter^0,c
  7904  00378E  EFCD  F01B         	goto	l2777
  7905  003792                     l2775:
  7906  003792  90D8               	bcf	status,0,c
  7907  003794  3603               	rlcf	___lwdiv@divisor^0,f,c
  7908  003796  3604               	rlcf	(___lwdiv@divisor+1)^0,f,c
  7909  003798  2A07               	incf	___lwdiv@counter^0,f,c
  7910  00379A                     l2777:
  7911  00379A  AE04               	btfss	(___lwdiv@divisor+1)^0,7,c
  7912  00379C  EFD2  F01B         	goto	u2421
  7913  0037A0  EFD4  F01B         	goto	u2420
  7914  0037A4                     u2421:
  7915  0037A4  EFC9  F01B         	goto	l2775
  7916  0037A8                     u2420:
  7917  0037A8                     l2779:
  7918  0037A8  90D8               	bcf	status,0,c
  7919  0037AA  3605               	rlcf	___lwdiv@quotient^0,f,c
  7920  0037AC  3606               	rlcf	(___lwdiv@quotient+1)^0,f,c
  7921  0037AE  5003               	movf	___lwdiv@divisor^0,w,c
  7922  0037B0  5C01               	subwf	___lwdiv@dividend^0,w,c
  7923  0037B2  5004               	movf	(___lwdiv@divisor+1)^0,w,c
  7924  0037B4  5802               	subwfb	(___lwdiv@dividend+1)^0,w,c
  7925  0037B6  A0D8               	btfss	status,0,c
  7926  0037B8  EFE0  F01B         	goto	u2431
  7927  0037BC  EFE2  F01B         	goto	u2430
  7928  0037C0                     u2431:
  7929  0037C0  EFE7  F01B         	goto	l2787
  7930  0037C4                     u2430:
  7931  0037C4  5003               	movf	___lwdiv@divisor^0,w,c
  7932  0037C6  5E01               	subwf	___lwdiv@dividend^0,f,c
  7933  0037C8  5004               	movf	(___lwdiv@divisor+1)^0,w,c
  7934  0037CA  5A02               	subwfb	(___lwdiv@dividend+1)^0,f,c
  7935  0037CC  8005               	bsf	___lwdiv@quotient^0,0,c
  7936  0037CE                     l2787:
  7937  0037CE  90D8               	bcf	status,0,c
  7938  0037D0  3204               	rrcf	(___lwdiv@divisor+1)^0,f,c
  7939  0037D2  3203               	rrcf	___lwdiv@divisor^0,f,c
  7940  0037D4  2E07               	decfsz	___lwdiv@counter^0,f,c
  7941  0037D6  EFD4  F01B         	goto	l2779
  7942  0037DA                     l991:
  7943  0037DA  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  7944  0037DE  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7945  0037E2  0012               	return		;funcret
  7946  0037E4                     __end_of___lwdiv:
  7947                           	callstack 0
  7948                           
  7949 ;; *************** function _pwmFrequency *****************
  7950 ;; Defined at:
  7951 ;;		line 53 in file "pwm.c"
  7952 ;; Parameters:    Size  Location     Type
  7953 ;;  freq            2   14[COMRAM] unsigned int 
  7954 ;; Auto vars:     Size  Location     Type
  7955 ;;		None
  7956 ;; Return value:  Size  Location     Type
  7957 ;;                  1    wreg      void 
  7958 ;; Registers used:
  7959 ;;		wreg, status,2, status,0, cstack
  7960 ;; Tracked objects:
  7961 ;;		On entry : 0/0
  7962 ;;		On exit  : 0/0
  7963 ;;		Unchanged: 0/0
  7964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7965 ;;      Params:         2       0       0       0       0       0       0
  7966 ;;      Locals:         0       0       0       0       0       0       0
  7967 ;;      Temps:          0       0       0       0       0       0       0
  7968 ;;      Totals:         2       0       0       0       0       0       0
  7969 ;;Total ram usage:        2 bytes
  7970 ;; Hardware stack levels used: 1
  7971 ;; Hardware stack levels required when called: 1
  7972 ;; This function calls:
  7973 ;;		___aldiv
  7974 ;; This function is called by:
  7975 ;;		_preWash
  7976 ;;		_pwmInit
  7977 ;;		_buzzer
  7978 ;; This function uses a non-reentrant model
  7979 ;;
  7980                           
  7981                           	psect	text28
  7982  003B9A                     __ptext28:
  7983                           	callstack 0
  7984  003B9A                     _pwmFrequency:
  7985                           	callstack 28
  7986  003B9A                     
  7987                           ;pwm.c: 56:  PR2 = (125000l/(freq)) - 1;
  7988  003B9A  0E48               	movlw	72
  7989  003B9C  6E01               	movwf	___aldiv@dividend^0,c
  7990  003B9E  0EE8               	movlw	232
  7991  003BA0  6E02               	movwf	(___aldiv@dividend+1)^0,c
  7992  003BA2  0E01               	movlw	1
  7993  003BA4  6E03               	movwf	(___aldiv@dividend+2)^0,c
  7994  003BA6  0E00               	movlw	0
  7995  003BA8  6E04               	movwf	(___aldiv@dividend+3)^0,c
  7996  003BAA  C00F  F005         	movff	pwmFrequency@freq,___aldiv@divisor
  7997  003BAE  C010  F006         	movff	pwmFrequency@freq+1,___aldiv@divisor+1
  7998  003BB2  6A07               	clrf	(___aldiv@divisor+2)^0,c
  7999  003BB4  6A08               	clrf	(___aldiv@divisor+3)^0,c
  8000  003BB6  ECC5  F016         	call	___aldiv	;wreg free
  8001  003BBA  0401               	decf	?___aldiv^0,w,c
  8002  003BBC  6ECB               	movwf	203,c	;volatile
  8003  003BBE  0012               	return		;funcret
  8004  003BC0                     __end_of_pwmFrequency:
  8005                           	callstack 0
  8006                           
  8007 ;; *************** function ___aldiv *****************
  8008 ;; Defined at:
  8009 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\aldiv.c"
  8010 ;; Parameters:    Size  Location     Type
  8011 ;;  dividend        4    0[COMRAM] long 
  8012 ;;  divisor         4    4[COMRAM] long 
  8013 ;; Auto vars:     Size  Location     Type
  8014 ;;  quotient        4   10[COMRAM] long 
  8015 ;;  sign            1    9[COMRAM] unsigned char 
  8016 ;;  counter         1    8[COMRAM] unsigned char 
  8017 ;; Return value:  Size  Location     Type
  8018 ;;                  4    0[COMRAM] long 
  8019 ;; Registers used:
  8020 ;;		wreg, status,2, status,0
  8021 ;; Tracked objects:
  8022 ;;		On entry : 0/0
  8023 ;;		On exit  : 0/0
  8024 ;;		Unchanged: 0/0
  8025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8026 ;;      Params:         8       0       0       0       0       0       0
  8027 ;;      Locals:         6       0       0       0       0       0       0
  8028 ;;      Temps:          0       0       0       0       0       0       0
  8029 ;;      Totals:        14       0       0       0       0       0       0
  8030 ;;Total ram usage:       14 bytes
  8031 ;; Hardware stack levels used: 1
  8032 ;; This function calls:
  8033 ;;		Nothing
  8034 ;; This function is called by:
  8035 ;;		_washOne
  8036 ;;		_washTwo
  8037 ;;		_washThree
  8038 ;;		_washFour
  8039 ;;		_ssdTimer
  8040 ;;		_pwmFrequency
  8041 ;; This function uses a non-reentrant model
  8042 ;;
  8043                           
  8044                           	psect	text29
  8045  002D8A                     __ptext29:
  8046                           	callstack 0
  8047  002D8A                     ___aldiv:
  8048                           	callstack 28
  8049  002D8A  0E00               	movlw	0
  8050  002D8C  6E0A               	movwf	___aldiv@sign^0,c
  8051  002D8E  BE08               	btfsc	(___aldiv@divisor+3)^0,7,c
  8052  002D90  EFCE  F016         	goto	u2350
  8053  002D94  EFCC  F016         	goto	u2351
  8054  002D98                     u2351:
  8055  002D98  EFD8  F016         	goto	l2733
  8056  002D9C                     u2350:
  8057  002D9C  1E08               	comf	(___aldiv@divisor+3)^0,f,c
  8058  002D9E  1E07               	comf	(___aldiv@divisor+2)^0,f,c
  8059  002DA0  1E06               	comf	(___aldiv@divisor+1)^0,f,c
  8060  002DA2  6C05               	negf	___aldiv@divisor^0,c
  8061  002DA4  0E00               	movlw	0
  8062  002DA6  2206               	addwfc	(___aldiv@divisor+1)^0,f,c
  8063  002DA8  2207               	addwfc	(___aldiv@divisor+2)^0,f,c
  8064  002DAA  2208               	addwfc	(___aldiv@divisor+3)^0,f,c
  8065  002DAC  0E01               	movlw	1
  8066  002DAE  6E0A               	movwf	___aldiv@sign^0,c
  8067  002DB0                     l2733:
  8068  002DB0  BE04               	btfsc	(___aldiv@dividend+3)^0,7,c
  8069  002DB2  EFDF  F016         	goto	u2360
  8070  002DB6  EFDD  F016         	goto	u2361
  8071  002DBA                     u2361:
  8072  002DBA  EFE9  F016         	goto	l2739
  8073  002DBE                     u2360:
  8074  002DBE  1E04               	comf	(___aldiv@dividend+3)^0,f,c
  8075  002DC0  1E03               	comf	(___aldiv@dividend+2)^0,f,c
  8076  002DC2  1E02               	comf	(___aldiv@dividend+1)^0,f,c
  8077  002DC4  6C01               	negf	___aldiv@dividend^0,c
  8078  002DC6  0E00               	movlw	0
  8079  002DC8  2202               	addwfc	(___aldiv@dividend+1)^0,f,c
  8080  002DCA  2203               	addwfc	(___aldiv@dividend+2)^0,f,c
  8081  002DCC  2204               	addwfc	(___aldiv@dividend+3)^0,f,c
  8082  002DCE  0E01               	movlw	1
  8083  002DD0  1A0A               	xorwf	___aldiv@sign^0,f,c
  8084  002DD2                     l2739:
  8085  002DD2  0E00               	movlw	0
  8086  002DD4  6E0B               	movwf	___aldiv@quotient^0,c
  8087  002DD6  0E00               	movlw	0
  8088  002DD8  6E0C               	movwf	(___aldiv@quotient+1)^0,c
  8089  002DDA  0E00               	movlw	0
  8090  002DDC  6E0D               	movwf	(___aldiv@quotient+2)^0,c
  8091  002DDE  0E00               	movlw	0
  8092  002DE0  6E0E               	movwf	(___aldiv@quotient+3)^0,c
  8093  002DE2  5005               	movf	___aldiv@divisor^0,w,c
  8094  002DE4  1006               	iorwf	(___aldiv@divisor+1)^0,w,c
  8095  002DE6  1007               	iorwf	(___aldiv@divisor+2)^0,w,c
  8096  002DE8  1008               	iorwf	(___aldiv@divisor+3)^0,w,c
  8097  002DEA  B4D8               	btfsc	status,2,c
  8098  002DEC  EFFA  F016         	goto	u2371
  8099  002DF0  EFFC  F016         	goto	u2370
  8100  002DF4                     u2371:
  8101  002DF4  EF32  F017         	goto	l2761
  8102  002DF8                     u2370:
  8103  002DF8  0E01               	movlw	1
  8104  002DFA  6E09               	movwf	___aldiv@counter^0,c
  8105  002DFC  EF06  F017         	goto	l2747
  8106  002E00                     l2745:
  8107  002E00  90D8               	bcf	status,0,c
  8108  002E02  3605               	rlcf	___aldiv@divisor^0,f,c
  8109  002E04  3606               	rlcf	(___aldiv@divisor+1)^0,f,c
  8110  002E06  3607               	rlcf	(___aldiv@divisor+2)^0,f,c
  8111  002E08  3608               	rlcf	(___aldiv@divisor+3)^0,f,c
  8112  002E0A  2A09               	incf	___aldiv@counter^0,f,c
  8113  002E0C                     l2747:
  8114  002E0C  AE08               	btfss	(___aldiv@divisor+3)^0,7,c
  8115  002E0E  EF0B  F017         	goto	u2381
  8116  002E12  EF0D  F017         	goto	u2380
  8117  002E16                     u2381:
  8118  002E16  EF00  F017         	goto	l2745
  8119  002E1A                     u2380:
  8120  002E1A                     l2749:
  8121  002E1A  90D8               	bcf	status,0,c
  8122  002E1C  360B               	rlcf	___aldiv@quotient^0,f,c
  8123  002E1E  360C               	rlcf	(___aldiv@quotient+1)^0,f,c
  8124  002E20  360D               	rlcf	(___aldiv@quotient+2)^0,f,c
  8125  002E22  360E               	rlcf	(___aldiv@quotient+3)^0,f,c
  8126  002E24  5005               	movf	___aldiv@divisor^0,w,c
  8127  002E26  5C01               	subwf	___aldiv@dividend^0,w,c
  8128  002E28  5006               	movf	(___aldiv@divisor+1)^0,w,c
  8129  002E2A  5802               	subwfb	(___aldiv@dividend+1)^0,w,c
  8130  002E2C  5007               	movf	(___aldiv@divisor+2)^0,w,c
  8131  002E2E  5803               	subwfb	(___aldiv@dividend+2)^0,w,c
  8132  002E30  5008               	movf	(___aldiv@divisor+3)^0,w,c
  8133  002E32  5804               	subwfb	(___aldiv@dividend+3)^0,w,c
  8134  002E34  A0D8               	btfss	status,0,c
  8135  002E36  EF1F  F017         	goto	u2391
  8136  002E3A  EF21  F017         	goto	u2390
  8137  002E3E                     u2391:
  8138  002E3E  EF2A  F017         	goto	l2757
  8139  002E42                     u2390:
  8140  002E42  5005               	movf	___aldiv@divisor^0,w,c
  8141  002E44  5E01               	subwf	___aldiv@dividend^0,f,c
  8142  002E46  5006               	movf	(___aldiv@divisor+1)^0,w,c
  8143  002E48  5A02               	subwfb	(___aldiv@dividend+1)^0,f,c
  8144  002E4A  5007               	movf	(___aldiv@divisor+2)^0,w,c
  8145  002E4C  5A03               	subwfb	(___aldiv@dividend+2)^0,f,c
  8146  002E4E  5008               	movf	(___aldiv@divisor+3)^0,w,c
  8147  002E50  5A04               	subwfb	(___aldiv@dividend+3)^0,f,c
  8148  002E52  800B               	bsf	___aldiv@quotient^0,0,c
  8149  002E54                     l2757:
  8150  002E54  90D8               	bcf	status,0,c
  8151  002E56  3208               	rrcf	(___aldiv@divisor+3)^0,f,c
  8152  002E58  3207               	rrcf	(___aldiv@divisor+2)^0,f,c
  8153  002E5A  3206               	rrcf	(___aldiv@divisor+1)^0,f,c
  8154  002E5C  3205               	rrcf	___aldiv@divisor^0,f,c
  8155  002E5E  2E09               	decfsz	___aldiv@counter^0,f,c
  8156  002E60  EF0D  F017         	goto	l2749
  8157  002E64                     l2761:
  8158  002E64  500A               	movf	___aldiv@sign^0,w,c
  8159  002E66  B4D8               	btfsc	status,2,c
  8160  002E68  EF38  F017         	goto	u2401
  8161  002E6C  EF3A  F017         	goto	u2400
  8162  002E70                     u2401:
  8163  002E70  EF42  F017         	goto	l2765
  8164  002E74                     u2400:
  8165  002E74  1E0E               	comf	(___aldiv@quotient+3)^0,f,c
  8166  002E76  1E0D               	comf	(___aldiv@quotient+2)^0,f,c
  8167  002E78  1E0C               	comf	(___aldiv@quotient+1)^0,f,c
  8168  002E7A  6C0B               	negf	___aldiv@quotient^0,c
  8169  002E7C  0E00               	movlw	0
  8170  002E7E  220C               	addwfc	(___aldiv@quotient+1)^0,f,c
  8171  002E80  220D               	addwfc	(___aldiv@quotient+2)^0,f,c
  8172  002E82  220E               	addwfc	(___aldiv@quotient+3)^0,f,c
  8173  002E84                     l2765:
  8174  002E84  C00B  F001         	movff	___aldiv@quotient,?___aldiv
  8175  002E88  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
  8176  002E8C  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
  8177  002E90  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
  8178  002E94  0012               	return		;funcret
  8179  002E96                     __end_of___aldiv:
  8180                           	callstack 0
  8181                           
  8182 ;; *************** function ___flge *****************
  8183 ;; Defined at:
  8184 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\flge.c"
  8185 ;; Parameters:    Size  Location     Type
  8186 ;;  ff1             4    0[COMRAM] long 
  8187 ;;  ff2             4    4[COMRAM] long 
  8188 ;; Auto vars:     Size  Location     Type
  8189 ;;		None
  8190 ;; Return value:  Size  Location     Type
  8191 ;;		None               void
  8192 ;; Registers used:
  8193 ;;		wreg, status,2, status,0
  8194 ;; Tracked objects:
  8195 ;;		On entry : 0/0
  8196 ;;		On exit  : 0/0
  8197 ;;		Unchanged: 0/0
  8198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8199 ;;      Params:         8       0       0       0       0       0       0
  8200 ;;      Locals:         0       0       0       0       0       0       0
  8201 ;;      Temps:          4       0       0       0       0       0       0
  8202 ;;      Totals:        12       0       0       0       0       0       0
  8203 ;;Total ram usage:       12 bytes
  8204 ;; Hardware stack levels used: 1
  8205 ;; This function calls:
  8206 ;;		Nothing
  8207 ;; This function is called by:
  8208 ;;		_washOne
  8209 ;;		_washTwo
  8210 ;;		_washThree
  8211 ;;		_washFour
  8212 ;;		_ssdTimer
  8213 ;; This function uses a non-reentrant model
  8214 ;;
  8215                           
  8216                           	psect	text30
  8217  002F9E                     __ptext30:
  8218                           	callstack 0
  8219  002F9E                     ___flge:
  8220                           	callstack 27
  8221  002F9E  0E00               	movlw	0
  8222  002FA0  1401               	andwf	___flge@ff1^0,w,c
  8223  002FA2  6E09               	movwf	??___flge^0,c
  8224  002FA4  0E00               	movlw	0
  8225  002FA6  1402               	andwf	(___flge@ff1+1)^0,w,c
  8226  002FA8  6E0A               	movwf	(??___flge+1)^0,c
  8227  002FAA  0E80               	movlw	128
  8228  002FAC  1403               	andwf	(___flge@ff1+2)^0,w,c
  8229  002FAE  6E0B               	movwf	(??___flge+2)^0,c
  8230  002FB0  0E7F               	movlw	127
  8231  002FB2  1404               	andwf	(___flge@ff1+3)^0,w,c
  8232  002FB4  6E0C               	movwf	(??___flge+3)^0,c
  8233  002FB6  5009               	movf	??___flge^0,w,c
  8234  002FB8  100A               	iorwf	(??___flge+1)^0,w,c
  8235  002FBA  100B               	iorwf	(??___flge+2)^0,w,c
  8236  002FBC  100C               	iorwf	(??___flge+3)^0,w,c
  8237  002FBE  A4D8               	btfss	status,2,c
  8238  002FC0  EFE4  F017         	goto	u3081
  8239  002FC4  EFE6  F017         	goto	u3080
  8240  002FC8                     u3081:
  8241  002FC8  EFEE  F017         	goto	l3245
  8242  002FCC                     u3080:
  8243  002FCC  0E00               	movlw	0
  8244  002FCE  6E01               	movwf	___flge@ff1^0,c
  8245  002FD0  0E00               	movlw	0
  8246  002FD2  6E02               	movwf	(___flge@ff1+1)^0,c
  8247  002FD4  0E00               	movlw	0
  8248  002FD6  6E03               	movwf	(___flge@ff1+2)^0,c
  8249  002FD8  0E00               	movlw	0
  8250  002FDA  6E04               	movwf	(___flge@ff1+3)^0,c
  8251  002FDC                     l3245:
  8252  002FDC  0E00               	movlw	0
  8253  002FDE  1405               	andwf	___flge@ff2^0,w,c
  8254  002FE0  6E09               	movwf	??___flge^0,c
  8255  002FE2  0E00               	movlw	0
  8256  002FE4  1406               	andwf	(___flge@ff2+1)^0,w,c
  8257  002FE6  6E0A               	movwf	(??___flge+1)^0,c
  8258  002FE8  0E80               	movlw	128
  8259  002FEA  1407               	andwf	(___flge@ff2+2)^0,w,c
  8260  002FEC  6E0B               	movwf	(??___flge+2)^0,c
  8261  002FEE  0E7F               	movlw	127
  8262  002FF0  1408               	andwf	(___flge@ff2+3)^0,w,c
  8263  002FF2  6E0C               	movwf	(??___flge+3)^0,c
  8264  002FF4  5009               	movf	??___flge^0,w,c
  8265  002FF6  100A               	iorwf	(??___flge+1)^0,w,c
  8266  002FF8  100B               	iorwf	(??___flge+2)^0,w,c
  8267  002FFA  100C               	iorwf	(??___flge+3)^0,w,c
  8268  002FFC  A4D8               	btfss	status,2,c
  8269  002FFE  EF03  F018         	goto	u3091
  8270  003002  EF05  F018         	goto	u3090
  8271  003006                     u3091:
  8272  003006  EF0D  F018         	goto	l3249
  8273  00300A                     u3090:
  8274  00300A  0E00               	movlw	0
  8275  00300C  6E05               	movwf	___flge@ff2^0,c
  8276  00300E  0E00               	movlw	0
  8277  003010  6E06               	movwf	(___flge@ff2+1)^0,c
  8278  003012  0E00               	movlw	0
  8279  003014  6E07               	movwf	(___flge@ff2+2)^0,c
  8280  003016  0E00               	movlw	0
  8281  003018  6E08               	movwf	(___flge@ff2+3)^0,c
  8282  00301A                     l3249:
  8283  00301A  AE04               	btfss	(___flge@ff1+3)^0,7,c
  8284  00301C  EF12  F018         	goto	u3101
  8285  003020  EF14  F018         	goto	u3100
  8286  003024                     u3101:
  8287  003024  EF1D  F018         	goto	l3253
  8288  003028                     u3100:
  8289  003028  6C01               	negf	___flge@ff1^0,c
  8290  00302A  1E02               	comf	(___flge@ff1+1)^0,f,c
  8291  00302C  B0D8               	btfsc	status,0,c
  8292  00302E  2A02               	incf	(___flge@ff1+1)^0,f,c
  8293  003030  1E03               	comf	(___flge@ff1+2)^0,f,c
  8294  003032  B0D8               	btfsc	status,0,c
  8295  003034  2A03               	incf	(___flge@ff1+2)^0,f,c
  8296  003036  0E80               	movlw	128
  8297  003038  5604               	subfwb	(___flge@ff1+3)^0,f,c
  8298  00303A                     l3253:
  8299  00303A  AE08               	btfss	(___flge@ff2+3)^0,7,c
  8300  00303C  EF22  F018         	goto	u3111
  8301  003040  EF24  F018         	goto	u3110
  8302  003044                     u3111:
  8303  003044  EF2D  F018         	goto	l765
  8304  003048                     u3110:
  8305  003048  6C05               	negf	___flge@ff2^0,c
  8306  00304A  1E06               	comf	(___flge@ff2+1)^0,f,c
  8307  00304C  B0D8               	btfsc	status,0,c
  8308  00304E  2A06               	incf	(___flge@ff2+1)^0,f,c
  8309  003050  1E07               	comf	(___flge@ff2+2)^0,f,c
  8310  003052  B0D8               	btfsc	status,0,c
  8311  003054  2A07               	incf	(___flge@ff2+2)^0,f,c
  8312  003056  0E80               	movlw	128
  8313  003058  5608               	subfwb	(___flge@ff2+3)^0,f,c
  8314  00305A                     l765:
  8315  00305A  0E00               	movlw	0
  8316  00305C  1A01               	xorwf	___flge@ff1^0,f,c
  8317  00305E  0E00               	movlw	0
  8318  003060  1A02               	xorwf	(___flge@ff1+1)^0,f,c
  8319  003062  0E00               	movlw	0
  8320  003064  1A03               	xorwf	(___flge@ff1+2)^0,f,c
  8321  003066  0E80               	movlw	128
  8322  003068  1A04               	xorwf	(___flge@ff1+3)^0,f,c
  8323  00306A  0E00               	movlw	0
  8324  00306C  1A05               	xorwf	___flge@ff2^0,f,c
  8325  00306E  0E00               	movlw	0
  8326  003070  1A06               	xorwf	(___flge@ff2+1)^0,f,c
  8327  003072  0E00               	movlw	0
  8328  003074  1A07               	xorwf	(___flge@ff2+2)^0,f,c
  8329  003076  0E80               	movlw	128
  8330  003078  1A08               	xorwf	(___flge@ff2+3)^0,f,c
  8331  00307A  5005               	movf	___flge@ff2^0,w,c
  8332  00307C  5C01               	subwf	___flge@ff1^0,w,c
  8333  00307E  5006               	movf	(___flge@ff2+1)^0,w,c
  8334  003080  5802               	subwfb	(___flge@ff1+1)^0,w,c
  8335  003082  5007               	movf	(___flge@ff2+2)^0,w,c
  8336  003084  5803               	subwfb	(___flge@ff1+2)^0,w,c
  8337  003086  5008               	movf	(___flge@ff2+3)^0,w,c
  8338  003088  5804               	subwfb	(___flge@ff1+3)^0,w,c
  8339  00308A  B0D8               	btfsc	status,0,c
  8340  00308C  EF4A  F018         	goto	u3121
  8341  003090  EF4C  F018         	goto	u3120
  8342  003094                     u3121:
  8343  003094  EF4F  F018         	goto	l3259
  8344  003098                     u3120:
  8345  003098  90D8               	bcf	status,0,c
  8346  00309A  EF50  F018         	goto	l770
  8347  00309E                     l3259:
  8348  00309E  80D8               	bsf	status,0,c
  8349  0030A0                     l770:
  8350  0030A0  0012               	return		;funcret
  8351  0030A2                     __end_of___flge:
  8352                           	callstack 0
  8353                           
  8354 ;; *************** function ___fladd *****************
  8355 ;; Defined at:
  8356 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\sprcadd.c"
  8357 ;; Parameters:    Size  Location     Type
  8358 ;;  b               4    0[COMRAM] long 
  8359 ;;  a               4    4[COMRAM] long 
  8360 ;; Auto vars:     Size  Location     Type
  8361 ;;  grs             1   15[COMRAM] unsigned char 
  8362 ;;  bexp            1   14[COMRAM] unsigned char 
  8363 ;;  aexp            1   13[COMRAM] unsigned char 
  8364 ;;  signs           1   12[COMRAM] unsigned char 
  8365 ;; Return value:  Size  Location     Type
  8366 ;;                  4    0[COMRAM] unsigned char 
  8367 ;; Registers used:
  8368 ;;		wreg, status,2, status,0
  8369 ;; Tracked objects:
  8370 ;;		On entry : 0/0
  8371 ;;		On exit  : 0/0
  8372 ;;		Unchanged: 0/0
  8373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8374 ;;      Params:         8       0       0       0       0       0       0
  8375 ;;      Locals:         4       0       0       0       0       0       0
  8376 ;;      Temps:          4       0       0       0       0       0       0
  8377 ;;      Totals:        16       0       0       0       0       0       0
  8378 ;;Total ram usage:       16 bytes
  8379 ;; Hardware stack levels used: 1
  8380 ;; This function calls:
  8381 ;;		Nothing
  8382 ;; This function is called by:
  8383 ;;		_washOne
  8384 ;;		_washTwo
  8385 ;;		_washThree
  8386 ;;		_washFour
  8387 ;;		_ssdTimer
  8388 ;; This function uses a non-reentrant model
  8389 ;;
  8390                           
  8391                           	psect	text31
  8392  001C08                     __ptext31:
  8393                           	callstack 0
  8394  001C08                     ___fladd:
  8395                           	callstack 27
  8396  001C08  5004               	movf	(___fladd@b+3)^0,w,c
  8397  001C0A  0B80               	andlw	128
  8398  001C0C  6E0D               	movwf	___fladd@signs^0,c
  8399  001C0E  5004               	movf	(___fladd@b+3)^0,w,c
  8400  001C10  2404               	addwf	(___fladd@b+3)^0,w,c
  8401  001C12  6E0F               	movwf	___fladd@bexp^0,c
  8402  001C14  AE03               	btfss	(___fladd@b+2)^0,7,c
  8403  001C16  EF0F  F00E         	goto	u2691
  8404  001C1A  EF11  F00E         	goto	u2690
  8405  001C1E                     u2691:
  8406  001C1E  EF12  F00E         	goto	l3045
  8407  001C22                     u2690:
  8408  001C22  800F               	bsf	___fladd@bexp^0,0,c
  8409  001C24                     l3045:
  8410  001C24  500F               	movf	___fladd@bexp^0,w,c
  8411  001C26  B4D8               	btfsc	status,2,c
  8412  001C28  EF18  F00E         	goto	u2701
  8413  001C2C  EF1A  F00E         	goto	u2700
  8414  001C30                     u2701:
  8415  001C30  EF2F  F00E         	goto	l3055
  8416  001C34                     u2700:
  8417  001C34  280F               	incf	___fladd@bexp^0,w,c
  8418  001C36  A4D8               	btfss	status,2,c
  8419  001C38  EF20  F00E         	goto	u2711
  8420  001C3C  EF22  F00E         	goto	u2710
  8421  001C40                     u2711:
  8422  001C40  EF2A  F00E         	goto	l3051
  8423  001C44                     u2710:
  8424  001C44  0E00               	movlw	0
  8425  001C46  6E01               	movwf	___fladd@b^0,c
  8426  001C48  0E00               	movlw	0
  8427  001C4A  6E02               	movwf	(___fladd@b+1)^0,c
  8428  001C4C  0E00               	movlw	0
  8429  001C4E  6E03               	movwf	(___fladd@b+2)^0,c
  8430  001C50  0E00               	movlw	0
  8431  001C52  6E04               	movwf	(___fladd@b+3)^0,c
  8432  001C54                     l3051:
  8433  001C54  8E03               	bsf	(___fladd@b+2)^0,7,c
  8434  001C56  0E00               	movlw	0
  8435  001C58  6E04               	movwf	(___fladd@b+3)^0,c
  8436  001C5A  EF37  F00E         	goto	l3057
  8437  001C5E                     l3055:
  8438  001C5E  0E00               	movlw	0
  8439  001C60  6E01               	movwf	___fladd@b^0,c
  8440  001C62  0E00               	movlw	0
  8441  001C64  6E02               	movwf	(___fladd@b+1)^0,c
  8442  001C66  0E00               	movlw	0
  8443  001C68  6E03               	movwf	(___fladd@b+2)^0,c
  8444  001C6A  0E00               	movlw	0
  8445  001C6C  6E04               	movwf	(___fladd@b+3)^0,c
  8446  001C6E                     l3057:
  8447  001C6E  5008               	movf	(___fladd@a+3)^0,w,c
  8448  001C70  0B80               	andlw	128
  8449  001C72  6E0E               	movwf	___fladd@aexp^0,c
  8450  001C74  500D               	movf	___fladd@signs^0,w,c
  8451  001C76  180E               	xorwf	___fladd@aexp^0,w,c
  8452  001C78  B4D8               	btfsc	status,2,c
  8453  001C7A  EF41  F00E         	goto	u2721
  8454  001C7E  EF43  F00E         	goto	u2720
  8455  001C82                     u2721:
  8456  001C82  EF44  F00E         	goto	l3063
  8457  001C86                     u2720:
  8458  001C86  8C0D               	bsf	___fladd@signs^0,6,c
  8459  001C88                     l3063:
  8460  001C88  5008               	movf	(___fladd@a+3)^0,w,c
  8461  001C8A  2408               	addwf	(___fladd@a+3)^0,w,c
  8462  001C8C  6E0E               	movwf	___fladd@aexp^0,c
  8463  001C8E  AE07               	btfss	(___fladd@a+2)^0,7,c
  8464  001C90  EF4C  F00E         	goto	u2731
  8465  001C94  EF4E  F00E         	goto	u2730
  8466  001C98                     u2731:
  8467  001C98  EF4F  F00E         	goto	l3069
  8468  001C9C                     u2730:
  8469  001C9C  800E               	bsf	___fladd@aexp^0,0,c
  8470  001C9E                     l3069:
  8471  001C9E  500E               	movf	___fladd@aexp^0,w,c
  8472  001CA0  B4D8               	btfsc	status,2,c
  8473  001CA2  EF55  F00E         	goto	u2741
  8474  001CA6  EF57  F00E         	goto	u2740
  8475  001CAA                     u2741:
  8476  001CAA  EF6C  F00E         	goto	l3079
  8477  001CAE                     u2740:
  8478  001CAE  280E               	incf	___fladd@aexp^0,w,c
  8479  001CB0  A4D8               	btfss	status,2,c
  8480  001CB2  EF5D  F00E         	goto	u2751
  8481  001CB6  EF5F  F00E         	goto	u2750
  8482  001CBA                     u2751:
  8483  001CBA  EF67  F00E         	goto	l3075
  8484  001CBE                     u2750:
  8485  001CBE  0E00               	movlw	0
  8486  001CC0  6E05               	movwf	___fladd@a^0,c
  8487  001CC2  0E00               	movlw	0
  8488  001CC4  6E06               	movwf	(___fladd@a+1)^0,c
  8489  001CC6  0E00               	movlw	0
  8490  001CC8  6E07               	movwf	(___fladd@a+2)^0,c
  8491  001CCA  0E00               	movlw	0
  8492  001CCC  6E08               	movwf	(___fladd@a+3)^0,c
  8493  001CCE                     l3075:
  8494  001CCE  8E07               	bsf	(___fladd@a+2)^0,7,c
  8495  001CD0  0E00               	movlw	0
  8496  001CD2  6E08               	movwf	(___fladd@a+3)^0,c
  8497  001CD4  EF74  F00E         	goto	l3081
  8498  001CD8                     l3079:
  8499  001CD8  0E00               	movlw	0
  8500  001CDA  6E05               	movwf	___fladd@a^0,c
  8501  001CDC  0E00               	movlw	0
  8502  001CDE  6E06               	movwf	(___fladd@a+1)^0,c
  8503  001CE0  0E00               	movlw	0
  8504  001CE2  6E07               	movwf	(___fladd@a+2)^0,c
  8505  001CE4  0E00               	movlw	0
  8506  001CE6  6E08               	movwf	(___fladd@a+3)^0,c
  8507  001CE8                     l3081:
  8508  001CE8  500F               	movf	___fladd@bexp^0,w,c
  8509  001CEA  5C0E               	subwf	___fladd@aexp^0,w,c
  8510  001CEC  B0D8               	btfsc	status,0,c
  8511  001CEE  EF7B  F00E         	goto	u2761
  8512  001CF2  EF7D  F00E         	goto	u2760
  8513  001CF6                     u2761:
  8514  001CF6  EFA4  F00E         	goto	l3117
  8515  001CFA                     u2760:
  8516  001CFA  AC0D               	btfss	___fladd@signs^0,6,c
  8517  001CFC  EF82  F00E         	goto	u2771
  8518  001D00  EF84  F00E         	goto	u2770
  8519  001D04                     u2771:
  8520  001D04  EF86  F00E         	goto	l3087
  8521  001D08                     u2770:
  8522  001D08  0E80               	movlw	128
  8523  001D0A  1A0D               	xorwf	___fladd@signs^0,f,c
  8524  001D0C                     l3087:
  8525  001D0C  C00F  F010         	movff	___fladd@bexp,___fladd@grs
  8526  001D10  C00E  F00F         	movff	___fladd@aexp,___fladd@bexp
  8527  001D14  C010  F00E         	movff	___fladd@grs,___fladd@aexp
  8528  001D18  C001  F010         	movff	___fladd@b,___fladd@grs
  8529  001D1C  C005  F001         	movff	___fladd@a,___fladd@b
  8530  001D20  C010  F005         	movff	___fladd@grs,___fladd@a
  8531  001D24  C002  F010         	movff	___fladd@b+1,___fladd@grs
  8532  001D28  C006  F002         	movff	___fladd@a+1,___fladd@b+1
  8533  001D2C  C010  F006         	movff	___fladd@grs,___fladd@a+1
  8534  001D30  C003  F010         	movff	___fladd@b+2,___fladd@grs
  8535  001D34  C007  F003         	movff	___fladd@a+2,___fladd@b+2
  8536  001D38  C010  F007         	movff	___fladd@grs,___fladd@a+2
  8537  001D3C  C004  F010         	movff	___fladd@b+3,___fladd@grs
  8538  001D40  C008  F004         	movff	___fladd@a+3,___fladd@b+3
  8539  001D44  C010  F008         	movff	___fladd@grs,___fladd@a+3
  8540  001D48                     l3117:
  8541  001D48  0E00               	movlw	0
  8542  001D4A  6E10               	movwf	___fladd@grs^0,c
  8543  001D4C  500F               	movf	___fladd@bexp^0,w,c
  8544  001D4E  C00E  F009         	movff	___fladd@aexp,??___fladd
  8545  001D52  6A0A               	clrf	(??___fladd+1)^0,c
  8546  001D54  5E09               	subwf	??___fladd^0,f,c
  8547  001D56  0E00               	movlw	0
  8548  001D58  5A0A               	subwfb	(??___fladd+1)^0,f,c
  8549  001D5A  BE0A               	btfsc	(??___fladd+1)^0,7,c
  8550  001D5C  EFB9  F00E         	goto	u2781
  8551  001D60  500A               	movf	(??___fladd+1)^0,w,c
  8552  001D62  E109               	bnz	u2780
  8553  001D64  0E1A               	movlw	26
  8554  001D66  5C09               	subwf	??___fladd^0,w,c
  8555  001D68  A0D8               	btfss	status,0,c
  8556  001D6A  EFB9  F00E         	goto	u2781
  8557  001D6E  EFBB  F00E         	goto	u2780
  8558  001D72                     u2781:
  8559  001D72  EFF2  F00E         	goto	l1029
  8560  001D76                     u2780:
  8561  001D76  5001               	movf	___fladd@b^0,w,c
  8562  001D78  1002               	iorwf	(___fladd@b+1)^0,w,c
  8563  001D7A  1003               	iorwf	(___fladd@b+2)^0,w,c
  8564  001D7C  1004               	iorwf	(___fladd@b+3)^0,w,c
  8565  001D7E  A4D8               	btfss	status,2,c
  8566  001D80  EFC4  F00E         	goto	u2791
  8567  001D84  EFC7  F00E         	goto	u2790
  8568  001D88                     u2791:
  8569  001D88  0E01               	movlw	1
  8570  001D8A  EFC8  F00E         	goto	u2800
  8571  001D8E                     u2790:
  8572  001D8E  0E00               	movlw	0
  8573  001D90                     u2800:
  8574  001D90  6E10               	movwf	___fladd@grs^0,c
  8575  001D92  0E00               	movlw	0
  8576  001D94  6E01               	movwf	___fladd@b^0,c
  8577  001D96  0E00               	movlw	0
  8578  001D98  6E02               	movwf	(___fladd@b+1)^0,c
  8579  001D9A  0E00               	movlw	0
  8580  001D9C  6E03               	movwf	(___fladd@b+2)^0,c
  8581  001D9E  0E00               	movlw	0
  8582  001DA0  6E04               	movwf	(___fladd@b+3)^0,c
  8583  001DA2  C00E  F00F         	movff	___fladd@aexp,___fladd@bexp
  8584  001DA6  EFFB  F00E         	goto	l1028
  8585  001DAA                     l1030:
  8586  001DAA  A010               	btfss	___fladd@grs^0,0,c
  8587  001DAC  EFDA  F00E         	goto	u2811
  8588  001DB0  EFDC  F00E         	goto	u2810
  8589  001DB4                     u2811:
  8590  001DB4  EFE2  F00E         	goto	l3129
  8591  001DB8                     u2810:
  8592  001DB8  90D8               	bcf	status,0,c
  8593  001DBA  3010               	rrcf	___fladd@grs^0,w,c
  8594  001DBC  0901               	iorlw	1
  8595  001DBE  6E10               	movwf	___fladd@grs^0,c
  8596  001DC0  EFE4  F00E         	goto	l3131
  8597  001DC4                     l3129:
  8598  001DC4  90D8               	bcf	status,0,c
  8599  001DC6  3210               	rrcf	___fladd@grs^0,f,c
  8600  001DC8                     l3131:
  8601  001DC8  A001               	btfss	___fladd@b^0,0,c
  8602  001DCA  EFE9  F00E         	goto	u2821
  8603  001DCE  EFEB  F00E         	goto	u2820
  8604  001DD2                     u2821:
  8605  001DD2  EFEC  F00E         	goto	l3135
  8606  001DD6                     u2820:
  8607  001DD6  8E10               	bsf	___fladd@grs^0,7,c
  8608  001DD8                     l3135:
  8609  001DD8  3404               	rlcf	(___fladd@b+3)^0,w,c
  8610  001DDA  3204               	rrcf	(___fladd@b+3)^0,f,c
  8611  001DDC  3203               	rrcf	(___fladd@b+2)^0,f,c
  8612  001DDE  3202               	rrcf	(___fladd@b+1)^0,f,c
  8613  001DE0  3201               	rrcf	___fladd@b^0,f,c
  8614  001DE2  2A0F               	incf	___fladd@bexp^0,f,c
  8615  001DE4                     l1029:
  8616  001DE4  500E               	movf	___fladd@aexp^0,w,c
  8617  001DE6  5C0F               	subwf	___fladd@bexp^0,w,c
  8618  001DE8  A0D8               	btfss	status,0,c
  8619  001DEA  EFF9  F00E         	goto	u2831
  8620  001DEE  EFFB  F00E         	goto	u2830
  8621  001DF2                     u2831:
  8622  001DF2  EFD5  F00E         	goto	l1030
  8623  001DF6                     u2830:
  8624  001DF6                     l1028:
  8625  001DF6  BC0D               	btfsc	___fladd@signs^0,6,c
  8626  001DF8  EF00  F00F         	goto	u2841
  8627  001DFC  EF02  F00F         	goto	u2840
  8628  001E00                     u2841:
  8629  001E00  EF42  F00F         	goto	l3163
  8630  001E04                     u2840:
  8631  001E04  500F               	movf	___fladd@bexp^0,w,c
  8632  001E06  A4D8               	btfss	status,2,c
  8633  001E08  EF08  F00F         	goto	u2851
  8634  001E0C  EF0A  F00F         	goto	u2850
  8635  001E10                     u2851:
  8636  001E10  EF14  F00F         	goto	l3145
  8637  001E14                     u2850:
  8638  001E14  0E00               	movlw	0
  8639  001E16  6E01               	movwf	?___fladd^0,c
  8640  001E18  0E00               	movlw	0
  8641  001E1A  6E02               	movwf	(?___fladd+1)^0,c
  8642  001E1C  0E00               	movlw	0
  8643  001E1E  6E03               	movwf	(?___fladd+2)^0,c
  8644  001E20  0E00               	movlw	0
  8645  001E22  6E04               	movwf	(?___fladd+3)^0,c
  8646  001E24  EF63  F010         	goto	l1037
  8647  001E28                     l3145:
  8648  001E28  5005               	movf	___fladd@a^0,w,c
  8649  001E2A  2601               	addwf	___fladd@b^0,f,c
  8650  001E2C  5006               	movf	(___fladd@a+1)^0,w,c
  8651  001E2E  2202               	addwfc	(___fladd@b+1)^0,f,c
  8652  001E30  5007               	movf	(___fladd@a+2)^0,w,c
  8653  001E32  2203               	addwfc	(___fladd@b+2)^0,f,c
  8654  001E34  5008               	movf	(___fladd@a+3)^0,w,c
  8655  001E36  2204               	addwfc	(___fladd@b+3)^0,f,c
  8656  001E38  A004               	btfss	(___fladd@b+3)^0,0,c
  8657  001E3A  EF21  F00F         	goto	u2861
  8658  001E3E  EF23  F00F         	goto	u2860
  8659  001E42                     u2861:
  8660  001E42  EFCF  F00F         	goto	l3199
  8661  001E46                     u2860:
  8662  001E46  A010               	btfss	___fladd@grs^0,0,c
  8663  001E48  EF28  F00F         	goto	u2871
  8664  001E4C  EF2A  F00F         	goto	u2870
  8665  001E50                     u2871:
  8666  001E50  EF30  F00F         	goto	l3153
  8667  001E54                     u2870:
  8668  001E54  90D8               	bcf	status,0,c
  8669  001E56  3010               	rrcf	___fladd@grs^0,w,c
  8670  001E58  0901               	iorlw	1
  8671  001E5A  6E10               	movwf	___fladd@grs^0,c
  8672  001E5C  EF32  F00F         	goto	l3155
  8673  001E60                     l3153:
  8674  001E60  90D8               	bcf	status,0,c
  8675  001E62  3210               	rrcf	___fladd@grs^0,f,c
  8676  001E64                     l3155:
  8677  001E64  A001               	btfss	___fladd@b^0,0,c
  8678  001E66  EF37  F00F         	goto	u2881
  8679  001E6A  EF39  F00F         	goto	u2880
  8680  001E6E                     u2881:
  8681  001E6E  EF3A  F00F         	goto	l3159
  8682  001E72                     u2880:
  8683  001E72  8E10               	bsf	___fladd@grs^0,7,c
  8684  001E74                     l3159:
  8685  001E74  3404               	rlcf	(___fladd@b+3)^0,w,c
  8686  001E76  3204               	rrcf	(___fladd@b+3)^0,f,c
  8687  001E78  3203               	rrcf	(___fladd@b+2)^0,f,c
  8688  001E7A  3202               	rrcf	(___fladd@b+1)^0,f,c
  8689  001E7C  3201               	rrcf	___fladd@b^0,f,c
  8690  001E7E  2A0F               	incf	___fladd@bexp^0,f,c
  8691  001E80  EFCF  F00F         	goto	l3199
  8692  001E84                     l3163:
  8693  001E84  5005               	movf	___fladd@a^0,w,c
  8694  001E86  5C01               	subwf	___fladd@b^0,w,c
  8695  001E88  5006               	movf	(___fladd@a+1)^0,w,c
  8696  001E8A  5802               	subwfb	(___fladd@b+1)^0,w,c
  8697  001E8C  5007               	movf	(___fladd@a+2)^0,w,c
  8698  001E8E  5803               	subwfb	(___fladd@b+2)^0,w,c
  8699  001E90  5004               	movf	(___fladd@b+3)^0,w,c
  8700  001E92  0A80               	xorlw	128
  8701  001E94  6E09               	movwf	??___fladd^0,c
  8702  001E96  5008               	movf	(___fladd@a+3)^0,w,c
  8703  001E98  0A80               	xorlw	128
  8704  001E9A  5809               	subwfb	??___fladd^0,w,c
  8705  001E9C  B0D8               	btfsc	status,0,c
  8706  001E9E  EF53  F00F         	goto	u2891
  8707  001EA2  EF55  F00F         	goto	u2890
  8708  001EA6                     u2891:
  8709  001EA6  EF80  F00F         	goto	l3173
  8710  001EAA                     u2890:
  8711  001EAA  5001               	movf	___fladd@b^0,w,c
  8712  001EAC  5C05               	subwf	___fladd@a^0,w,c
  8713  001EAE  6E09               	movwf	??___fladd^0,c
  8714  001EB0  5002               	movf	(___fladd@b+1)^0,w,c
  8715  001EB2  5806               	subwfb	(___fladd@a+1)^0,w,c
  8716  001EB4  6E0A               	movwf	(??___fladd+1)^0,c
  8717  001EB6  5003               	movf	(___fladd@b+2)^0,w,c
  8718  001EB8  5807               	subwfb	(___fladd@a+2)^0,w,c
  8719  001EBA  6E0B               	movwf	(??___fladd+2)^0,c
  8720  001EBC  5004               	movf	(___fladd@b+3)^0,w,c
  8721  001EBE  5808               	subwfb	(___fladd@a+3)^0,w,c
  8722  001EC0  6E0C               	movwf	(??___fladd+3)^0,c
  8723  001EC2  0EFF               	movlw	255
  8724  001EC4  2409               	addwf	??___fladd^0,w,c
  8725  001EC6  6E01               	movwf	___fladd@b^0,c
  8726  001EC8  0EFF               	movlw	255
  8727  001ECA  200A               	addwfc	(??___fladd+1)^0,w,c
  8728  001ECC  6E02               	movwf	(___fladd@b+1)^0,c
  8729  001ECE  0EFF               	movlw	255
  8730  001ED0  200B               	addwfc	(??___fladd+2)^0,w,c
  8731  001ED2  6E03               	movwf	(___fladd@b+2)^0,c
  8732  001ED4  0EFF               	movlw	255
  8733  001ED6  200C               	addwfc	(??___fladd+3)^0,w,c
  8734  001ED8  6E04               	movwf	(___fladd@b+3)^0,c
  8735  001EDA  0E80               	movlw	128
  8736  001EDC  1A0D               	xorwf	___fladd@signs^0,f,c
  8737  001EDE  6C10               	negf	___fladd@grs^0,c
  8738  001EE0  5010               	movf	___fladd@grs^0,w,c
  8739  001EE2  A4D8               	btfss	status,2,c
  8740  001EE4  EF76  F00F         	goto	u2901
  8741  001EE8  EF78  F00F         	goto	u2900
  8742  001EEC                     u2901:
  8743  001EEC  EF88  F00F         	goto	l1045
  8744  001EF0                     u2900:
  8745  001EF0  0E01               	movlw	1
  8746  001EF2  2601               	addwf	___fladd@b^0,f,c
  8747  001EF4  0E00               	movlw	0
  8748  001EF6  2202               	addwfc	(___fladd@b+1)^0,f,c
  8749  001EF8  2203               	addwfc	(___fladd@b+2)^0,f,c
  8750  001EFA  2204               	addwfc	(___fladd@b+3)^0,f,c
  8751  001EFC  EF88  F00F         	goto	l1045
  8752  001F00                     l3173:
  8753  001F00  5005               	movf	___fladd@a^0,w,c
  8754  001F02  5E01               	subwf	___fladd@b^0,f,c
  8755  001F04  5006               	movf	(___fladd@a+1)^0,w,c
  8756  001F06  5A02               	subwfb	(___fladd@b+1)^0,f,c
  8757  001F08  5007               	movf	(___fladd@a+2)^0,w,c
  8758  001F0A  5A03               	subwfb	(___fladd@b+2)^0,f,c
  8759  001F0C  5008               	movf	(___fladd@a+3)^0,w,c
  8760  001F0E  5A04               	subwfb	(___fladd@b+3)^0,f,c
  8761  001F10                     l1045:
  8762  001F10  5001               	movf	___fladd@b^0,w,c
  8763  001F12  1002               	iorwf	(___fladd@b+1)^0,w,c
  8764  001F14  1003               	iorwf	(___fladd@b+2)^0,w,c
  8765  001F16  1004               	iorwf	(___fladd@b+3)^0,w,c
  8766  001F18  A4D8               	btfss	status,2,c
  8767  001F1A  EF91  F00F         	goto	u2911
  8768  001F1E  EF93  F00F         	goto	u2910
  8769  001F22                     u2911:
  8770  001F22  EFC8  F00F         	goto	l3197
  8771  001F26                     u2910:
  8772  001F26  5010               	movf	___fladd@grs^0,w,c
  8773  001F28  A4D8               	btfss	status,2,c
  8774  001F2A  EF99  F00F         	goto	u2921
  8775  001F2E  EF9B  F00F         	goto	u2920
  8776  001F32                     u2921:
  8777  001F32  EFC8  F00F         	goto	l3197
  8778  001F36                     u2920:
  8779  001F36  0E00               	movlw	0
  8780  001F38  6E01               	movwf	?___fladd^0,c
  8781  001F3A  0E00               	movlw	0
  8782  001F3C  6E02               	movwf	(?___fladd+1)^0,c
  8783  001F3E  0E00               	movlw	0
  8784  001F40  6E03               	movwf	(?___fladd+2)^0,c
  8785  001F42  0E00               	movlw	0
  8786  001F44  6E04               	movwf	(?___fladd+3)^0,c
  8787  001F46  EF63  F010         	goto	l1037
  8788  001F4A                     l3181:
  8789  001F4A  90D8               	bcf	status,0,c
  8790  001F4C  3601               	rlcf	___fladd@b^0,f,c
  8791  001F4E  3602               	rlcf	(___fladd@b+1)^0,f,c
  8792  001F50  3603               	rlcf	(___fladd@b+2)^0,f,c
  8793  001F52  3604               	rlcf	(___fladd@b+3)^0,f,c
  8794  001F54  AE10               	btfss	___fladd@grs^0,7,c
  8795  001F56  EFAF  F00F         	goto	u2931
  8796  001F5A  EFB1  F00F         	goto	u2930
  8797  001F5E                     u2931:
  8798  001F5E  EFB2  F00F         	goto	l3187
  8799  001F62                     u2930:
  8800  001F62  8001               	bsf	___fladd@b^0,0,c
  8801  001F64                     l3187:
  8802  001F64  A010               	btfss	___fladd@grs^0,0,c
  8803  001F66  EFB7  F00F         	goto	u2941
  8804  001F6A  EFB9  F00F         	goto	u2940
  8805  001F6E                     u2941:
  8806  001F6E  EFBD  F00F         	goto	l3191
  8807  001F72                     u2940:
  8808  001F72  80D8               	bsf	status,0,c
  8809  001F74  3610               	rlcf	___fladd@grs^0,f,c
  8810  001F76  EFBF  F00F         	goto	l3193
  8811  001F7A                     l3191:
  8812  001F7A  90D8               	bcf	status,0,c
  8813  001F7C  3610               	rlcf	___fladd@grs^0,f,c
  8814  001F7E                     l3193:
  8815  001F7E  500F               	movf	___fladd@bexp^0,w,c
  8816  001F80  B4D8               	btfsc	status,2,c
  8817  001F82  EFC5  F00F         	goto	u2951
  8818  001F86  EFC7  F00F         	goto	u2950
  8819  001F8A                     u2951:
  8820  001F8A  EFC8  F00F         	goto	l3197
  8821  001F8E                     u2950:
  8822  001F8E  060F               	decf	___fladd@bexp^0,f,c
  8823  001F90                     l3197:
  8824  001F90  AE03               	btfss	(___fladd@b+2)^0,7,c
  8825  001F92  EFCD  F00F         	goto	u2961
  8826  001F96  EFCF  F00F         	goto	u2960
  8827  001F9A                     u2961:
  8828  001F9A  EFA5  F00F         	goto	l3181
  8829  001F9E                     u2960:
  8830  001F9E                     l3199:
  8831  001F9E  0E00               	movlw	0
  8832  001FA0  6E0E               	movwf	___fladd@aexp^0,c
  8833  001FA2  AE10               	btfss	___fladd@grs^0,7,c
  8834  001FA4  EFD6  F00F         	goto	u2971
  8835  001FA8  EFD8  F00F         	goto	u2970
  8836  001FAC                     u2971:
  8837  001FAC  EFF0  F00F         	goto	l1054
  8838  001FB0                     u2970:
  8839  001FB0  C010  F009         	movff	___fladd@grs,??___fladd
  8840  001FB4  0E7F               	movlw	127
  8841  001FB6  1609               	andwf	??___fladd^0,f,c
  8842  001FB8  B4D8               	btfsc	status,2,c
  8843  001FBA  EFE1  F00F         	goto	u2981
  8844  001FBE  EFE3  F00F         	goto	u2980
  8845  001FC2                     u2981:
  8846  001FC2  EFE7  F00F         	goto	l1055
  8847  001FC6                     u2980:
  8848  001FC6                     l3205:
  8849  001FC6  0E01               	movlw	1
  8850  001FC8  6E0E               	movwf	___fladd@aexp^0,c
  8851  001FCA  EFF0  F00F         	goto	l1054
  8852  001FCE                     l1055:
  8853  001FCE  A001               	btfss	___fladd@b^0,0,c
  8854  001FD0  EFEC  F00F         	goto	u2991
  8855  001FD4  EFEE  F00F         	goto	u2990
  8856  001FD8                     u2991:
  8857  001FD8  EFF0  F00F         	goto	l1054
  8858  001FDC                     u2990:
  8859  001FDC  EFE3  F00F         	goto	l3205
  8860  001FE0                     l1054:
  8861  001FE0  500E               	movf	___fladd@aexp^0,w,c
  8862  001FE2  B4D8               	btfsc	status,2,c
  8863  001FE4  EFF6  F00F         	goto	u3001
  8864  001FE8  EFF8  F00F         	goto	u3000
  8865  001FEC                     u3001:
  8866  001FEC  EF23  F010         	goto	l3217
  8867  001FF0                     u3000:
  8868  001FF0  0E01               	movlw	1
  8869  001FF2  2601               	addwf	___fladd@b^0,f,c
  8870  001FF4  0E00               	movlw	0
  8871  001FF6  2202               	addwfc	(___fladd@b+1)^0,f,c
  8872  001FF8  2203               	addwfc	(___fladd@b+2)^0,f,c
  8873  001FFA  2204               	addwfc	(___fladd@b+3)^0,f,c
  8874  001FFC  A004               	btfss	(___fladd@b+3)^0,0,c
  8875  001FFE  EF03  F010         	goto	u3011
  8876  002002  EF05  F010         	goto	u3010
  8877  002006                     u3011:
  8878  002006  EF23  F010         	goto	l3217
  8879  00200A                     u3010:
  8880  00200A  C001  F009         	movff	___fladd@b,??___fladd
  8881  00200E  C002  F00A         	movff	___fladd@b+1,??___fladd+1
  8882  002012  C003  F00B         	movff	___fladd@b+2,??___fladd+2
  8883  002016  C004  F00C         	movff	___fladd@b+3,??___fladd+3
  8884  00201A  340C               	rlcf	(??___fladd+3)^0,w,c
  8885  00201C  320C               	rrcf	(??___fladd+3)^0,f,c
  8886  00201E  320B               	rrcf	(??___fladd+2)^0,f,c
  8887  002020  320A               	rrcf	(??___fladd+1)^0,f,c
  8888  002022  3209               	rrcf	??___fladd^0,f,c
  8889  002024  C009  F001         	movff	??___fladd,___fladd@b
  8890  002028  C00A  F002         	movff	??___fladd+1,___fladd@b+1
  8891  00202C  C00B  F003         	movff	??___fladd+2,___fladd@b+2
  8892  002030  C00C  F004         	movff	??___fladd+3,___fladd@b+3
  8893  002034  280F               	incf	___fladd@bexp^0,w,c
  8894  002036  B4D8               	btfsc	status,2,c
  8895  002038  EF20  F010         	goto	u3021
  8896  00203C  EF22  F010         	goto	u3020
  8897  002040                     u3021:
  8898  002040  EF23  F010         	goto	l3217
  8899  002044                     u3020:
  8900  002044  2A0F               	incf	___fladd@bexp^0,f,c
  8901  002046                     l3217:
  8902  002046  280F               	incf	___fladd@bexp^0,w,c
  8903  002048  B4D8               	btfsc	status,2,c
  8904  00204A  EF29  F010         	goto	u3031
  8905  00204E  EF2B  F010         	goto	u3030
  8906  002052                     u3031:
  8907  002052  EF33  F010         	goto	l3221
  8908  002056                     u3030:
  8909  002056  500F               	movf	___fladd@bexp^0,w,c
  8910  002058  A4D8               	btfss	status,2,c
  8911  00205A  EF31  F010         	goto	u3041
  8912  00205E  EF33  F010         	goto	u3040
  8913  002062                     u3041:
  8914  002062  EF45  F010         	goto	l3225
  8915  002066                     u3040:
  8916  002066                     l3221:
  8917  002066  0E00               	movlw	0
  8918  002068  6E01               	movwf	___fladd@b^0,c
  8919  00206A  0E00               	movlw	0
  8920  00206C  6E02               	movwf	(___fladd@b+1)^0,c
  8921  00206E  0E00               	movlw	0
  8922  002070  6E03               	movwf	(___fladd@b+2)^0,c
  8923  002072  0E00               	movlw	0
  8924  002074  6E04               	movwf	(___fladd@b+3)^0,c
  8925  002076  500F               	movf	___fladd@bexp^0,w,c
  8926  002078  A4D8               	btfss	status,2,c
  8927  00207A  EF41  F010         	goto	u3051
  8928  00207E  EF43  F010         	goto	u3050
  8929  002082                     u3051:
  8930  002082  EF45  F010         	goto	l3225
  8931  002086                     u3050:
  8932  002086  0E00               	movlw	0
  8933  002088  6E0D               	movwf	___fladd@signs^0,c
  8934  00208A                     l3225:
  8935  00208A  A00F               	btfss	___fladd@bexp^0,0,c
  8936  00208C  EF4A  F010         	goto	u3061
  8937  002090  EF4C  F010         	goto	u3060
  8938  002094                     u3061:
  8939  002094  EF4F  F010         	goto	l3229
  8940  002098                     u3060:
  8941  002098  8E03               	bsf	(___fladd@b+2)^0,7,c
  8942  00209A  EF50  F010         	goto	l3231
  8943  00209E                     l3229:
  8944  00209E  9E03               	bcf	(___fladd@b+2)^0,7,c
  8945  0020A0                     l3231:
  8946  0020A0  90D8               	bcf	status,0,c
  8947  0020A2  300F               	rrcf	___fladd@bexp^0,w,c
  8948  0020A4  6E04               	movwf	(___fladd@b+3)^0,c
  8949  0020A6  AE0D               	btfss	___fladd@signs^0,7,c
  8950  0020A8  EF58  F010         	goto	u3071
  8951  0020AC  EF5A  F010         	goto	u3070
  8952  0020B0                     u3071:
  8953  0020B0  EF5B  F010         	goto	l3237
  8954  0020B4                     u3070:
  8955  0020B4  8E04               	bsf	(___fladd@b+3)^0,7,c
  8956  0020B6                     l3237:
  8957  0020B6  C001  F001         	movff	___fladd@b,?___fladd
  8958  0020BA  C002  F002         	movff	___fladd@b+1,?___fladd+1
  8959  0020BE  C003  F003         	movff	___fladd@b+2,?___fladd+2
  8960  0020C2  C004  F004         	movff	___fladd@b+3,?___fladd+3
  8961  0020C6                     l1037:
  8962  0020C6  0012               	return		;funcret
  8963  0020C8                     __end_of___fladd:
  8964                           	callstack 0
  8965                           
  8966 ;; *************** function ___almod *****************
  8967 ;; Defined at:
  8968 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\almod.c"
  8969 ;; Parameters:    Size  Location     Type
  8970 ;;  dividend        4   14[COMRAM] long 
  8971 ;;  divisor         4   18[COMRAM] long 
  8972 ;; Auto vars:     Size  Location     Type
  8973 ;;  sign            1   23[COMRAM] unsigned char 
  8974 ;;  counter         1   22[COMRAM] unsigned char 
  8975 ;; Return value:  Size  Location     Type
  8976 ;;                  4   14[COMRAM] long 
  8977 ;; Registers used:
  8978 ;;		wreg, status,2, status,0
  8979 ;; Tracked objects:
  8980 ;;		On entry : 0/0
  8981 ;;		On exit  : 0/0
  8982 ;;		Unchanged: 0/0
  8983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8984 ;;      Params:         8       0       0       0       0       0       0
  8985 ;;      Locals:         2       0       0       0       0       0       0
  8986 ;;      Temps:          0       0       0       0       0       0       0
  8987 ;;      Totals:        10       0       0       0       0       0       0
  8988 ;;Total ram usage:       10 bytes
  8989 ;; Hardware stack levels used: 1
  8990 ;; This function calls:
  8991 ;;		Nothing
  8992 ;; This function is called by:
  8993 ;;		_washOne
  8994 ;;		_washTwo
  8995 ;;		_washThree
  8996 ;;		_washFour
  8997 ;;		_ssdTimer
  8998 ;; This function uses a non-reentrant model
  8999 ;;
  9000                           
  9001                           	psect	text32
  9002  003292                     __ptext32:
  9003                           	callstack 0
  9004  003292                     ___almod:
  9005                           	callstack 27
  9006  003292  0E00               	movlw	0
  9007  003294  6E18               	movwf	___almod@sign^0,c
  9008  003296  BE12               	btfsc	(___almod@dividend+3)^0,7,c
  9009  003298  EF52  F019         	goto	u2630
  9010  00329C  EF50  F019         	goto	u2631
  9011  0032A0                     u2631:
  9012  0032A0  EF5C  F019         	goto	l3011
  9013  0032A4                     u2630:
  9014  0032A4  1E12               	comf	(___almod@dividend+3)^0,f,c
  9015  0032A6  1E11               	comf	(___almod@dividend+2)^0,f,c
  9016  0032A8  1E10               	comf	(___almod@dividend+1)^0,f,c
  9017  0032AA  6C0F               	negf	___almod@dividend^0,c
  9018  0032AC  0E00               	movlw	0
  9019  0032AE  2210               	addwfc	(___almod@dividend+1)^0,f,c
  9020  0032B0  2211               	addwfc	(___almod@dividend+2)^0,f,c
  9021  0032B2  2212               	addwfc	(___almod@dividend+3)^0,f,c
  9022  0032B4  0E01               	movlw	1
  9023  0032B6  6E18               	movwf	___almod@sign^0,c
  9024  0032B8                     l3011:
  9025  0032B8  BE16               	btfsc	(___almod@divisor+3)^0,7,c
  9026  0032BA  EF63  F019         	goto	u2640
  9027  0032BE  EF61  F019         	goto	u2641
  9028  0032C2                     u2641:
  9029  0032C2  EF6B  F019         	goto	l3015
  9030  0032C6                     u2640:
  9031  0032C6  1E16               	comf	(___almod@divisor+3)^0,f,c
  9032  0032C8  1E15               	comf	(___almod@divisor+2)^0,f,c
  9033  0032CA  1E14               	comf	(___almod@divisor+1)^0,f,c
  9034  0032CC  6C13               	negf	___almod@divisor^0,c
  9035  0032CE  0E00               	movlw	0
  9036  0032D0  2214               	addwfc	(___almod@divisor+1)^0,f,c
  9037  0032D2  2215               	addwfc	(___almod@divisor+2)^0,f,c
  9038  0032D4  2216               	addwfc	(___almod@divisor+3)^0,f,c
  9039  0032D6                     l3015:
  9040  0032D6  5013               	movf	___almod@divisor^0,w,c
  9041  0032D8  1014               	iorwf	(___almod@divisor+1)^0,w,c
  9042  0032DA  1015               	iorwf	(___almod@divisor+2)^0,w,c
  9043  0032DC  1016               	iorwf	(___almod@divisor+3)^0,w,c
  9044  0032DE  B4D8               	btfsc	status,2,c
  9045  0032E0  EF74  F019         	goto	u2651
  9046  0032E4  EF76  F019         	goto	u2650
  9047  0032E8                     u2651:
  9048  0032E8  EFA6  F019         	goto	l3031
  9049  0032EC                     u2650:
  9050  0032EC  0E01               	movlw	1
  9051  0032EE  6E17               	movwf	___almod@counter^0,c
  9052  0032F0  EF80  F019         	goto	l3021
  9053  0032F4                     l3019:
  9054  0032F4  90D8               	bcf	status,0,c
  9055  0032F6  3613               	rlcf	___almod@divisor^0,f,c
  9056  0032F8  3614               	rlcf	(___almod@divisor+1)^0,f,c
  9057  0032FA  3615               	rlcf	(___almod@divisor+2)^0,f,c
  9058  0032FC  3616               	rlcf	(___almod@divisor+3)^0,f,c
  9059  0032FE  2A17               	incf	___almod@counter^0,f,c
  9060  003300                     l3021:
  9061  003300  AE16               	btfss	(___almod@divisor+3)^0,7,c
  9062  003302  EF85  F019         	goto	u2661
  9063  003306  EF87  F019         	goto	u2660
  9064  00330A                     u2661:
  9065  00330A  EF7A  F019         	goto	l3019
  9066  00330E                     u2660:
  9067  00330E                     l3023:
  9068  00330E  5013               	movf	___almod@divisor^0,w,c
  9069  003310  5C0F               	subwf	___almod@dividend^0,w,c
  9070  003312  5014               	movf	(___almod@divisor+1)^0,w,c
  9071  003314  5810               	subwfb	(___almod@dividend+1)^0,w,c
  9072  003316  5015               	movf	(___almod@divisor+2)^0,w,c
  9073  003318  5811               	subwfb	(___almod@dividend+2)^0,w,c
  9074  00331A  5016               	movf	(___almod@divisor+3)^0,w,c
  9075  00331C  5812               	subwfb	(___almod@dividend+3)^0,w,c
  9076  00331E  A0D8               	btfss	status,0,c
  9077  003320  EF94  F019         	goto	u2671
  9078  003324  EF96  F019         	goto	u2670
  9079  003328                     u2671:
  9080  003328  EF9E  F019         	goto	l3027
  9081  00332C                     u2670:
  9082  00332C  5013               	movf	___almod@divisor^0,w,c
  9083  00332E  5E0F               	subwf	___almod@dividend^0,f,c
  9084  003330  5014               	movf	(___almod@divisor+1)^0,w,c
  9085  003332  5A10               	subwfb	(___almod@dividend+1)^0,f,c
  9086  003334  5015               	movf	(___almod@divisor+2)^0,w,c
  9087  003336  5A11               	subwfb	(___almod@dividend+2)^0,f,c
  9088  003338  5016               	movf	(___almod@divisor+3)^0,w,c
  9089  00333A  5A12               	subwfb	(___almod@dividend+3)^0,f,c
  9090  00333C                     l3027:
  9091  00333C  90D8               	bcf	status,0,c
  9092  00333E  3216               	rrcf	(___almod@divisor+3)^0,f,c
  9093  003340  3215               	rrcf	(___almod@divisor+2)^0,f,c
  9094  003342  3214               	rrcf	(___almod@divisor+1)^0,f,c
  9095  003344  3213               	rrcf	___almod@divisor^0,f,c
  9096  003346  2E17               	decfsz	___almod@counter^0,f,c
  9097  003348  EF87  F019         	goto	l3023
  9098  00334C                     l3031:
  9099  00334C  5018               	movf	___almod@sign^0,w,c
  9100  00334E  B4D8               	btfsc	status,2,c
  9101  003350  EFAC  F019         	goto	u2681
  9102  003354  EFAE  F019         	goto	u2680
  9103  003358                     u2681:
  9104  003358  EFB6  F019         	goto	l3035
  9105  00335C                     u2680:
  9106  00335C  1E12               	comf	(___almod@dividend+3)^0,f,c
  9107  00335E  1E11               	comf	(___almod@dividend+2)^0,f,c
  9108  003360  1E10               	comf	(___almod@dividend+1)^0,f,c
  9109  003362  6C0F               	negf	___almod@dividend^0,c
  9110  003364  0E00               	movlw	0
  9111  003366  2210               	addwfc	(___almod@dividend+1)^0,f,c
  9112  003368  2211               	addwfc	(___almod@dividend+2)^0,f,c
  9113  00336A  2212               	addwfc	(___almod@dividend+3)^0,f,c
  9114  00336C                     l3035:
  9115  00336C  C00F  F00F         	movff	___almod@dividend,?___almod
  9116  003370  C010  F010         	movff	___almod@dividend+1,?___almod+1
  9117  003374  C011  F011         	movff	___almod@dividend+2,?___almod+2
  9118  003378  C012  F012         	movff	___almod@dividend+3,?___almod+3
  9119  00337C  0012               	return		;funcret
  9120  00337E                     __end_of___almod:
  9121                           	callstack 0
  9122                           
  9123 ;; *************** function _kpRead *****************
  9124 ;; Defined at:
  9125 ;;		line 42 in file "keypad.c"
  9126 ;; Parameters:    Size  Location     Type
  9127 ;;		None
  9128 ;; Auto vars:     Size  Location     Type
  9129 ;;		None
  9130 ;; Return value:  Size  Location     Type
  9131 ;;                  2    0[COMRAM] unsigned int 
  9132 ;; Registers used:
  9133 ;;		None
  9134 ;; Tracked objects:
  9135 ;;		On entry : 0/0
  9136 ;;		On exit  : 0/0
  9137 ;;		Unchanged: 0/0
  9138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9139 ;;      Params:         2       0       0       0       0       0       0
  9140 ;;      Locals:         0       0       0       0       0       0       0
  9141 ;;      Temps:          0       0       0       0       0       0       0
  9142 ;;      Totals:         2       0       0       0       0       0       0
  9143 ;;Total ram usage:        2 bytes
  9144 ;; Hardware stack levels used: 1
  9145 ;; This function calls:
  9146 ;;		Nothing
  9147 ;; This function is called by:
  9148 ;;		_kpOptions1
  9149 ;;		_kpOptions2
  9150 ;; This function uses a non-reentrant model
  9151 ;;
  9152                           
  9153                           	psect	text33
  9154  003C10                     __ptext33:
  9155                           	callstack 0
  9156  003C10                     _kpRead:
  9157                           	callstack 27
  9158  003C10                     
  9159                           ;keypad.c: 43:     return valor;
  9160  003C10  C05D  F001         	movff	_valor,?_kpRead
  9161  003C14  C05E  F002         	movff	_valor+1,?_kpRead+1
  9162  003C18  0012               	return		;funcret
  9163  003C1A                     __end_of_kpRead:
  9164                           	callstack 0
  9165                           
  9166 ;; *************** function _kpDebounce *****************
  9167 ;; Defined at:
  9168 ;;		line 46 in file "keypad.c"
  9169 ;; Parameters:    Size  Location     Type
  9170 ;;		None
  9171 ;; Auto vars:     Size  Location     Type
  9172 ;;  k               2    6[COMRAM] int 
  9173 ;;  i               1    9[COMRAM] unsigned char 
  9174 ;;  j               1    8[COMRAM] unsigned char 
  9175 ;;  old_D           1    5[COMRAM] unsigned char 
  9176 ;; Return value:  Size  Location     Type
  9177 ;;                  1    wreg      void 
  9178 ;; Registers used:
  9179 ;;		wreg, status,2, status,0, prodl, prodh
  9180 ;; Tracked objects:
  9181 ;;		On entry : 0/0
  9182 ;;		On exit  : 0/0
  9183 ;;		Unchanged: 0/0
  9184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9185 ;;      Params:         0       0       0       0       0       0       0
  9186 ;;      Locals:         5       0       0       0       0       0       0
  9187 ;;      Temps:          5       0       0       0       0       0       0
  9188 ;;      Totals:        10       0       0       0       0       0       0
  9189 ;;Total ram usage:       10 bytes
  9190 ;; Hardware stack levels used: 1
  9191 ;; This function calls:
  9192 ;;		Nothing
  9193 ;; This function is called by:
  9194 ;;		_kpOptions1
  9195 ;;		_kpOptions2
  9196 ;; This function uses a non-reentrant model
  9197 ;;
  9198                           
  9199                           	psect	text34
  9200  00294C                     __ptext34:
  9201                           	callstack 0
  9202  00294C                     _kpDebounce:
  9203                           	callstack 27
  9204  00294C                     
  9205                           ;keypad.c: 47:     unsigned char i, j;;keypad.c: 48:     static unsigned char tempo;;key
      +                          pad.c: 49:     static unsigned int valorNovo = 0x0000;;keypad.c: 50:     static unsigned
      +                           int valorAntigo = 0x0000;;keypad.c: 53:     unsigned char old_D;;keypad.c: 54:     old_
      +                          D = PORTD;
  9206  00294C  CF83 F006          	movff	3971,kpDebounce@old_D	;volatile
  9207  002950                     
  9208                           ;keypad.c: 58:     TRISD |= 0x0f;
  9209  002950  0E0F               	movlw	15
  9210  002952  1295               	iorwf	149,f,c	;volatile
  9211  002954                     
  9212                           ;keypad.c: 60:     for (i = 0; i < 3; i++) {
  9213  002954  0E00               	movlw	0
  9214  002956  6E0A               	movwf	kpDebounce@i^0,c
  9215  002958                     l3275:
  9216                           
  9217                           ;keypad.c: 62:         TRISB &= 0xF8;
  9218  002958  0EF8               	movlw	248
  9219  00295A  1693               	andwf	147,f,c	;volatile
  9220                           
  9221                           ;keypad.c: 64:         ((TRISB) |= (1<<(i)));
  9222  00295C  C00A  F001         	movff	kpDebounce@i,??_kpDebounce
  9223  002960  0E01               	movlw	1
  9224  002962  6E02               	movwf	(??_kpDebounce+1)^0,c
  9225  002964  2A01               	incf	??_kpDebounce^0,f,c
  9226  002966  EFB7  F014         	goto	u3134
  9227  00296A                     u3135:
  9228  00296A  90D8               	bcf	status,0,c
  9229  00296C  3602               	rlcf	(??_kpDebounce+1)^0,f,c
  9230  00296E                     u3134:
  9231  00296E  2E01               	decfsz	??_kpDebounce^0,f,c
  9232  002970  EFB5  F014         	goto	u3135
  9233  002974  5002               	movf	(??_kpDebounce+1)^0,w,c
  9234  002976  1293               	iorwf	147,f,c	;volatile
  9235                           
  9236                           ;keypad.c: 66:         PORTB |= 0x07;
  9237  002978  0E07               	movlw	7
  9238  00297A  1281               	iorwf	129,f,c	;volatile
  9239                           
  9240                           ;keypad.c: 67:         ((PORTB) &= ~(1<<(i)));
  9241  00297C  C00A  F001         	movff	kpDebounce@i,??_kpDebounce
  9242  002980  0E01               	movlw	1
  9243  002982  6E02               	movwf	(??_kpDebounce+1)^0,c
  9244  002984  2A01               	incf	??_kpDebounce^0,f,c
  9245  002986  EFC7  F014         	goto	u3144
  9246  00298A                     u3145:
  9247  00298A  90D8               	bcf	status,0,c
  9248  00298C  3602               	rlcf	(??_kpDebounce+1)^0,f,c
  9249  00298E                     u3144:
  9250  00298E  2E01               	decfsz	??_kpDebounce^0,f,c
  9251  002990  EFC5  F014         	goto	u3145
  9252  002994  5002               	movf	(??_kpDebounce+1)^0,w,c
  9253  002996  0AFF               	xorlw	255
  9254  002998  1681               	andwf	129,f,c	;volatile
  9255  00299A                     
  9256                           ;keypad.c: 70:         for (int k = 0; k < 10; k++);
  9257  00299A  0E00               	movlw	0
  9258  00299C  6E08               	movwf	(kpDebounce@k+1)^0,c
  9259  00299E  0E00               	movlw	0
  9260  0029A0  6E07               	movwf	kpDebounce@k^0,c
  9261  0029A2                     l3283:
  9262  0029A2  4A07               	infsnz	kpDebounce@k^0,f,c
  9263  0029A4  2A08               	incf	(kpDebounce@k+1)^0,f,c
  9264  0029A6  BE08               	btfsc	(kpDebounce@k+1)^0,7,c
  9265  0029A8  EFDF  F014         	goto	u3151
  9266  0029AC  5008               	movf	(kpDebounce@k+1)^0,w,c
  9267  0029AE  E109               	bnz	u3150
  9268  0029B0  0E0A               	movlw	10
  9269  0029B2  5C07               	subwf	kpDebounce@k^0,w,c
  9270  0029B4  A0D8               	btfss	status,0,c
  9271  0029B6  EFDF  F014         	goto	u3151
  9272  0029BA  EFE1  F014         	goto	u3150
  9273  0029BE                     u3151:
  9274  0029BE  EFD1  F014         	goto	l3283
  9275  0029C2                     u3150:
  9276  0029C2                     
  9277                           ;keypad.c: 73:         for (j = 0; j < 4; j++) {
  9278  0029C2  0E00               	movlw	0
  9279  0029C4  6E09               	movwf	kpDebounce@j^0,c
  9280  0029C6                     l3293:
  9281                           
  9282                           ;keypad.c: 74:             if (!((PORTD) & (1<<(j)))) {
  9283  0029C6  C009  F001         	movff	kpDebounce@j,??_kpDebounce
  9284  0029CA  0E01               	movlw	1
  9285  0029CC  6E02               	movwf	(??_kpDebounce+1)^0,c
  9286  0029CE  2A01               	incf	??_kpDebounce^0,f,c
  9287  0029D0  EFEC  F014         	goto	u3164
  9288  0029D4                     u3165:
  9289  0029D4  90D8               	bcf	status,0,c
  9290  0029D6  3602               	rlcf	(??_kpDebounce+1)^0,f,c
  9291  0029D8                     u3164:
  9292  0029D8  2E01               	decfsz	??_kpDebounce^0,f,c
  9293  0029DA  EFEA  F014         	goto	u3165
  9294  0029DE  5002               	movf	(??_kpDebounce+1)^0,w,c
  9295  0029E0  1483               	andwf	131,w,c	;volatile
  9296  0029E2  0900               	iorlw	0
  9297  0029E4  A4D8               	btfss	status,2,c
  9298  0029E6  EFF7  F014         	goto	u3171
  9299  0029EA  EFF9  F014         	goto	u3170
  9300  0029EE                     u3171:
  9301  0029EE  EF11  F015         	goto	l3297
  9302  0029F2                     u3170:
  9303  0029F2                     
  9304                           ;keypad.c: 75:                 ((valorNovo) |= (1<<((i * 4) + j)));
  9305  0029F2  500A               	movf	kpDebounce@i^0,w,c
  9306  0029F4  0D04               	mullw	4
  9307  0029F6  50F3               	movf	243,w,c
  9308  0029F8  2409               	addwf	kpDebounce@j^0,w,c
  9309  0029FA  6E01               	movwf	??_kpDebounce^0,c
  9310  0029FC  0E01               	movlw	1
  9311  0029FE  6E02               	movwf	(??_kpDebounce+1)^0,c
  9312  002A00  0E00               	movlw	0
  9313  002A02  6E03               	movwf	(??_kpDebounce+2)^0,c
  9314  002A04  2A01               	incf	??_kpDebounce^0,f,c
  9315  002A06  EF08  F015         	goto	u3184
  9316  002A0A                     u3185:
  9317  002A0A  90D8               	bcf	status,0,c
  9318  002A0C  3602               	rlcf	(??_kpDebounce+1)^0,f,c
  9319  002A0E  3603               	rlcf	(??_kpDebounce+2)^0,f,c
  9320  002A10                     u3184:
  9321  002A10  2E01               	decfsz	??_kpDebounce^0,f,c
  9322  002A12  EF05  F015         	goto	u3185
  9323  002A16  5002               	movf	(??_kpDebounce+1)^0,w,c
  9324  002A18  125B               	iorwf	kpDebounce@valorNovo^0,f,c
  9325  002A1A  5003               	movf	(??_kpDebounce+2)^0,w,c
  9326  002A1C  125C               	iorwf	(kpDebounce@valorNovo+1)^0,f,c
  9327                           
  9328                           ;keypad.c: 76:             } else {
  9329  002A1E  EF2B  F015         	goto	l3299
  9330  002A22                     l3297:
  9331                           
  9332                           ;keypad.c: 77:                 ((valorNovo) &= ~(1<<((i * 4) + j)));
  9333  002A22  500A               	movf	kpDebounce@i^0,w,c
  9334  002A24  0D04               	mullw	4
  9335  002A26  50F3               	movf	243,w,c
  9336  002A28  2409               	addwf	kpDebounce@j^0,w,c
  9337  002A2A  6E01               	movwf	??_kpDebounce^0,c
  9338  002A2C  0E01               	movlw	1
  9339  002A2E  6E02               	movwf	(??_kpDebounce+1)^0,c
  9340  002A30  0E00               	movlw	0
  9341  002A32  6E03               	movwf	(??_kpDebounce+2)^0,c
  9342  002A34  2A01               	incf	??_kpDebounce^0,f,c
  9343  002A36  EF20  F015         	goto	u3194
  9344  002A3A                     u3195:
  9345  002A3A  90D8               	bcf	status,0,c
  9346  002A3C  3602               	rlcf	(??_kpDebounce+1)^0,f,c
  9347  002A3E  3603               	rlcf	(??_kpDebounce+2)^0,f,c
  9348  002A40                     u3194:
  9349  002A40  2E01               	decfsz	??_kpDebounce^0,f,c
  9350  002A42  EF1D  F015         	goto	u3195
  9351  002A46  1C02               	comf	(??_kpDebounce+1)^0,w,c
  9352  002A48  6E04               	movwf	(??_kpDebounce+3)^0,c
  9353  002A4A  1C03               	comf	(??_kpDebounce+2)^0,w,c
  9354  002A4C  6E05               	movwf	(??_kpDebounce+4)^0,c
  9355  002A4E  5004               	movf	(??_kpDebounce+3)^0,w,c
  9356  002A50  165B               	andwf	kpDebounce@valorNovo^0,f,c
  9357  002A52  5005               	movf	(??_kpDebounce+4)^0,w,c
  9358  002A54  165C               	andwf	(kpDebounce@valorNovo+1)^0,f,c
  9359  002A56                     l3299:
  9360                           
  9361                           ;keypad.c: 79:         }
  9362  002A56  2A09               	incf	kpDebounce@j^0,f,c
  9363  002A58  0E03               	movlw	3
  9364  002A5A  6409               	cpfsgt	kpDebounce@j^0,c
  9365  002A5C  EF32  F015         	goto	u3201
  9366  002A60  EF34  F015         	goto	u3200
  9367  002A64                     u3201:
  9368  002A64  EFE3  F014         	goto	l3293
  9369  002A68                     u3200:
  9370  002A68                     
  9371                           ;keypad.c: 80:     }
  9372  002A68  2A0A               	incf	kpDebounce@i^0,f,c
  9373  002A6A  0E02               	movlw	2
  9374  002A6C  640A               	cpfsgt	kpDebounce@i^0,c
  9375  002A6E  EF3B  F015         	goto	u3211
  9376  002A72  EF3D  F015         	goto	u3210
  9377  002A76                     u3211:
  9378  002A76  EFAC  F014         	goto	l3275
  9379  002A7A                     u3210:
  9380  002A7A                     
  9381                           ;keypad.c: 81:     if (valorAntigo == valorNovo) {
  9382  002A7A  505B               	movf	kpDebounce@valorNovo^0,w,c
  9383  002A7C  1859               	xorwf	kpDebounce@valorAntigo^0,w,c
  9384  002A7E  E107               	bnz	u3221
  9385  002A80  505C               	movf	(kpDebounce@valorNovo+1)^0,w,c
  9386  002A82  185A               	xorwf	(kpDebounce@valorAntigo+1)^0,w,c
  9387  002A84  A4D8               	btfss	status,2,c
  9388  002A86  EF47  F015         	goto	u3221
  9389  002A8A  EF49  F015         	goto	u3220
  9390  002A8E                     u3221:
  9391  002A8E  EF4C  F015         	goto	l3311
  9392  002A92                     u3220:
  9393  002A92                     
  9394                           ;keypad.c: 82:         tempo--;
  9395  002A92  0664               	decf	kpDebounce@tempo^0,f,c
  9396                           
  9397                           ;keypad.c: 83:     } else {
  9398  002A94  EF52  F015         	goto	l100
  9399  002A98                     l3311:
  9400                           
  9401                           ;keypad.c: 84:         tempo = 10;
  9402  002A98  0E0A               	movlw	10
  9403  002A9A  6E64               	movwf	kpDebounce@tempo^0,c
  9404  002A9C                     
  9405                           ;keypad.c: 85:         valorAntigo = valorNovo;
  9406  002A9C  C05B  F059         	movff	kpDebounce@valorNovo,kpDebounce@valorAntigo
  9407  002AA0  C05C  F05A         	movff	kpDebounce@valorNovo+1,kpDebounce@valorAntigo+1
  9408  002AA4                     l100:
  9409                           
  9410                           ;keypad.c: 87:     if (tempo == 0) {
  9411  002AA4  5064               	movf	kpDebounce@tempo^0,w,c
  9412  002AA6  A4D8               	btfss	status,2,c
  9413  002AA8  EF58  F015         	goto	u3231
  9414  002AAC  EF5A  F015         	goto	u3230
  9415  002AB0                     u3231:
  9416  002AB0  EF5E  F015         	goto	l101
  9417  002AB4                     u3230:
  9418  002AB4                     
  9419                           ;keypad.c: 88:         valor = valorAntigo;
  9420  002AB4  C059  F05D         	movff	kpDebounce@valorAntigo,_valor
  9421  002AB8  C05A  F05E         	movff	kpDebounce@valorAntigo+1,_valor+1
  9422  002ABC                     l101:
  9423                           
  9424                           ;keypad.c: 90:     PORTD = old_D;
  9425  002ABC  C006  FF83         	movff	kpDebounce@old_D,3971	;volatile
  9426  002AC0                     
  9427                           ;keypad.c: 91:     TRISD = 0x00;
  9428  002AC0  0E00               	movlw	0
  9429  002AC2  6E95               	movwf	149,c	;volatile
  9430  002AC4  0012               	return		;funcret
  9431  002AC6                     __end_of_kpDebounce:
  9432                           	callstack 0
  9433                           
  9434 ;; *************** function _kpInit *****************
  9435 ;; Defined at:
  9436 ;;		line 94 in file "keypad.c"
  9437 ;; Parameters:    Size  Location     Type
  9438 ;;		None
  9439 ;; Auto vars:     Size  Location     Type
  9440 ;;		None
  9441 ;; Return value:  Size  Location     Type
  9442 ;;                  1    wreg      void 
  9443 ;; Registers used:
  9444 ;;		wreg, status,2, status,0
  9445 ;; Tracked objects:
  9446 ;;		On entry : 0/0
  9447 ;;		On exit  : 0/0
  9448 ;;		Unchanged: 0/0
  9449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9450 ;;      Params:         0       0       0       0       0       0       0
  9451 ;;      Locals:         0       0       0       0       0       0       0
  9452 ;;      Temps:          0       0       0       0       0       0       0
  9453 ;;      Totals:         0       0       0       0       0       0       0
  9454 ;;Total ram usage:        0 bytes
  9455 ;; Hardware stack levels used: 1
  9456 ;; This function calls:
  9457 ;;		Nothing
  9458 ;; This function is called by:
  9459 ;;		_main
  9460 ;; This function uses a non-reentrant model
  9461 ;;
  9462                           
  9463                           	psect	text35
  9464  003C1A                     __ptext35:
  9465                           	callstack 0
  9466  003C1A                     _kpInit:
  9467                           	callstack 30
  9468  003C1A                     
  9469                           ;keypad.c: 96:     TRISB &= 0x07;
  9470  003C1A  0E07               	movlw	7
  9471  003C1C  1693               	andwf	147,f,c	;volatile
  9472                           
  9473                           ;keypad.c: 98:     TRISD |= 0x0f;
  9474  003C1E  0E0F               	movlw	15
  9475  003C20  1295               	iorwf	149,f,c	;volatile
  9476  003C22  0012               	return		;funcret
  9477  003C24                     __end_of_kpInit:
  9478                           	callstack 0
  9479                           
  9480 ;; *************** function _initDishWasher *****************
  9481 ;; Defined at:
  9482 ;;		line 5 in file "led.c"
  9483 ;; Parameters:    Size  Location     Type
  9484 ;;		None
  9485 ;; Auto vars:     Size  Location     Type
  9486 ;;		None
  9487 ;; Return value:  Size  Location     Type
  9488 ;;                  1    wreg      void 
  9489 ;; Registers used:
  9490 ;;		wreg, status,2, status,0, cstack
  9491 ;; Tracked objects:
  9492 ;;		On entry : 0/0
  9493 ;;		On exit  : 0/0
  9494 ;;		Unchanged: 0/0
  9495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9496 ;;      Params:         0       0       0       0       0       0       0
  9497 ;;      Locals:         0       0       0       0       0       0       0
  9498 ;;      Temps:          0       0       0       0       0       0       0
  9499 ;;      Totals:         0       0       0       0       0       0       0
  9500 ;;Total ram usage:        0 bytes
  9501 ;; Hardware stack levels used: 1
  9502 ;; Hardware stack levels required when called: 1
  9503 ;; This function calls:
  9504 ;;		_delay
  9505 ;; This function is called by:
  9506 ;;		_main
  9507 ;; This function uses a non-reentrant model
  9508 ;;
  9509                           
  9510                           	psect	text36
  9511  0034DA                     __ptext36:
  9512                           	callstack 0
  9513  0034DA                     _initDishWasher:
  9514                           	callstack 29
  9515  0034DA                     
  9516                           ;led.c: 6:     TRISD = 0x00;
  9517  0034DA  0E00               	movlw	0
  9518  0034DC  6E95               	movwf	149,c	;volatile
  9519                           
  9520                           ;led.c: 7:     TRISB = 0x00;
  9521  0034DE  0E00               	movlw	0
  9522  0034E0  6E93               	movwf	147,c	;volatile
  9523                           
  9524                           ;led.c: 10:     PORTD = 0x00;
  9525  0034E2  0E00               	movlw	0
  9526  0034E4  6E83               	movwf	131,c	;volatile
  9527                           
  9528                           ;led.c: 11:     PORTB = 0x00;
  9529  0034E6  0E00               	movlw	0
  9530  0034E8  6E81               	movwf	129,c	;volatile
  9531                           
  9532                           ;led.c: 13:     PORTD = 0x1;
  9533  0034EA  0E01               	movlw	1
  9534  0034EC  6E83               	movwf	131,c	;volatile
  9535  0034EE                     
  9536                           ;led.c: 14:     delay(500);
  9537  0034EE  0E01               	movlw	1
  9538  0034F0  6E02               	movwf	(delay@temp+1)^0,c
  9539  0034F2  0EF4               	movlw	244
  9540  0034F4  6E01               	movwf	delay@temp^0,c
  9541  0034F6  EC92  F01C         	call	_delay	;wreg free
  9542  0034FA                     
  9543                           ;led.c: 16:     PORTD = 0x3;
  9544  0034FA  0E03               	movlw	3
  9545  0034FC  6E83               	movwf	131,c	;volatile
  9546                           
  9547                           ;led.c: 17:     delay(500);
  9548  0034FE  0E01               	movlw	1
  9549  003500  6E02               	movwf	(delay@temp+1)^0,c
  9550  003502  0EF4               	movlw	244
  9551  003504  6E01               	movwf	delay@temp^0,c
  9552  003506  EC92  F01C         	call	_delay	;wreg free
  9553  00350A                     
  9554                           ;led.c: 19:     PORTD = 0x7;
  9555  00350A  0E07               	movlw	7
  9556  00350C  6E83               	movwf	131,c	;volatile
  9557  00350E                     
  9558                           ;led.c: 20:     delay(500);
  9559  00350E  0E01               	movlw	1
  9560  003510  6E02               	movwf	(delay@temp+1)^0,c
  9561  003512  0EF4               	movlw	244
  9562  003514  6E01               	movwf	delay@temp^0,c
  9563  003516  EC92  F01C         	call	_delay	;wreg free
  9564                           
  9565                           ;led.c: 22:     PORTD = 0xF;
  9566  00351A  0E0F               	movlw	15
  9567  00351C  6E83               	movwf	131,c	;volatile
  9568  00351E                     
  9569                           ;led.c: 23:     delay(500);
  9570  00351E  0E01               	movlw	1
  9571  003520  6E02               	movwf	(delay@temp+1)^0,c
  9572  003522  0EF4               	movlw	244
  9573  003524  6E01               	movwf	delay@temp^0,c
  9574  003526  EC92  F01C         	call	_delay	;wreg free
  9575  00352A                     
  9576                           ;led.c: 25:     PORTD = 0x1F;
  9577  00352A  0E1F               	movlw	31
  9578  00352C  6E83               	movwf	131,c	;volatile
  9579                           
  9580                           ;led.c: 26:     delay(500);
  9581  00352E  0E01               	movlw	1
  9582  003530  6E02               	movwf	(delay@temp+1)^0,c
  9583  003532  0EF4               	movlw	244
  9584  003534  6E01               	movwf	delay@temp^0,c
  9585  003536  EC92  F01C         	call	_delay	;wreg free
  9586  00353A                     
  9587                           ;led.c: 28:     PORTD = 0x3F;
  9588  00353A  0E3F               	movlw	63
  9589  00353C  6E83               	movwf	131,c	;volatile
  9590  00353E                     
  9591                           ;led.c: 29:     delay(500);
  9592  00353E  0E01               	movlw	1
  9593  003540  6E02               	movwf	(delay@temp+1)^0,c
  9594  003542  0EF4               	movlw	244
  9595  003544  6E01               	movwf	delay@temp^0,c
  9596  003546  EC92  F01C         	call	_delay	;wreg free
  9597                           
  9598                           ;led.c: 31:     PORTD = 0x7F;
  9599  00354A  0E7F               	movlw	127
  9600  00354C  6E83               	movwf	131,c	;volatile
  9601  00354E                     
  9602                           ;led.c: 32:     delay(500);
  9603  00354E  0E01               	movlw	1
  9604  003550  6E02               	movwf	(delay@temp+1)^0,c
  9605  003552  0EF4               	movlw	244
  9606  003554  6E01               	movwf	delay@temp^0,c
  9607  003556  EC92  F01C         	call	_delay	;wreg free
  9608  00355A                     
  9609                           ;led.c: 34:     PORTD = 0xFF;
  9610  00355A  6883               	setf	131,c	;volatile
  9611  00355C                     
  9612                           ;led.c: 35:     PORTB = 0xFF;
  9613  00355C  6881               	setf	129,c	;volatile
  9614  00355E                     
  9615                           ;led.c: 37:     delay(1000);
  9616  00355E  0E03               	movlw	3
  9617  003560  6E02               	movwf	(delay@temp+1)^0,c
  9618  003562  0EE8               	movlw	232
  9619  003564  6E01               	movwf	delay@temp^0,c
  9620  003566  EC92  F01C         	call	_delay	;wreg free
  9621  00356A  0012               	return		;funcret
  9622  00356C                     __end_of_initDishWasher:
  9623                           	callstack 0
  9624                           
  9625 ;; *************** function _delay *****************
  9626 ;; Defined at:
  9627 ;;		line 3 in file "time.c"
  9628 ;; Parameters:    Size  Location     Type
  9629 ;;  temp            2    0[COMRAM] unsigned int 
  9630 ;; Auto vars:     Size  Location     Type
  9631 ;;  i               2    2[COMRAM] unsigned int 
  9632 ;;  k               1    5[COMRAM] volatile unsigned char 
  9633 ;;  j               1    4[COMRAM] volatile unsigned char 
  9634 ;; Return value:  Size  Location     Type
  9635 ;;                  1    wreg      void 
  9636 ;; Registers used:
  9637 ;;		wreg, status,2, status,0
  9638 ;; Tracked objects:
  9639 ;;		On entry : 0/0
  9640 ;;		On exit  : 0/0
  9641 ;;		Unchanged: 0/0
  9642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9643 ;;      Params:         2       0       0       0       0       0       0
  9644 ;;      Locals:         4       0       0       0       0       0       0
  9645 ;;      Temps:          0       0       0       0       0       0       0
  9646 ;;      Totals:         6       0       0       0       0       0       0
  9647 ;;Total ram usage:        6 bytes
  9648 ;; Hardware stack levels used: 1
  9649 ;; This function calls:
  9650 ;;		Nothing
  9651 ;; This function is called by:
  9652 ;;		_kpOptions2
  9653 ;;		_preWash
  9654 ;;		_washOne
  9655 ;;		_washTwo
  9656 ;;		_washThree
  9657 ;;		_washFour
  9658 ;;		_initDishWasher
  9659 ;;		_buzzer
  9660 ;;		_main
  9661 ;; This function uses a non-reentrant model
  9662 ;;
  9663                           
  9664                           	psect	text37
  9665  003924                     __ptext37:
  9666                           	callstack 0
  9667  003924                     _delay:
  9668                           	callstack 26
  9669  003924                     
  9670                           ;time.c: 4:     volatile unsigned char j, k;;time.c: 5:     unsigned int i;;time.c: 7:  
      +                             for (i = 0; i < temp; i++) {
  9671  003924  0E00               	movlw	0
  9672  003926  6E04               	movwf	(delay@i+1)^0,c
  9673  003928  0E00               	movlw	0
  9674  00392A  6E03               	movwf	delay@i^0,c
  9675  00392C  EFB8  F01C         	goto	l2853
  9676  003930                     l2831:
  9677                           
  9678                           ;time.c: 8:         for (j = 0; j < 41; j++) {
  9679  003930  0E00               	movlw	0
  9680  003932  6E05               	movwf	delay@j^0,c	;volatile
  9681  003934                     l2833:
  9682  003934  0E28               	movlw	40
  9683  003936  6405               	cpfsgt	delay@j^0,c	;volatile
  9684  003938  EFA0  F01C         	goto	u2461
  9685  00393C  EFA2  F01C         	goto	u2460
  9686  003940                     u2461:
  9687  003940  EFA4  F01C         	goto	l2837
  9688  003944                     u2460:
  9689  003944  EFB6  F01C         	goto	l2851
  9690  003948                     l2837:
  9691                           
  9692                           ;time.c: 9:             for (k = 0; k < 3; k++);
  9693  003948  0E00               	movlw	0
  9694  00394A  6E06               	movwf	delay@k^0,c	;volatile
  9695  00394C                     l2839:
  9696  00394C  0E02               	movlw	2
  9697  00394E  6406               	cpfsgt	delay@k^0,c	;volatile
  9698  003950  EFAC  F01C         	goto	u2471
  9699  003954  EFAE  F01C         	goto	u2470
  9700  003958                     u2471:
  9701  003958  EFB0  F01C         	goto	l2843
  9702  00395C                     u2470:
  9703  00395C  EFB3  F01C         	goto	l2847
  9704  003960                     l2843:
  9705  003960  2A06               	incf	delay@k^0,f,c	;volatile
  9706  003962  EFA6  F01C         	goto	l2839
  9707  003966                     l2847:
  9708                           
  9709                           ;time.c: 10:         }
  9710  003966  2A05               	incf	delay@j^0,f,c	;volatile
  9711  003968  EF9A  F01C         	goto	l2833
  9712  00396C                     l2851:
  9713                           
  9714                           ;time.c: 11:     }
  9715  00396C  4A03               	infsnz	delay@i^0,f,c
  9716  00396E  2A04               	incf	(delay@i+1)^0,f,c
  9717  003970                     l2853:
  9718  003970  5001               	movf	delay@temp^0,w,c
  9719  003972  5C03               	subwf	delay@i^0,w,c
  9720  003974  5002               	movf	(delay@temp+1)^0,w,c
  9721  003976  5804               	subwfb	(delay@i+1)^0,w,c
  9722  003978  A0D8               	btfss	status,0,c
  9723  00397A  EFC1  F01C         	goto	u2481
  9724  00397E  EFC3  F01C         	goto	u2480
  9725  003982                     u2481:
  9726  003982  EF98  F01C         	goto	l2831
  9727  003986                     u2480:
  9728  003986  0012               	return		;funcret
  9729  003988                     __end_of_delay:
  9730                           	callstack 0
  9731                           
  9732                           	psect	rparam
  9733  0000                     
  9734                           	psect	idloc
  9735                           
  9736                           ;Config register IDLOC0 @ 0x200000
  9737                           ;	unspecified, using default values
  9738  200000                     	org	2097152
  9739  200000  FF                 	db	255
  9740                           
  9741                           ;Config register IDLOC1 @ 0x200001
  9742                           ;	unspecified, using default values
  9743  200001                     	org	2097153
  9744  200001  FF                 	db	255
  9745                           
  9746                           ;Config register IDLOC2 @ 0x200002
  9747                           ;	unspecified, using default values
  9748  200002                     	org	2097154
  9749  200002  FF                 	db	255
  9750                           
  9751                           ;Config register IDLOC3 @ 0x200003
  9752                           ;	unspecified, using default values
  9753  200003                     	org	2097155
  9754  200003  FF                 	db	255
  9755                           
  9756                           ;Config register IDLOC4 @ 0x200004
  9757                           ;	unspecified, using default values
  9758  200004                     	org	2097156
  9759  200004  FF                 	db	255
  9760                           
  9761                           ;Config register IDLOC5 @ 0x200005
  9762                           ;	unspecified, using default values
  9763  200005                     	org	2097157
  9764  200005  FF                 	db	255
  9765                           
  9766                           ;Config register IDLOC6 @ 0x200006
  9767                           ;	unspecified, using default values
  9768  200006                     	org	2097158
  9769  200006  FF                 	db	255
  9770                           
  9771                           ;Config register IDLOC7 @ 0x200007
  9772                           ;	unspecified, using default values
  9773  200007                     	org	2097159
  9774  200007  FF                 	db	255
  9775                           
  9776                           	psect	config
  9777                           
  9778                           ; Padding undefined space
  9779  300000                     	org	3145728
  9780  300000  FF                 	db	255
  9781                           
  9782                           ;Config register CONFIG1H @ 0x300001
  9783                           ;	Oscillator Selection bits
  9784                           ;	OSC = HS, HS oscillator
  9785                           ;	Fail-Safe Clock Monitor Enable bit
  9786                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  9787                           ;	Internal/External Oscillator Switchover bit
  9788                           ;	IESO = OFF, Oscillator Switchover mode disabled
  9789  300001                     	org	3145729
  9790  300001  02                 	db	2
  9791                           
  9792                           ;Config register CONFIG2L @ 0x300002
  9793                           ;	Power-up Timer Enable bit
  9794                           ;	PWRT = OFF, PWRT disabled
  9795                           ;	Brown-out Reset Enable bits
  9796                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  9797                           ;	Brown Out Reset Voltage bits
  9798                           ;	BORV = 0x2E, user specified literal
  9799  300002                     	org	3145730
  9800  300002  71                 	db	369
  9801                           
  9802                           ;Config register CONFIG2H @ 0x300003
  9803                           ;	Watchdog Timer Enable bit
  9804                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  9805                           ;	Watchdog Timer Postscale Select bits
  9806                           ;	WDTPS = 1, 1:1
  9807  300003                     	org	3145731
  9808  300003  00                 	db	0
  9809                           
  9810                           ; Padding undefined space
  9811  300004                     	org	3145732
  9812  300004  FF                 	db	255
  9813                           
  9814                           ;Config register CONFIG3H @ 0x300005
  9815                           ;	CCP2 MUX bit
  9816                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  9817                           ;	PORTB A/D Enable bit
  9818                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
  9819                           ;	Low-Power Timer1 Oscillator Enable bit
  9820                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  9821                           ;	MCLR Pin Enable bit
  9822                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  9823  300005                     	org	3145733
  9824  300005  83                 	db	131
  9825                           
  9826                           ;Config register CONFIG4L @ 0x300006
  9827                           ;	Stack Full/Underflow Reset Enable bit
  9828                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
  9829                           ;	Single-Supply ICSP Enable bit
  9830                           ;	LVP = OFF, Single-Supply ICSP disabled
  9831                           ;	Extended Instruction Set Enable bit
  9832                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  9833                           ;	Background Debugger Enable bit
  9834                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  9835  300006                     	org	3145734
  9836  300006  80                 	db	128
  9837                           
  9838                           ; Padding undefined space
  9839  300007                     	org	3145735
  9840  300007  FF                 	db	255
  9841                           
  9842                           ;Config register CONFIG5L @ 0x300008
  9843                           ;	Code Protection bit
  9844                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  9845                           ;	Code Protection bit
  9846                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  9847                           ;	Code Protection bit
  9848                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  9849                           ;	Code Protection bit
  9850                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  9851  300008                     	org	3145736
  9852  300008  0F                 	db	15
  9853                           
  9854                           ;Config register CONFIG5H @ 0x300009
  9855                           ;	Boot Block Code Protection bit
  9856                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  9857                           ;	Data EEPROM Code Protection bit
  9858                           ;	CPD = OFF, Data EEPROM not code-protected
  9859  300009                     	org	3145737
  9860  300009  C0                 	db	192
  9861                           
  9862                           ;Config register CONFIG6L @ 0x30000A
  9863                           ;	Write Protection bit
  9864                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  9865                           ;	Write Protection bit
  9866                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  9867                           ;	Write Protection bit
  9868                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  9869                           ;	Write Protection bit
  9870                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  9871  30000A                     	org	3145738
  9872  30000A  0F                 	db	15
  9873                           
  9874                           ;Config register CONFIG6H @ 0x30000B
  9875                           ;	Configuration Register Write Protection bit
  9876                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  9877                           ;	Boot Block Write Protection bit
  9878                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
  9879                           ;	Data EEPROM Write Protection bit
  9880                           ;	WRTD = OFF, Data EEPROM not write-protected
  9881  30000B                     	org	3145739
  9882  30000B  E0                 	db	224
  9883                           
  9884                           ;Config register CONFIG7L @ 0x30000C
  9885                           ;	Table Read Protection bit
  9886                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  9887                           ;	Table Read Protection bit
  9888                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  9889                           ;	Table Read Protection bit
  9890                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  9891                           ;	Table Read Protection bit
  9892                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  9893  30000C                     	org	3145740
  9894  30000C  0F                 	db	15
  9895                           
  9896                           ;Config register CONFIG7H @ 0x30000D
  9897                           ;	Boot Block Table Read Protection bit
  9898                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  9899  30000D                     	org	3145741
  9900  30000D  40                 	db	64
  9901                           tosu	equ	0xFFF
  9902                           tosh	equ	0xFFE
  9903                           tosl	equ	0xFFD
  9904                           stkptr	equ	0xFFC
  9905                           pclatu	equ	0xFFB
  9906                           pclath	equ	0xFFA
  9907                           pcl	equ	0xFF9
  9908                           tblptru	equ	0xFF8
  9909                           tblptrh	equ	0xFF7
  9910                           tblptrl	equ	0xFF6
  9911                           tablat	equ	0xFF5
  9912                           prodh	equ	0xFF4
  9913                           prodl	equ	0xFF3
  9914                           indf0	equ	0xFEF
  9915                           postinc0	equ	0xFEE
  9916                           postdec0	equ	0xFED
  9917                           preinc0	equ	0xFEC
  9918                           plusw0	equ	0xFEB
  9919                           fsr0h	equ	0xFEA
  9920                           fsr0l	equ	0xFE9
  9921                           wreg	equ	0xFE8
  9922                           indf1	equ	0xFE7
  9923                           postinc1	equ	0xFE6
  9924                           postdec1	equ	0xFE5
  9925                           preinc1	equ	0xFE4
  9926                           plusw1	equ	0xFE3
  9927                           fsr1h	equ	0xFE2
  9928                           fsr1l	equ	0xFE1
  9929                           bsr	equ	0xFE0
  9930                           indf2	equ	0xFDF
  9931                           postinc2	equ	0xFDE
  9932                           postdec2	equ	0xFDD
  9933                           preinc2	equ	0xFDC
  9934                           plusw2	equ	0xFDB
  9935                           fsr2h	equ	0xFDA
  9936                           fsr2l	equ	0xFD9
  9937                           status	equ	0xFD8

Data Sizes:
    Strings     12
    Constant    17
    Data        624
    BSS         12
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     88     100
    BANK0           128     98      98
    BANK1           256    192     256
    BANK2           256      0     256
    BANK3           256      0     240
    BANK4           256      0      64
    BANK5           256      0       0

Pointer List with Targets:

    printf@msg	PTR unsigned char  size(2) Largest target is 64
		 -> main@msg1(BANK1[64]), main@msg(BANK1[32]), STR_4(CODE[12]), washFour@msg(COMRAM[48]), 
		 -> STR_3(CODE[12]), washThree@msg(COMRAM[32]), STR_2(CODE[12]), washTwo@msg(COMRAM[32]), 
		 -> msg5(BANK3[64]), STR_1(CODE[12]), msg4(BANK2[32]), msg3(BANK2[32]), 
		 -> msg2(BANK1[32]), msg1(BANK1[32]), washOne@msg(COMRAM[32]), preWash@msgem2(BANK1[32]), 
		 -> preWash@msgem1(BANK1[32]), preWash@msgem(BANK1[32]), kpOptions2@msg3(BANK0[64]), kpOptions2@msg2(BANK0[32]), 


Critical Paths under _main in COMRAM

    _main->_kpOptions1
    _ssdInit->_pinMode
    _pwmInit->_pwmFrequency
    _lcdInit->_lcdCommand
    _ssdTimer->_ssdDigit
    _kpOptions2->_washFour
    _washTwo->_ssdDigit
    _washThree->_ssdDigit
    _washOne->_ssdDigit
    _washFour->_ssdDigit
    _ssdUpdate->_digitalWrite
    _ssdDigit->___almod
    _pwmSet1->___lwdiv
    _printf->_lcdCommand
    _printf->_lcdData
    _lcdData->_digitalWrite
    _lcdPosition->_lcdCommand
    _lcdCommand->_digitalWrite
    _Delay2ms->_Delay40us
    _buzzer->_pwmFrequency
    _pwmSet2->___lwdiv
    _pwmFrequency->___aldiv
    ___almod->___aldiv
    _initDishWasher->_delay

Critical Paths under _main in BANK0

    _kpOptions1->_kpOptions2
    _preWash->_kpOptions2

Critical Paths under _main in BANK1

    _kpOptions1->_preWash

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                96    96      0  544620
                                             96 BANK1     96    96      0
                              _delay
                     _initDishWasher
                             _kpInit
                         _kpOptions1
                            _lcdInit
                             _printf
                            _pwmInit
                            _ssdInit
 ---------------------------------------------------------------------------------
 (1) _ssdInit                                              0     0      0    1352
                            _pinMode
 ---------------------------------------------------------------------------------
 (1) _pwmInit                                              0     0      0    6174
                       _pwmFrequency
 ---------------------------------------------------------------------------------
 (1) _lcdInit                                              0     0      0    4243
                           _Delay2ms
                         _lcdCommand
                            _pinMode
 ---------------------------------------------------------------------------------
 (2) _pinMode                                              6     2      4    1352
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _kpOptions1                                           2     2      0  517180
                                             86 COMRAM     2     2      0
                         _kpDebounce
                         _kpOptions2
                             _kpRead
                         _lcdCommand
                            _preWash
 ---------------------------------------------------------------------------------
 (2) _preWash                                             96    96      0  282657
                                              0 BANK1     96    96      0
                              _delay
                         _kpOptions2
                         _lcdCommand
                        _lcdPosition
                             _printf
                       _pwmFrequency
                            _pwmSet1
                            _pwmSet2
                           _ssdTimer
 ---------------------------------------------------------------------------------
 (3) _ssdTimer                                            12     8      4   22692
                                             26 COMRAM    12     8      4
                            ___aldiv
                            ___almod
                            ___fladd
                             ___flge
                           _delayAux
                           _ssdDigit
                          _ssdUpdate
 ---------------------------------------------------------------------------------
 (3) _kpOptions2                                          98    98      0  231319
                                              0 BANK0     98    98      0
                              _delay
                         _kpDebounce
                             _kpRead
                         _lcdCommand
                             _printf
                           _washFour
                            _washOne
                          _washThree
                            _washTwo
 ---------------------------------------------------------------------------------
 (4) _washTwo                                             44    44      0   53691
                                             26 COMRAM    44    44      0
                            ___aldiv
                            ___almod
                            ___fladd
                             ___flge
                             _buzzer
                              _delay
                           _delayAux
                         _lcdCommand
                        _lcdPosition
                             _printf
                            _pwmSet1
                           _ssdDigit
                          _ssdUpdate
 ---------------------------------------------------------------------------------
 (4) _washThree                                           44    44      0   53691
                                             26 COMRAM    44    44      0
                            ___aldiv
                            ___almod
                            ___fladd
                             ___flge
                             _buzzer
                              _delay
                           _delayAux
                         _lcdCommand
                        _lcdPosition
                             _printf
                            _pwmSet1
                           _ssdDigit
                          _ssdUpdate
 ---------------------------------------------------------------------------------
 (4) _washOne                                             44    44      0   53691
                                             26 COMRAM    44    44      0
                            ___aldiv
                            ___almod
                            ___fladd
                             ___flge
                             _buzzer
                              _delay
                           _delayAux
                         _lcdCommand
                        _lcdPosition
                             _printf
                            _pwmSet1
                           _ssdDigit
                          _ssdUpdate
 ---------------------------------------------------------------------------------
 (4) _washFour                                            60    60      0   53691
                                             26 COMRAM    60    60      0
                            ___aldiv
                            ___almod
                            ___fladd
                             ___flge
                             _buzzer
                              _delay
                           _delayAux
                         _lcdCommand
                        _lcdPosition
                             _printf
                            _pwmSet1
                           _ssdDigit
                          _ssdUpdate
 ---------------------------------------------------------------------------------
 (4) _ssdUpdate                                            2     2      0    2572
                                              6 COMRAM     2     2      0
                       _digitalWrite
 ---------------------------------------------------------------------------------
 (4) _ssdDigit                                             2     1      1    1696
                                             24 COMRAM     2     1      1
                            ___aldiv (ARG)
                            ___almod (ARG)
 ---------------------------------------------------------------------------------
 (3) _pwmSet1                                              5     5      0    1020
                                              7 COMRAM     5     5      0
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _printf                                               8     4      4   10939
                                              8 COMRAM     8     4      4
                         _lcdCommand
                            _lcdData
 ---------------------------------------------------------------------------------
 (2) _lcdData                                              2     2      0    2663
                                              6 COMRAM     2     2      0
                          _Delay40us
                       _digitalWrite
 ---------------------------------------------------------------------------------
 (3) _lcdPosition                                          3     2      1    4280
                                              8 COMRAM     3     2      1
                         _lcdCommand
 ---------------------------------------------------------------------------------
 (2) _lcdCommand                                           2     2      0    2799
                                              6 COMRAM     2     2      0
                           _Delay2ms
                          _Delay40us
                       _digitalWrite
 ---------------------------------------------------------------------------------
 (3) _digitalWrite                                         6     2      4    2572
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _Delay2ms                                             1     1      0      92
                                              1 COMRAM     1     1      0
                          _Delay40us
 ---------------------------------------------------------------------------------
 (3) _Delay40us                                            1     1      0      46
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _delayAux                                             5     3      2    1946
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (5) _buzzer                                               2     2      0    9604
                                             16 COMRAM     2     2      0
                              _delay
                       _pwmFrequency
                            _pwmSet2
 ---------------------------------------------------------------------------------
 (3) _pwmSet2                                              5     5      0    1020
                                              7 COMRAM     5     5      0
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     463
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     466
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _pwmFrequency                                         2     0      2    6174
                                             14 COMRAM     2     0      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8    5772
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (4) ___flge                                              12     4      8    1702
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             16     8      8    2996
                                              0 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (4) ___almod                                             10     2      8    5616
                                             14 COMRAM    10     2      8
                            ___aldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) _kpRead                                               2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _kpDebounce                                          10    10      0     315
                                              0 COMRAM    10    10      0
 ---------------------------------------------------------------------------------
 (1) _kpInit                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDishWasher                                       0     0      0    2342
                              _delay
 ---------------------------------------------------------------------------------
 (5) _delay                                                6     4      2    2342
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delay
   _initDishWasher
     _delay
   _kpInit
   _kpOptions1
     _kpDebounce
     _kpOptions2
       _delay
       _kpDebounce
       _kpRead
       _lcdCommand
         _Delay2ms
           _Delay40us
         _Delay40us
         _digitalWrite
       _printf
         _lcdCommand
         _lcdData
           _Delay40us
           _digitalWrite
       _washFour
         ___aldiv
         ___almod
           ___aldiv (ARG)
         ___fladd
         ___flge
         _buzzer
           _delay
           _pwmFrequency
             ___aldiv
           _pwmSet2
             ___lwdiv
             ___wmul
         _delay
         _delayAux
         _lcdCommand
         _lcdPosition
           _lcdCommand
         _printf
         _pwmSet1
           ___lwdiv
           ___wmul
         _ssdDigit
           ___aldiv (ARG)
           ___almod (ARG)
         _ssdUpdate
           _digitalWrite
       _washOne
         ___aldiv
         ___almod
         ___fladd
         ___flge
         _buzzer
         _delay
         _delayAux
         _lcdCommand
         _lcdPosition
         _printf
         _pwmSet1
         _ssdDigit
         _ssdUpdate
       _washThree
         ___aldiv
         ___almod
         ___fladd
         ___flge
         _buzzer
         _delay
         _delayAux
         _lcdCommand
         _lcdPosition
         _printf
         _pwmSet1
         _ssdDigit
         _ssdUpdate
       _washTwo
         ___aldiv
         ___almod
         ___fladd
         ___flge
         _buzzer
         _delay
         _delayAux
         _lcdCommand
         _lcdPosition
         _printf
         _pwmSet1
         _ssdDigit
         _ssdUpdate
     _kpRead
     _lcdCommand
     _preWash
       _delay
       _kpOptions2
       _lcdCommand
       _lcdPosition
       _printf
       _pwmFrequency
       _pwmSet1
       _pwmSet2
       _ssdTimer
         ___aldiv
         ___almod
         ___fladd
         ___flge
         _delayAux
         _ssdDigit
         _ssdUpdate
   _lcdInit
     _Delay2ms
     _lcdCommand
     _pinMode
   _printf
   _pwmInit
     _pwmFrequency
   _ssdInit
     _pinMode

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      40      13       25.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      F0      11       93.8%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     C0     100       7      100.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     62      62       5       76.6%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     58      64       1       78.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     3F6      15        0.0%
DATA                 0      0     3F6       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Sun Aug 01 18:38:38 2021

                     l15 343E                       l40 36F6                       l33 3BF6  
                     l51 3B42                       l43 3A88                       l28 3C0E  
                     l46 376E                       l49 3B26                       l82 3C18  
                     _v0 0062                       _v1 0061                       _v2 0060  
                     _v3 005F      ___wmul@multiplicand 0003                      l100 2AA4  
                    l101 2ABC                      l102 2AC4                      l110 3666  
                    l111 3650                      l105 3C22                      l115 3678  
                    l124 2F44                      l125 2F98                      l126 2F60  
                    l400 39DE                      l304 0B98                      l128 2F7C  
                    l209 26FC                      l410 2D88                      l323 1112  
                    l315 0DCA                      l500 3B98                      l316 0E90  
                    l420 2276                      l413 3A34                      l342 1C06  
                    l334 18BE                      l175 294A                      l335 1984  
                    l266 2C38                      l355 356A                      l451 38BA  
                    l371 3B72                      l427 24AE                      l419 21B0  
                    l460 38C4                      l365 3986                      l285 168C  
                    l277 1344                      l454 3BBE                      l278 140A  
                    l464 3922                      l448 384E                      l296 0850  
                    l297 0916                      l457 3BDA                      l592 337C  
                    l497 35F8                      l770 30A0                      l579 2E94  
                    l765 305A                      l991 37DA                      l998 37E2  
                    _PR2 000FCB                      wreg 000FE8           kpOptions2@msg2 00C0  
         kpOptions2@msg3 0080                     l1030 1DAA                     l1028 1DF6  
                   l1045 1F10                     l1037 20C6                     l1029 1DE4  
                   l1054 1FE0                     l1055 1FCE                     l3001 3906  
                   l3011 32B8                     l3003 3292                     l3021 3300  
                   l3013 32C6                     l3005 3296                     l3101 1D28  
                   l3023 330E                     l3031 334C                     l3015 32D6  
                   l3007 32A4                     l3111 1D3C                     l3103 1D2C  
                   l3033 335C                     l3025 332C                     l3017 32EC  
                   l3009 32B4                     l3201 1FA2                     l3121 1D76  
                   l3113 1D40                     l3105 1D30                     l3041 1C14  
                   l4001 3628                     l3035 336C                     l3027 333C  
                   l3019 32F4                     l3211 1FFC                     l3203 1FB0  
                   l3131 1DC8                     l3123 1D92                     l3115 1D44  
                   l3107 1D34                     l3051 1C54                     l3043 1C22  
                   l4003 3634                     l4011 3666                     l4021 350E  
                   l4013 34DA                     l3301 2A58                     l3029 3346  
                   l3221 2066                     l3213 200A                     l3205 1FC6  
                   l3141 1E14                     l3133 1DD6                     l3125 1DA2  
                   l3109 1D38                     l3117 1D48                     l3061 1C86  
                   l3053 1C56                     l3045 1C24                     l4005 3642  
                   l4031 354E                     l4023 351E                     l4015 34EE  
                   l3311 2A98                     l3303 2A68                     l3231 20A0  
                   l3223 2086                     l3215 2044                     l3151 1E54  
                   l3135 1DD8                     l3127 1DB8                     l3119 1D4C  
                   l3071 1CAE                     l3063 1C88                     l3047 1C34  
                   l3055 1C5E                     l3039 1C08                     l4103 2D62  
                   l4007 3648                     l4033 355A                     l4025 352A  
                   l4017 34FA                     l3313 2A9C                     l3305 2A6A  
                   l3233 20A6                     l3225 208A                     l3209 1FF0  
                   l3217 2046                     l3161 1E7E                     l3153 1E60  
                   l3145 1E28                     l3137 1DE2                     l3129 1DC4  
                   l3081 1CE8                     l3073 1CBE                     l3065 1C8E  
                   l3057 1C6E                     l3049 1C44                     l3241 2F9E  
                   l3401 14F0                     l3321 1124                     l4009 365E  
                   l4041 3A30                     l4035 355C                     l4027 353A  
                   l4019 350A                     l3315 2AB4                     l3307 2A7A  
                   l3235 20B4                     l3227 2098                     l3219 2056  
                   l3171 1EF0                     l3155 1E64                     l3147 1E38  
                   l3139 1E04                     l3163 1E84                     l3091 1D14  
                   l3083 1CFA                     l3075 1CCE                     l3067 1C9C  
                   l3059 1C74                     l3251 3028                     l3243 2FCC  
                   l3403 1556                     l3411 1634                     l3331 1174  
                   l3323 1136                     l4051 3BCE                     l4043 3BC0  
                   l4037 355E                     l4029 353E                     l3317 2AC0  
                   l3309 2A92                     l3237 20B6                     l3229 209E  
                   l3181 1F4A                     l3165 1EAA                     l3173 1F00  
                   l3157 1E72                     l3149 1E46                     l3093 1D18  
                   l3085 1D08                     l3077 1CD0                     l3069 1C9E  
                   l3253 303A                     l3245 2FDC                     l2701 283C  
                   l3421 1664                     l3413 1642                     l3405 161E  
                   l3341 11AC                     l3333 117A                     l3325 114A  
                   l4045 3BC4                     l4061 359C                     l4053 356C  
                   l3263 3C10                     l3191 1F7A                     l3183 1F54  
                   l3175 1F26                     l3167 1EDE                     l3159 1E74  
                   l3095 1D1C                     l3087 1D0C                     l3079 1CD8  
                   l3255 3048                     l3247 300A                     l2711 28D6  
                   l2703 285E                     l3423 1668                     l3415 1646  
                   l3407 1622                     l3351 11F0                     l3343 11C8  
                   l3335 1182                     l3327 1156                     l3319 1114  
                   l3511 09FC                     l3431 0630                     l4047 3BC8  
                   l4039 39E0                     l4071 35B0                     l4063 35A0  
                   l4055 3590                     l3265 294C                     l3193 1F7E  
                   l3185 1F62                     l3177 1F36                     l3169 1EE0  
                   l3097 1D20                     l3089 1D10                     l3257 3098  
                   l3249 301A                     l2721 3B90                     l2713 28F2  
                   l2705 287A                     l2801 36B0                     l3425 166C  
                   l3417 164C                     l3409 162E                     l3361 1230  
                   l3345 11CE                     l3353 11F6                     l3337 1194  
                   l3329 116A                     l3601 0E3E                     l3505 09CC  
                   l3513 0A62                     l3521 0B40                     l3441 0680  
                   l3433 0642                     l4049 3BCA                     l4081 35F4  
                   l4073 35B4                     l4065 35A4                     l4057 3594  
                   l3283 29A2                     l3275 2958                     l3267 2950  
                   l3195 1F8E                     l3187 1F64                     l3099 1D24  
                   l3259 309E                     l2731 2DAC                     l2715 290C  
                   l2707 2894                     l2811 36F2                     l2803 36C4  
                   l3427 1678                     l3419 1660                     l3371 1266  
                   l3363 123A                     l3355 1212                     l3347 11D2  
                   l3339 11A4                     l3603 0EF8                     l3531 0B70  
                   l3523 0B4E                     l3515 0B2A                     l3507 09DC  
                   l3451 06B8                     l3443 0686                     l3435 0656  
                   l4075 35C8                     l4067 35A8                     l4059 3598  
                   l3293 29C6                     l3285 29A6                     l3277 299A  
                   l3269 2954                     l3189 1F72                     l3197 1F90  
                   l2741 2DE2                     l2733 2DB0                     l2725 2D8A  
                   l2717 292C                     l2709 28B4                     l2805 36C8  
                   l2821 3A58                     l2813 3A38                     l2901 37E6  
                   l3701 17E0                     l3381 13B8                     l3373 127A  
                   l3357 1218                     l3365 1240                     l3349 11E6  
                   l3621 0F76                     l3605 0F08                     l3541 0BAA  
                   l3533 0B74                     l3525 0B52                     l3517 0B2E  
                   l3509 09E0                     l3461 06FC                     l3453 06D4  
                   l3445 068E                     l3437 0662                     l3429 0620  
                   l4077 35D4                     l4069 35AC                     l2831 3930  
                   l3295 29F2                     l3287 29C2                     l3199 1F9E  
                   l2751 2E24                     l2743 2DF8                     l2735 2DBE  
                   l2727 2D8E                     l2719 3B74                     l2663 3BFC  
                   l2807 36DA                     l2823 3A6C                     l2815 3A3C  
                   l2903 3804                     l2911 398A                     l3711 1932  
                   l3703 17F4                     l3383 1472                     l3375 1284  
                   l3367 125C                     l3359 121C                     l3615 0F46  
                   l3623 0FDC                     l3631 10BA                     l3551 0BFA  
                   l3543 0BBC                     l3535 0B78                     l3527 0B58  
                   l3519 0B3A                     l3471 073C                     l3455 06DA  
                   l3463 0702                     l3447 06A0                     l3439 0676  
                   l4079 35E8                     l2833 3934                     l3297 2A22  
                   l2753 2E42                     l2745 2E00                     l2761 2E64  
                   l2737 2DCE                     l2729 2D9C                     l2665 3BFE  
                   l2657 3BF8                     l2673 3BE0                     l2681 271A  
                   l2809 36EA                     l2825 3A80                     l2817 3A40  
                   l2905 3820                     l2921 39C4                     l2913 399A  
                   l3713 19EC                     l3705 17FE                     l3385 1482  
                   l3369 1260                     l3377 128A                     l3641 10EA  
                   l3633 10C8                     l3625 10A4                     l3617 0F56  
                   l3609 0F3E                     l3561 0C32                     l3553 0C00  
                   l3545 0BD0                     l3537 0B84                     l3529 0B6C  
                   l3481 0772                     l3473 0746                     l3465 071E  
                   l3457 06DE                     l3449 06B0                     l3801 20EE  
                   l2843 3960                     l2851 396C                     l3299 2A56  
                   l2763 2E74                     l2755 2E52                     l2747 2E0C  
                   l2739 2DD2                     l2771 3778                     l2931 3B54  
                   l2675 3BE4                     l2667 3BDC                     l2691 27A4  
                   l2683 272C                     l2827 3A84                     l2819 3A54  
                   l2907 3828                     l2923 39C8                     l2915 399E  
                   l3731 1A6A                     l3715 19FC                     l3707 1804  
                   l3651 169E                     l3395 14C0                     l3379 12F2  
                   l3643 10EE                     l3635 10CC                     l3627 10A8  
                   l3619 0F5A                     l3571 0C76                     l3563 0C4E  
                   l3555 0C08                     l3547 0BDC                     l3539 0B9A  
                   l3491 08C4                     l3483 0786                     l3467 0724  
                   l3475 074C                     l3459 06F2                     l3811 22EE  
                   l3803 20F6                     l2837 3948                     l2853 3970  
                   l2829 3924                     l2765 2E84                     l2757 2E54  
                   l2749 2E1A                     l2781 37AE                     l2773 378A  
                   l2861 388C                     l2677 3BE6                     l2693 27C4  
                   l2685 274C                     l2909 3840                     l2925 39DA  
                   l2917 39AE                     l2941 2C7A                     l2933 2C3A  
                   l3725 1A3A                     l3733 1AD0                     l3709 186C  
                   l3741 1BAE                     l3661 16EE                     l3653 16B0  
                   l3397 14D0                     l3389 14B8                     l3645 10F2  
                   l3637 10D2                     l3629 10B4                     l3581 0CB6  
                   l3565 0C54                     l3573 0C7C                     l3557 0C1A  
                   l3549 0BF0                     l3493 097E                     l3485 0790  
                   l3477 0768                     l3469 0728                     l3821 232C  
                   l3805 215E                     l3901 2B7E                     l2847 3966  
                   l2839 394C                     l2759 2E5E                     l2855 3B9A  
                   l2783 37C4                     l2775 3792                     l2863 3894  
                   l2927 3B44                     l2695 27E6                     l2687 276E  
                   l2679 26FE                     l2791 367C                     l2871 3384  
                   l2919 39B2                     l2951 2CD6                     l2943 2C96  
                   l2935 2C3E                     l3751 1BDE                     l3743 1BBC  
                   l3735 1B98                     l3727 1A4A                     l3719 1A32  
                   l3671 1726                     l3663 16F4                     l3655 16C4  
                   l3399 14D4                     l3647 10FE                     l3639 10E6  
                   l3591 0CEC                     l3583 0CC0                     l3575 0C98  
                   l3567 0C58                     l3559 0C2A                     l3495 098E  
                   l3479 076C                     l3487 0796                     l3831 248A  
                   l3823 233C                     l3815 2324                     l3807 2224  
                   l3911 2B9E                     l3903 2B84                     l2785 37CC  
                   l2777 379A                     l2769 3770                     l2865 38AC  
                   l2857 3852                     l2929 3B50                     l2697 2802  
                   l2689 278A                     l2793 3680                     l2881 33D2  
                   l2873 3396                     l2961 2D20                     l2953 2CEA  
                   l2945 2CA8                     l2937 2C52                     l3753 1BE2  
                   l3745 1BC0                     l3737 1B9C                     l3729 1A4E  
                   l3681 176A                     l3673 1742                     l3665 16FC  
                   l3657 16D0                     l3649 168E                     l3593 0D00  
                   l3577 0C9E                     l3585 0CC6                     l3569 0C6C  
                   l3489 07FE                     l3761 2EA0                     l3833 248E  
                   l3825 2340                     l3809 22DE                     l3921 2BC0  
                   l3913 2BAA                     l3905 2B86                     l3841 24CC  
                   l2787 37CE                     l2779 37A8                     l2859 3870  
                   l2699 281C                     l2795 3684                     l2891 3B0C  
                   l2883 33E6                     l2875 33AA                     l2867 337E  
                   l2963 2D32                     l2955 2CF2                     l2947 2CBC  
                   l2971 2D4E                     l2939 2C66                     l3755 1BE6  
                   l3747 1BC6                     l3739 1BA8                     l3691 17AA  
                   l3675 1748                     l3683 1770                     l3667 170E  
                   l3659 16E4                     l3595 0D0A                     l3587 0CE2  
                   l3579 0CA2                     l3499 09C4                     l3771 2EF8  
                   l3763 2EB2                     l3835 249A                     l3827 235C  
                   l3931 2BE0                     l3923 2BC2                     l3915 2BB0  
                   l3907 2B8C                     l3851 254E                     l3843 24DE  
                   l2789 37D4                     l2797 3698                     l2893 3B10  
                   l2885 33EC                     l2877 33B4                     l2869 337E  
                   l2965 2D46                     l2957 2D04                     l2949 2CC4  
                   l3757 1BF2                     l3749 1BDA                     l3693 17B4  
                   l3685 178C                     l3677 174C                     l3669 171E  
                   l3589 0CE6                     l3597 0D10                     l3781 2F3C  
                   l3773 2EFC                     l3765 2EC4                     l3829 23C2  
                   l3837 24A0                     l3941 2C00                     l3933 2BE2  
                   l3925 2BC6                     l3917 2BB2                     l3909 2B92  
                   l3861 25EA                     l3853 2572                     l3845 24FE  
                   l2991 38E8                     l2983 38D2                     l2799 369C  
                   l2895 3B20                     l2887 341C                     l2879 33C8  
                   l2959 2D18                     l3687 1792                     l3695 17BA  
                   l3679 1760                     l3599 0D78                     l3791 2F8A  
                   l3783 2F52                     l3775 2F1A                     l3767 2ED8  
                   l3759 2E96                     l3951 2C1E                     l3943 2C02  
                   l3935 2BEE                     l3927 2BD2                     l3919 2BB4  
                   l3871 2688                     l3863 2610                     l3855 2598  
                   l3847 2520                     l3839 24B0                     l2985 38DE  
                   l2993 38F8                     l2977 38BC                     l2897 3B36  
                   l2889 3420                     l3697 17D6                     l3689 1796  
                   l3793 2F90                     l3785 2F58                     l3777 2F26  
                   l3769 2EE4                     l3953 2C24                     l3945 2C0E  
                   l3937 2BF0                     l3929 2BD4                     l3881 2AFC  
                   l3873 26A4                     l3865 262C                     l3857 25B4  
                   l3849 253C                     l3961 3720                     l2995 38FA  
                   l2987 38E4                     l2899 3B3C                     l3699 17DA  
                   l3787 2F6E                     l3779 2F36                     l3795 20C8  
                   l3955 2C28                     l3947 2C10                     l3939 2BF4  
                   l3891 2B40                     l3883 2B10                     l3875 26B6  
                   l3867 263E                     l3859 25C6                     l3971 3734  
                   l3963 3724                     l2989 38E6                     l3789 2F74  
                   l3797 20CC                     l3957 2C34                     l3949 2C1C  
                   l3893 2B46                     l3885 2B1C                     l3877 26DA  
                   l3869 2662                     l3981 374C                     l3973 3738  
                   l3965 3728                     l2999 3902                     l3799 20DE  
                   l3895 2B5A                     l3887 2B30                     l3879 2AC6  
                   l3991 3768                     l3983 3750                     l3975 373E  
                   l3967 372C                     l3959 36F8                     l3993 3C1A  
                   l3897 2B6E                     l3889 2B3A                     l3985 3756  
                   l3977 3742                     l3969 3730                     l3899 2B78  
                   l3995 35FC                     l3987 375C                     l3979 3746  
                   l3997 3608                     l3989 3762                     l3999 360C  
                   STR_1 0612                     STR_2 0612                     STR_3 0612  
                   STR_4 0612                     u3000 1FF0                     u2200 27A4  
                   u3001 1FEC                     u2201 27A0                     u3010 200A  
                   u2130 3C0E                     u3011 2006                     u2131 3C0A  
                   u3020 2044                     u3100 3028                     u2140 3BF6  
                   u3021 2040                     u3101 3024                     u2141 3BF2  
                   u3030 2056                     u3110 3048                     u2310 28F2  
                   u2230 2802                     u2214 27B6                     u2150 271A  
                   u3031 2052                     u3111 3044                     u2311 28EE  
                   u2231 27FE                     u2215 27B2                     u2151 2716  
                   u3200 2A68                     u3040 2066                     u3120 3098  
                   u2400 2E74                     u2320 290C                     u2304 28C6  
                   u2240 281C                     u2224 27D6                     u2160 272C  
                   u4000 263E                     u3201 2A64                     u3041 2062  
                   u3121 3094                     u2401 2E70                     u2321 2908  
                   u2305 28C2                     u2241 2818                     u2225 27D2  
                   u2161 2728                     u4001 263A                     u3210 2A7A  
                   u3050 2086                     u2410 378A                     u3211 2A76  
                   u3051 2082                     u2411 3786                     u3220 2A92  
                   u3060 2098                     u2420 37A8                     u2500 33C8  
                   u3300 13B8                     u4100 3628                     u3221 2A8E  
                   u3061 2094                     u2421 37A4                     u2501 33C4  
                   u3301 13B4                     u4101 3624                     u3230 2AB4  
                   u3150 29C2                     u3134 296E                     u3070 20B4  
                   u2350 2D9C                     u2430 37C4                     u2334 291E  
                   u2270 287A                     u2254 282E                     u2190 278A  
                   u2174 273E                     u2510 33E6                     u3310 1472  
                   u4110 3642                     u4030 26A4                     u4014 2654  
                   u3231 2AB0                     u3151 29BE                     u3135 296A  
                   u3071 20B0                     u2351 2D98                     u2431 37C0  
                   u2335 291A                     u2271 2876                     u2255 282A  
                   u2191 2786                     u2175 273A                     u2511 33E2  
                   u3311 146E                     u4111 363E                     u4031 26A0  
                   u4015 2650                     u3144 298E                     u3080 2FCC  
                   u2360 2DBE                     u2600 3B72                     u2344 293E  
                   u2280 2894                     u2264 284E                     u2184 275E  
                   u2440 36DA                     u2520 3418                     u3320 14B4  
                   u3400 0768                     u4120 365E                     u4040 26B6  
                   u4024 2678                     u3145 298A                     u3081 2FC8  
                   u2361 2DBA                     u2601 3B6E                     u2345 293A  
                   u2281 2890                     u2265 284A                     u2185 275A  
                   u2441 36D6                     u3321 14B0                     u3241 112E  
                   u3401 0764                     u4121 365A                     u4041 26B2  
                   u4025 2674                     u3170 29F2                     u3090 300A  
                   u2370 2DF8                     u2610 38D2                     u2450 36EA  
                   u2530 343E                     u3330 14F0                     u3250 1194  
                   u3410 07FE                     u4130 3678                     u3171 29EE  
                   u3091 3006                     u2371 2DF4                     u2611 38CE  
                   u2451 36E6                     u2531 343A                     u3331 14EC  
                   u3251 1190                     u3411 07FA                     u4131 3674  
                   u2460 3944                     u3164 29D8                     u2700 1C34  
                   u2380 2E1A                     u2620 3922                     u2540 3B20  
                   u3340 1556                     u3260 11C8                     u3500 0C4E  
                   u3420 08C4                     u2461 3940                     u3165 29D4  
                   u2701 1C30                     u2381 2E16                     u2621 391E  
                   u2541 3B1C                     u3341 1552                     u3261 11C4  
                   u3501 0C4A                     u3421 08C0                     u4141 3576  
                   u2470 395C                     u2630 32A4                     u2710 1C44  
                   u2390 2E42                     u2294 28A6                     u2550 3B36  
                   u3350 1642                     u3270 1212                     u3510 0C98  
                   u3430 097E                     u4054 26CC                     u2471 3958  
                   u2631 32A0                     u2711 1C40                     u2391 2E3E  
                   u2295 28A2                     u2551 3B32                     u2527 340E  
                   u3351 163E                     u3271 120E                     u3511 0C94  
                   u3431 097A                     u4071 2AD0                     u4055 26C8  
                   u4151 3588                     u2480 3986                     u3184 2A10  
                   u2640 32C6                     u2800 1D90                     u2720 1C86  
                   u2560 399A                     u3280 125C                     u3520 0CE2  
                   u3440 09C0                     u4064 26F0                     u2481 3982  
                   u3185 2A0A                     u2641 32C2                     u2721 1C82  
                   u2561 3996                     u3601 16A8                     u3281 1258  
                   u3521 0CDE                     u3441 09BC                     u3361 063A  
                   u4081 2AE2                     u4065 26EC                     u3194 2A40  
                   u2650 32EC                     u2810 1DB8                     u2730 1C9C  
                   u2490 33AA                     u2570 39AE                     u3610 170E  
                   u3290 12F2                     u3530 0D78                     u3450 09FC  
                   u3370 06A0                     u3195 2A3A                     u2651 32E8  
                   u2811 1DB4                     u2731 1C98                     u2491 33A6  
                   u2571 39AA                     u3611 170A                     u3291 12EE  
                   u3531 0D74                     u3451 09F8                     u3371 069C  
                   u4091 2AF4                     u2660 330E                     u2900 1EF0  
                   u2820 1DD6                     u2740 1CAE                     u2580 39C4  
                   u3700 1AD0                     u3620 1742                     u3540 0E3E  
                   u3460 0A62                     u3380 06D4                     u2661 330A  
                   u2901 1EEC                     u2821 1DD2                     u2741 1CAA  
                   u2581 39C0                     u3701 1ACC                     u3621 173E  
                   u3541 0E3A                     u3461 0A5E                     u3381 06D0  
                   u2670 332C                     u2910 1F26                     u2830 1DF6  
                   u2750 1CBE                     u2590 39DA                     u3710 1BBC  
                   u3630 178C                     u3550 0EF8                     u3470 0B4E  
                   u3390 071E                     u2671 3328                     u2911 1F22  
                   u2831 1DF2                     u2751 1CBA                     u2591 39D6  
                   u3711 1BB8                     u3631 1788                     u3551 0EF4  
                   u3471 0B4A                     u3391 071A                     u2680 335C  
                   u2920 1F36                     u2840 1E04                     u2760 1CFA  
                   u3640 17D6                     u3560 0F3A                     u3800 215E  
                   u2681 3358                     u2921 1F32                     u2841 1E00  
                   u2761 1CF6                     u3641 17D2                     u3561 0F36  
                   u3481 0BB4                     u3721 2EAA                     u3801 215A  
                   u2930 1F62                     u2850 1E14                     u2770 1D08  
                   u2690 1C22                     u3650 186C                     u3570 0F76  
                   u3490 0C1A                     u3810 2224                     u2931 1F5E  
                   u2851 1E10                     u2771 1D04                     u2691 1C1E  
                   u3651 1868                     u3571 0F72                     u3491 0C16  
                   u3731 2EBC                     u3811 2220                     u2940 1F72  
                   u2860 1E46                     u2780 1D76                     u3660 1932  
                   u3580 0FDC                     u3740 2F1A                     u3820 22DE  
                   u2941 1F6E                     u2861 1E42                     u2781 1D72  
                   u3661 192E                     u3581 0FD8                     u3741 2F16  
                   u3821 22DA                     u2950 1F8E                     u2870 1E54  
                   u2790 1D8E                     u3670 19EC                     u3590 10C8  
                   u3750 2F36                     u3830 2320                     u3910 253C  
                   u2951 1F8A                     u2871 1E50                     u2791 1D88  
                   u3671 19E8                     u3591 10C4                     u3751 2F32  
                   u3831 231C                     u3911 2538                     u2960 1F9E  
                   u2880 1E72                     u3680 1A2E                     u3760 2F52  
                   u3840 235C                     u3920 254E                     u3904 2510  
                   u2961 1F9A                     u2881 1E6E                     u3681 1A2A  
                   u3761 2F4E                     u3841 2358                     u3921 254A  
                   u3905 250C                     u2970 1FB0                     u2890 1EAA  
                   u3690 1A6A                     u3770 2F6E                     u3850 23C2  
                   u2971 1FAC                     u2891 1EA6                     u3691 1A66  
                   u3771 2F6A                     u3851 23BE                     u2980 1FC6  
                   u3780 2F8A                     u3860 24AE                     u2981 1FC2  
                   u3781 2F86                     u3861 24AA                     u2990 1FDC  
                   u3790 20DE                     u3950 25B4                     u3934 2564  
                   u3870 24CC                     u2991 1FD8                     u3791 20DA  
                   u3951 25B0                     u3935 2560                     u3871 24C8  
                   u3960 25C6                     u3944 2588                     u3880 24DE  
                   u3961 25C2                     u3945 2584                     u3881 24DA  
                   u3990 262C                     u3974 25DC                     u3894 24F0  
                   u3991 2628                     u3975 25D8                     u3895 24EC  
                   u3984 2600                     u3985 25FC          kpOptions2@F2450 02A0  
        kpOptions2@F2452 0300                     _main 356C                     _msg1 01E0  
                   _msg2 01C0                     _msg3 02E0                     _msg4 02C0  
                   _msg5 03B0                     fsr0h 000FEA                     fsr1h 000FE2  
                   indf0 000FEF                     fsr0l 000FE9                     fsr1l 000FE1  
                   prodh 000FF4                     prodl 000FF3                     start 0000  
           ___param_bank 000000          kpOptions1@tecla 0057          __end_of___aldiv 2E96  
        __end_of___almod 337E          __end_of___fladd 20C8                    ?_main 0001  
                  _T2CON 000FCA          __end_of___lwdiv 37E4                    _PORTA 000F80  
                  _PORTB 000F81                    _PORTC 000F82                    _PORTD 000F83  
                  _PORTE 000F84                    _TRISA 000F92                    _TRISB 000F93  
                  _TRISC 000F94                    _TRISD 000F95                    _TRISE 000F96  
        __end_of_lcdData 3A8A          __end_of_lcdInit 3770                    _delay 3924  
        __end_of_pinMode 26FE                    _valor 005D          __end_of_preWash 2C3A  
                  tablat 000FF5          __end_of_ssdInit 3A36          __end_of_washOne 168E  
        __end_of_pwmSet1 3850          __end_of_pwmSet2 38BC          __end_of_pwmInit 3BDC  
        __end_of_washTwo 0B9A                    plusw1 000FE3                    plusw2 000FDB  
                  status 000FD8         __end_of_Delay2ms 3BF8     __end_of_digitalWrite 294C  
        __initialization 3440             __end_of_main 35FC       __size_of_Delay40us 0018  
       kpOptions2@tecla1 00E0                   ??_main 0059            __activetblptr 000002  
                 ?_delay 0001                   _CCPR1L 000FBE                   _CCPR2L 000FBB  
   __size_of_lcdPosition 003A         __end_of_delayAux 3B74  __size_of_initDishWasher 0092  
      lcdPosition@comand 000A                   ___flge 2F9E                ??___aldiv 0009  
              ??___almod 0017                ??___fladd 0009                   ___wmul 3B74  
              ??___lwdiv 0005                   _kpInit 3C1A                   _kpRead 3C10  
                 delay@i 0003                   delay@j 0005                   delay@k 0006  
                 _buzzer 38BC                   clear_0 34CA                ??_lcdData 0007  
                 isa$std 000001                ??_lcdInit 0009                   _printf 337E  
       __end_of_ssdDigit 39E0                ??_pinMode 0005         __end_of_washFour 1C08  
       __end_of_ssdTimer 24B0             __mediumconst 0000                ??_preWash 0057  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
              ??_ssdInit 0007                ??_washOne 001B                ??_pwmSet1 0008  
              ??_pwmInit 0011                ??_pwmSet2 0008                ??_washTwo 001B  
      __end_of_Delay40us 3C10               ___flge@ff1 0001               ___flge@ff2 0005  
             __accesstop 0080  __end_of__initialization 34D0            ___rparam_used 000001  
            pinMode@type 0003           __pcstackCOMRAM 0001             __pidataBANK1 3A8A  
           __pidataBANK2 30A2             __pidataBANK3 31A2             __pidataBANK4 3ACA  
          __end_of_delay 3988                ?_Delay2ms 0001                  ??_delay 0003  
  __size_of_digitalWrite 024E                  ?___flge 0001               _lcdCommand 367A  
                ?___wmul 0001                  ?_kpInit 0001                  ?_kpRead 0001  
                _CCP1CON 000FBD                  _CCP2CON 000FBA                  ?_buzzer 0001  
             _kpDebounce 294C                  ?_printf 0009       __size_of_washThree 057A  
     __size_of_ssdUpdate 0150               ??_Delay2ms 0002                ?_delayAux 0001  
           _digitalWrite 26FE           _initDishWasher 34DA               _kpOptions1 35FC  
             _kpOptions2 2E96                  __Hparam 0000                  __Lparam 0000  
              ?_ssdDigit 0019          kpDebounce@old_D 0006                ?_washFour 0001  
        kpDebounce@tempo 0064                ?_ssdTimer 001B                  ___aldiv 2D8A  
        __size_of___flge 0104                  ___almod 3292                  ___fladd 1C08  
        __size_of___wmul 0026                  ___lwdiv 3770             __psmallconst 0600  
        __size_of_kpInit 000A          __size_of_kpRead 000A              ssdDigit@val 001A  
            ssdDigit@pos 0019                  __pcinit 3440                  _lcdData 3A36  
        __size_of_buzzer 0068                  __ramtop 0600                  _lcdInit 36F8  
                __ptext0 356C                  __ptext1 39E0                  __ptext2 3BC0  
                __ptext3 36F8                  __ptext4 24B0                  __ptext5 35FC  
                __ptext6 2AC6                  __ptext7 20C8                  __ptext8 2E96  
                __ptext9 0620          __size_of_printf 00C2                  _display 0063  
                _pinMode 24B0         ___aldiv@dividend 0001               ??_delayAux 0003  
                _preWash 2AC6                  _ssdInit 39E0                  _washOne 1114  
                _pwmSet1 37E4                  _pwmSet2 3850                  _pwmInit 3BC0  
                _washTwo 0620                Delay2ms@i 0002                  main@msg 01A0  
    kpDebounce@valorNovo 005B     end_of_initialization 34D0   __end_of_initDishWasher 356C  
          __Lmediumconst 0000                  buzzer@i 0011            ?_pwmFrequency 000F  
      __end_of_washThree 1114        __end_of_ssdUpdate 2D8A              washFour@msg 001B  
             ??_ssdDigit 001A              washOne@cont 0043               ??_washFour 001B  
             ??_ssdTimer 001F                  printf@i 000F                  printf@j 000B  
       ___aldiv@quotient 000B                  postdec1 000FE5              ?_lcdCommand 0001  
                postinc0 000FEE              ?_kpDebounce 0001            preWash@msgem1 0120  
          preWash@msgem2 0140              washTwo@cont 0043           _valor@ssd$F340 0601  
            ___fladd@grs 0010            ??_lcdPosition 000A          ?_initDishWasher 0001  
         ??_pwmFrequency 0011                _Delay40us 3BF8              ?_kpOptions1 0001  
            ?_kpOptions2 0001           __end_of___flge 30A2           __end_of___wmul 3B9A  
         __end_of_kpInit 3C24           __end_of_kpRead 3C1A   __end_of_valor@ssd$F340 0612  
         __end_of_buzzer 3924           __end_of_printf 3440      start_initialization 3440  
      __size_of_Delay2ms 001C      __size_of_lcdCommand 007E      __size_of_kpDebounce 017A  
             ?_Delay40us 0001      __end_of_lcdPosition 3B44                 ??___flge 0009  
               ??___wmul 0005                 ??_kpInit 0001                 ??_kpRead 0003  
            __pdataBANK1 01C0              __pdataBANK2 0200              __pdataBANK3 0300  
            __pdataBANK4 0400                 ??_buzzer 0011                 ??_printf 000D  
              ___fladd@a 0005                ___fladd@b 0001      __size_of_kpOptions1 007E  
    __size_of_kpOptions2 0108              __pbssCOMRAM 0059            __pcstackBANK0 0080  
          __pcstackBANK1 0100               pinMode@pin 0001        __size_of_delayAux 0030  
       ___lwdiv@dividend 0001                 ?___aldiv 0001                 ?___almod 000F  
               ?___fladd 0001        __size_of_ssdDigit 0058                 ?___lwdiv 0001  
      __size_of_washFour 057A        __size_of_ssdTimer 03E8                 ?_lcdData 0001  
       ___almod@dividend 000F                 ?_lcdInit 0001     __end_of_pwmFrequency 3BC0  
          lcdCommand@cmd 0008              __smallconst 0600                 ?_pinMode 0001  
               ?_preWash 0001                 ?_ssdInit 0001                 ?_washOne 0001  
               ?_pwmSet1 0001                 ?_pwmInit 0001                 ?_pwmSet2 0001  
               ?_washTwo 0001         ___lwdiv@quotient 0005           __size_of_delay 0064  
            _lcdPosition 3B0A         pwmFrequency@freq 000F                delay@temp 0001  
              delayAux@i 0001                delayAux@j 0004          ___aldiv@divisor 0005  
        ___aldiv@counter 0009             preWash@F2400 0280             preWash@F2402 0260  
           preWash@F2404 0240              ??_Delay40us 0001           ___wmul@product 0005  
             washOne@msg 001B             ??_lcdCommand 0007                main@F2391 0370  
              main@F2393 0400                _washThree 0B9A                _ssdUpdate 2C3A  
             washThree@c 003B               washThree@i 003D               pwmSet1@val 000B  
             pwmSet2@val 000B             preWash@msgem 0100               washTwo@msg 001B  
           ??_kpDebounce 0001        ___wmul@multiplier 0001          lcdCommand@old_D 0007  
  kpDebounce@valorAntigo 0059                 _Delay2ms 3BDC         ??_initDishWasher 0007  
              copy_data0 3454                copy_data1 3474                copy_data2 3494  
              copy_data3 34B8       __end_of_lcdCommand 36F8             lcdData@old_D 0008  
           lcdData@valor 0007             ??_kpOptions1 0057             ??_kpOptions2 0057  
     __end_of_kpDebounce 2AC6                 __Hrparam 0000                 __Lrparam 0000  
             ?_washThree 0001               ?_ssdUpdate 0001         __size_of___aldiv 010C  
       __size_of___almod 00EC         __size_of___fladd 04C0         __size_of___lwdiv 0074  
        pwmSet1@porcento 000A         __size_of_lcdData 0054         __size_of_lcdInit 0078  
        pwmSet2@porcento 000A                 _delayAux 3B44       __end_of_kpOptions1 367A  
     __end_of_kpOptions2 2F9E         __size_of_pinMode 024E          ___lwdiv@divisor 0003  
          washFour@F2432 0340          ___lwdiv@counter 0007         __size_of_preWash 0174  
               __ptext10 0B9A                 __ptext11 1114                 __ptext20 26FE  
               __ptext12 168E                 __ptext21 3BDC                 __ptext13 2C3A  
               __ptext30 2F9E                 __ptext22 3BF8                 __ptext14 3988  
               __ptext31 1C08                 __ptext23 3B44                 __ptext15 37E4  
               __ptext32 3292                 __ptext24 38BC                 __ptext16 337E  
               __ptext33 3C10                 __ptext25 3850                 __ptext17 3A36  
               __ptext34 294C                 __ptext26 3B74                 __ptext18 3B0A  
               __ptext35 3C1A                 __ptext27 3770                 __ptext19 367A  
               __ptext36 34DA                 __ptext28 3B9A                 __ptext37 3924  
               __ptext29 2D8A         __size_of_ssdInit 0056         __size_of_washOne 057A  
       __size_of_pwmSet1 006C         __size_of_pwmSet2 006C         __size_of_pwmInit 001C  
       __size_of_washTwo 057A          ___almod@divisor 0013           washThree@F2425 0390  
        ___almod@counter 0017            __size_of_main 0090            washFour@tempo 004F  
             Delay40us@i 0001                 _ssdDigit 3988                washFour@c 004B  
              washFour@i 004D                 _washFour 168E                 isa$xinst 000000  
               _ssdTimer 20C8           washThree@tempo 003F                ssdTimer@c 001F  
              ssdTimer@i 0021    __size_of_pwmFrequency 0026                printf@msg 0009  
               main@msg1 0160           lcdPosition@col 0009            ?_digitalWrite 0001  
         lcdPosition@lin 000B             washOne@F2411 0220        digitalWrite@value 0003  
           _pwmFrequency 3B9A             washFour@cont 0053                 washOne@c 003B  
               washOne@i 003D            washThree@cont 0043             washOne@tempo 003F  
               washTwo@c 003B                 washTwo@i 003D              ??_washThree 001B  
            ??_ssdUpdate 0007            ssdTimer@tempo 0023             washTwo@F2418 0200  
            kpDebounce@i 000A              kpDebounce@j 0009              kpDebounce@k 0007  
         ??_digitalWrite 0005             ___aldiv@sign 000A             washThree@msg 001B  
           ssdTimer@cont 001B            ___fladd@signs 000D             ?_lcdPosition 0009  
        digitalWrite@pin 0001             ___almod@sign 0018             ___fladd@aexp 000E  
           ___fladd@bexp 000F             washTwo@tempo 003F  
